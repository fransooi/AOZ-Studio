// #################################################################
// CYBENET V1.14
// By Phil Bell
// Created April 2020
// phil@aozwithphil.com
// #################################################################
// Change Log
// #################################################################
// Date: 	03 Apr 2021
// Author: 	Phil Bell
// Desc:	Variable name typos fixed
// #################################################################
// Date: 	07 Apr 2021
// Author: 	Phil Bell
// Desc:	Added a Stop Audio instruction before playing the audio
//			when the player fires the weapon
// #################################################################
// Date: 	21 June 2021
// Author: 	Phil Bell
// Desc:	Added player points system
//			Integrated PlayFab Leaderboards
//			Upgrade ship bug fixed
// #################################################################
// Date: 	26 June 2021
// Author: 	Phil Bell
// Desc:	Added text inputs for login/register etc
//			Added screen fade effect
// #################################################################
// Date: 	27 June 2021
// Author: 	Phil Bell
// Desc:	Added password recovery facility
//			Game Assets are now loaded during the intro screen
//			Added YouTube video to the intro screen
//			Extended the CanvasInput to provide properties required
//			for the resize/reposition functionality
// #################################################################
// Date: 	5 Sep 2021
// Author: 	Phil Bell
// Desc:	Updated to use the Player and UI Instructions
//			Updated game logic for pixel precision collisions
// #################################################################
// Date: 	6 Sep 2021
// Author: 	Phil Bell
// Desc:	Updated to use a custom audio library
// #################################################################
// Date: 	9 Sep 2021
// Author: 	Phil Bell
// Desc:	Fixed issue where background freezes when selecting a
//			level from the game menu
// #################################################################

#useAssetsResources:false
#manifest: "aoz"
#displayWidth:1920
#displayHeight:1080
#fullScreen:true
#splashScreen:false
#googleFont:"baloo"
#googleFont:"allerta stencil"
#fps:false
#clean:true

Degree: Flash Off: Curs Off

JS Execute "document.title = 'CYBENET V1.14 - By Phil Bell'"
JS Execute "window.application.aoz.developerMode = true;"

// Using a custom JavaScript library for playing audio
Load JS "resources/custom/audio.js"
AUDIO_LOADED = 0
Global AUDIO_LOADED

// [Key$] is the ID for the game in the PlayFab developer console
Player Initialise Engine$="playfab", Key$="2A0F5", onError$="ON_PLAYER_ERROR"

// Check if an error occured during player initialise
If Player ErrorCode() <> 0
	Cls 0
	Locate 0, 1: Print "A error occured during Player Initialise"
	Locate 0, 2: Print Player ErrorCode()
	Locate 0, 3: Print Player ErrorMessage$()
	Wait Key
End If

Procedure ON_PLAYER_ERROR[CODE, MESSAGE$]
	// add code to handle errors that may occur from any of the Player instructions
	// you can also check PlayFab ErrorCode() for a non zero value directly after a Player Instruction
End Proc

{
	var audioMgr = null;
	var loadingCustomAudio = false;

	// Load audio files into custom audio library
	Application.loadCustomAudio = function () {
		try{
			if (loadingCustomAudio === true) return;
			loadingCustomAudio = true;

			audioMgr = new AudioManager({

				   1:       { filename: "resources/audio/sci-fi_weapon_laser_small_01.wav",      samples: 1, },
				   2:       { filename: "resources/audio/hit_20.wav",      samples: 1, },
				   3:       { filename: "resources/audio/sfx11.wav",      samples: 1, },
				   4:       { filename: "resources/audio/sci-fi_electric_pulse_power_down_01.wav",      samples: 1, },
				   5:       { filename: "resources/audio/sci-fi_weapon_auto_turret_release_01.wav",      samples: 1, },
				   6:       { filename: "resources/audio/gun_machinegun_auto_heavy_shot_08.wav",      samples: 1, },
				   7:       { filename: "resources/audio/sci-fi_weapon_blaster_laser_boom_zap_02.wav",      samples: 1, },
				   8:       { filename: "resources/audio/sci-fi_weapon_blaster_laser_boom_small_04.wav",      samples: 1, },
				   9:       { filename: "resources/audio/hydraulic_strut_air_gas_shock_door_05.wav",      samples: 1, },
				   10:       { filename: "resources/audio/sci-fi_electric_pulse_hum_08.wav",      samples: 1, },
				   11:       { filename: "resources/audio/engine.wav",      samples: 1, },
				   12:       { filename: "resources/audio/sword-unsheathe5.wav",      samples: 1, },
				   13:       { filename: "resources/audio/sci-fi_shield_device_power_up_01.wav",      samples: 1, },
				   14:       { filename: "resources/audio/sci-fi_electric_pulse_hum_02.wav",      samples: 1, },
				   15:       { filename: "resources/audio/sci-fi_explosion_05.wav",      samples: 1, },
				   16:       { filename: "resources/audio/sci-fi_weapon_laser_small_02.wav",      samples: 1, },
				   17:       { filename: "resources/audio/sci-fi_weapon_laser_small_03.wav",      samples: 1, },
				   18:       { filename: "resources/audio/sci-fi_weapon_blaster_laser_boom_small_03.wav",      samples: 1, },
				   19:       { filename: "resources/audio/sci-fi_weapon_blaster_laser_boom_heavy_01.wav",      samples: 1, },

				   20:       { filename: "resources/audio/bullet_flyby_designed_05.wav",      samples: 1, },
				   21:       { filename: "resources/audio/sci-fi_weapon_reload_06.wav",      samples: 1, },
				   22:       { filename: "resources/audio/sci-fi_weapon_reload_02.wav",      samples: 1, },
				   23:       { filename: "resources/audio/sci-fi_weapon_reload_01.wav",      samples: 1, },
				   24:       { filename: "resources/audio/sci-fi_weapon_reload_11.wav",      samples: 1, },
				   25:       { filename: "resources/audio/sci-fi_weapon_reload_10.wav",      samples: 1, },
				   26:       { filename: "resources/audio/retro_laser_gun_shoot_53.wav",      samples: 1, },
				   27:       { filename: "resources/audio/retro_laser_gun_shoot_58.wav",      samples: 1, },
				   28:       { filename: "resources/audio/retro_laser_gun_shoot_51.wav",      samples: 1, },
				   29:       { filename: "resources/audio/sci-fi_weapon_blaster_laser_boom_01.wav",      samples: 1, },
				   30:       { filename: "resources/audio/sci-fi_weapon_blaster_laser_boom_04.wav",      samples: 1, },
				   31:       { filename: "resources/audio/sci-fi_forcefield_holo_power_down_01.wav",      samples: 1, },
				   32:       { filename: "resources/audio/BOSS_HIT.wav",      samples: 1, },
				   33:       { filename: "resources/audio/sci-fi_explosion_03.wav",      samples: 1, },
				   34:       { filename: "resources/audio/sci-fi_weapon_laser_small_06.wav",      samples: 1, },
				   35:       { filename: "resources/audio/sci-fi_weapon_laser_small_04.wav",      samples: 1, },

				   50:       { filename: "resources/audio/FireExplosion1.wav",      samples: 1, },
				   51:       { filename: "resources/audio/FireExplosion2.wav",      samples: 1, },
				   52:       { filename: "resources/audio/FireExplosion3.wav",      samples: 1, },
				   53:       { filename: "resources/audio/FireExplosion4.wav",      samples: 1, },
				   54:       { filename: "resources/audio/FireExplosion5.wav",      samples: 1, },
				   55:       { filename: "resources/audio/FireExplosion6.wav",      samples: 1, },
				   56:       { filename: "resources/audio/FireExplosion7.wav",      samples: 1, },
				   57:       { filename: "resources/audio/FireExplosion8.wav",      samples: 1, },

				   65:       { filename: "resources/audio/MetalDebris1.wav",      samples: 1, },
				   66:       { filename: "resources/audio/MetalDebris2.wav",      samples: 1, },
				   67:       { filename: "resources/audio/MetalDebris3.wav",      samples: 1, },
				   68:       { filename: "resources/audio/MetalDebris4.wav",      samples: 1, },
				   69:       { filename: "resources/audio/MetalDebris5.wav",      samples: 1, },
				   70:       { filename: "resources/audio/RockDebrisLarge1.wav",      samples: 1, },
				   71:       { filename: "resources/audio/RockDebrisLarge2.wav",      samples: 1, },
				   72:       { filename: "resources/audio/RockDebrisLarge3.wav",      samples: 1, },
				   73:       { filename: "resources/audio/RockDebrisLarge4.wav",      samples: 1, },
				   74:       { filename: "resources/audio/RockDebrisLarge5.wav",      samples: 1, },
				   75:       { filename: "resources/audio/sci-fi_power_up_09.wav",      samples: 1, },
				   76:       { filename: "resources/audio/sci-fi_power_up_object_01.wav",      samples: 1, },
				   77:       { filename: "resources/audio/sci-fi_power_up_07.wav",      samples: 1, },
				   78:       { filename: "resources/audio/MediumExplosion4.wav",      samples: 1, },

				   200:       { filename: "resources/audio/CybenetLevel1.mp3",      samples: 1, },
				   201:       { filename: "resources/audio/CybenetLevel2.mp3",      samples: 1, },
				   202:       { filename: "resources/audio/CybenetLevel3.mp3",      samples: 1, },
				   203:       { filename: "resources/audio/CybenetLevel4.mp3",      samples: 1, },

				   210:       { filename: "resources/audio/CybenetLevel1Boss.mp3",      samples: 1, },
				   211:       { filename: "resources/audio/CybenetLevel2Boss.mp3",      samples: 1, },
				   212:       { filename: "resources/audio/CybenetLevel3Boss.mp3",      samples: 1, },
				   213:       { filename: "resources/audio/CybenetLevel4Boss.mp3",      samples: 1, },

				   250:       { filename: "resources/audio/retro_ui_menu_simple_click_01.wav",      samples: 1, },
				   251:       { filename: "resources/audio/CybenetMenu.mp3",      samples: 1, },
			},
			{
				startedOnTouchCallback: function (){
				},
				callback: function (){
					// Using an AOZ variable so we can detect when all audio files have been loaded
					// and continue program execution
					window.application.root.vars.AUDIO_LOADED = 1;
				}
			});
		}
		catch {
			// an error will occur if the "resources/custom/audio.js" file has not yet been loaded
			audioMgr = null;
			loadingCustomAudio = false;
			window.application.root.vars.AUDIO_LOADED = 0;
		}
	}

	Application.playAudio = function (audioID, loopon, volume) {
		audioMgr.playSound(audioID, 0, loopon, volume);
	}

	Application.stopAudio = function (audioID) {
		audioMgr.stopSound(audioID);
	}

	Application.getLoadedCount = function () {
		return audioMgr.getLoadedCount();
	}
}

MAX_LEVEL = Val(Player Data$("maxUnlockedArea"))		// The max unlocked level
MAX_PLAYER_SHIP = Val(Player Data$("maxPlayerShip"))	// The max unlocked player ship
GLOBAL_HI_SCORE = 0										// Top game score
GLOBAL_HI_SCORE_NAME$ = ""  							// Top game score player name
LEADERBOARD_LOADED = false								// Tracks when a leaderboard has been loaded
Global LEADERBOARD_LOADED, GLOBAL_HI_SCORE, GLOBAL_HI_SCORE_NAME$

// Tracks the ID$ of a clicked UI Button
BUTTON_CLICK_ID$ = ""
Global BUTTON_CLICK_ID$

// Used for screen fade
ALPHA# = 0.0
FADE_COMPLETE = 0
Global ALPHA#, FADE_COMPLETE

// Display width and height
DW = 1920: DH = 1080
Global DW, DH

// Controls the scroll speed
MAP_SPEED# = 90
Global MAP_SPEED#

BG1 = 0: BG2 = 0: BG3 = 0: BG4 = 0      // Background Images
XB# = 0: XB1# = 0: XB2# = 0: XB3# = 0   // Background image offsets

LEVELX# = 0                             // X map scroll position
Global LEVELX#

// Player Variables
PX# = 128: PY# = DH / 2: PXT# = PX#: PYT# = PY#: PMS# = 8: SPEEDX# = 0: SPEEDY# = 0
PSPEED# = 0: PBSPEED# = 0               // Move and Boost Speed
WOX = 0: WOY = 0                        // Weapon offset
PLAYER_STATE = 0                        // Player status - 0 = live, 1 = Dead, 2 = Game over
PLAYER_HEALTH# = 0                      // Game over when reaches zero
PLAYER_HIT_POINTS# = 0                  // Player ship destroyed when zero
PLAYER_KILL_COUNT = 0                   // Number of kills
PLAYER_HIT = 0                          // Used to trigger the player hit animation
DAMAGE_AMOUNT# = 0                      // Amount of damage to apply when reducing the player health
BII# = 10                               // Base ship images index
PMF# = BII#                             // Current player ship image
PBBF# = BII# + 1                        // Player back burner frame/image number
PBBA = 0                                // Player Back burner 0 = Stop, 1 = Boost
PBXOFFON = 64                           // Player boost x offset on
PBXOFFOFF = 52                          // Player boost x offset off
PBBFS# = 20                             // Player back burner frame speed
PSF# = 80                               // Player shield frame/image number
PSR# = 0                                // Player shield rotation
HAS_SHIELD = 1                          // Is the player shielded, start of level or after player loses a life
SHIELD_TIMER# = 0                       // Used to remove the player shield after a period of time
SHIELD_TIME# = 3                        // The duration before the shield is removed (seconds)
SHOOT_TIMER# = 2                        // Used with shoot rate
SHOOT_RATE = 14                         // Controls the rate of fire for the player
PW = 1                                  // Player weapon type
PWBSX = 1000                            // Player weapon bullet speed X
PLAYER_SHIP = 1                         // Player Ship Level
PSFOFF = 14								// Player ship front offset
PSBOFF = -16							// Player ship back offset
PWATG = 0								// Player air to ground weapon - 0 = false, 1 = true
PLAYER_SCORE = 0						// The current player score
PLAYER_LEVEL_SCORE = 0					// The player level score

KILLS_REQUIRED = 0                      // Kills required to upgrade ship
KILLS_REQUIRED_HUD = 0                  // Used for the HUD display
LEVEL_COMPLETE = 0                      // Used to jump out of the main game loop
LEVEL_MUSIC = 0                         // Holds the audio file for the current level music
BOSS_MUSIC = 0							// Music for level boss
LEVEL_SELECT = 1						// Used in the select level UI
LEVEL_MAX = 1							// Used in the select level UI
Global LEVEL_MUSIC
Global BOSS_MUSIC
Global PX#, PY#

// Reusable Bob Pool
MAX_BOB_POOL = 1000
SMOKE_BOB_OFFSET = 1000
Dim BOB_POOL_STATUS(MAX_BOB_POOL)

// Smoke Particle Effect
MAX_SMOKE_SYSTEMS = 10
MAX_SMOKE_PARTICLES = 50

Dim SMOKE_SYSTEM_STATUS(MAX_SMOKE_SYSTEMS)
Dim SMOKE_SYSTEM_X#(MAX_SMOKE_SYSTEMS)
Dim SMOKE_SYSTEM_Y#(MAX_SMOKE_SYSTEMS)
Dim SMOKE_SYSTEM_VY#(MAX_SMOKE_SYSTEMS)
Dim SMOKE_SYSTEM_TRIGGER#(MAX_SMOKE_SYSTEMS)
Dim SMOKE_SYSTEM_AGE#(MAX_SMOKE_SYSTEMS)
Dim SMOKE_SYSTEM_PARTICLE_MAX_AGE#(MAX_SMOKE_SYSTEMS)
Dim SMOKE_SYSTEM_PARTICLE_MAX_LENGTH#(MAX_SMOKE_SYSTEMS)
Dim SMOKE_SYSTEM_PARTICLE_MIN_LENGTH#(MAX_SMOKE_SYSTEMS)

Dim SMOKE_PARTICLE_STATUS(MAX_SMOKE_SYSTEMS, MAX_SMOKE_PARTICLES)
Dim SMOKE_PARTICLE_BOB(MAX_SMOKE_SYSTEMS, MAX_SMOKE_PARTICLES)
Dim SMOKE_PARTICLE_AGE#(MAX_SMOKE_SYSTEMS, MAX_SMOKE_PARTICLES)
Dim SMOKE_PARTICLE_X#(MAX_SMOKE_SYSTEMS, MAX_SMOKE_PARTICLES)
Dim SMOKE_PARTICLE_Y#(MAX_SMOKE_SYSTEMS, MAX_SMOKE_PARTICLES)
Dim SMOKE_PARTICLE_IMAGE(MAX_SMOKE_SYSTEMS, MAX_SMOKE_PARTICLES)

Global SMOKE_SYSTEM_PARTICLE_MAX_LENGTH#()
Global MAX_SMOKE_SYSTEMS, MAX_SMOKE_PARTICLES, MAX_BOB_POOL, SMOKE_BOB_OFFSET, SMOKE_SYSTEM_PARTICLE_MIN_LENGTH#()
Global BOB_POOL_STATUS(), SMOKE_SYSTEM_STATUS(), SMOKE_SYSTEM_X#(), SMOKE_SYSTEM_Y#(), SMOKE_SYSTEM_VY#(), SMOKE_SYSTEM_TRIGGER#(), SMOKE_SYSTEM_AGE#(), SMOKE_SYSTEM_PARTICLE_MAX_AGE#()
Global SMOKE_PARTICLE_STATUS(), SMOKE_PARTICLE_BOB(), SMOKE_PARTICLE_AGE#(), SMOKE_PARTICLE_X#(), SMOKE_PARTICLE_Y#(), SMOKE_PARTICLE_IMAGE()

// Explosion Particle Effect
MAX_PARTICLE_SYSTEMS = 100
MAX_PARTICLES = 300

Dim PARTICLE_SYSTEM_STATUS(MAX_PARTICLE_SYSTEMS)
Dim PARTICLE_SYSTEM_X#(MAX_PARTICLE_SYSTEMS)
Dim PARTICLE_SYSTEM_Y#(MAX_PARTICLE_SYSTEMS)
Dim PARTICLE_SYSTEM_GRAVITY(MAX_PARTICLE_SYSTEMS)

Dim PARTICLE_SYSTEM_PARTICLE_STATUS(MAX_PARTICLE_SYSTEMS, MAX_PARTICLES)
Dim PARTICLE_SYSTEM_PARTICLE_X#(MAX_PARTICLE_SYSTEMS, MAX_PARTICLES)
Dim PARTICLE_SYSTEM_PARTICLE_Y#(MAX_PARTICLE_SYSTEMS, MAX_PARTICLES)
Dim PARTICLE_SYSTEM_PARTICLE_VX#(MAX_PARTICLE_SYSTEMS, MAX_PARTICLES)
Dim PARTICLE_SYSTEM_PARTICLE_VY#(MAX_PARTICLE_SYSTEMS, MAX_PARTICLES)
Dim PARTICLE_SYSTEM_PARTICLE_LIFE#(MAX_PARTICLE_SYSTEMS, MAX_PARTICLES)
Dim PARTICLE_SYSTEM_PARTICLE_COLOUR#(MAX_PARTICLE_SYSTEMS, MAX_PARTICLES)

Global MAX_PARTICLE_SYSTEMS, MAX_PARTICLES
Global PARTICLE_SYSTEM_STATUS(), PARTICLE_SYSTEM_X#(), PARTICLE_SYSTEM_Y#(), PARTICLE_SYSTEM_PARTICLE_STATUS(), PARTICLE_SYSTEM_PARTICLE_X#(), PARTICLE_SYSTEM_GRAVITY()
Global PARTICLE_SYSTEM_PARTICLE_Y#(), PARTICLE_SYSTEM_PARTICLE_VX#(), PARTICLE_SYSTEM_PARTICLE_VY#(), PARTICLE_SYSTEM_PARTICLE_LIFE#(), PARTICLE_SYSTEM_PARTICLE_COLOUR#()

// Bullet Variables
MAX_BULLETS = 50                        // Max player bullets
BWII = 200                              // Base image index for the shoot images
BWHP = 1                                // Bullet hit points
BWS = 1                                 // Bullet shoot audio sample
BWOX = 0                                // Bullet offset x
BWOY = 0                                // Bullet offset y

Dim BULLET_STATUS(MAX_BULLETS)          // 0 = Dead, 1 = Live, 2 = Exploding
Dim BULLETX#(MAX_BULLETS)               // Bullet X position
Dim BULLETY#(MAX_BULLETS)               // Bullet Y position
Dim BULLET_SPEEDX#(MAX_BULLETS)         // Bullet speed X
Dim BULLET_SPEEDY#(MAX_BULLETS)         // Bullet speed Y
Dim BULLET_FRAME(MAX_BULLETS)           // Current frame/image
Dim BULLET_START_FRAME(MAX_BULLETS)     // Start frame, bullet movement begins when the end frame is current
Dim BULLET_END_FRAME(MAX_BULLETS)       // The end animation frame
Dim BULLET_HIT_POINTS(MAX_BULLETS)      // Number of hit points to reduce when it hits an enemy
Dim BULLET_AGE#(MAX_BULLETS)      		// Age of the bullet
Dim BULLET_TYPE(MAX_BULLETS)      		// 0 = normal, 1 = air to ground

// Collectables
MAX_COLLECTS = 10
Dim COL_STATUS(MAX_COLLECTS)                // 0 = Dead, 1 = Live
Dim COL_X#(MAX_COLLECTS)                    // Map X Position
Dim COL_Y#(MAX_COLLECTS)                    // Map Y Pistion
Dim COL_TYPE(MAX_COLLECTS)                  // 1 = Shoot x, 2 = Hit Points, 3 Destroy All, 4 Shields, 5 = Health
Dim COL_IFRAME#(MAX_COLLECTS)               // Current frame/image
Dim COL_START_FRAME(MAX_COLLECTS)           // Start frame
Dim COL_END_FRAME(MAX_COLLECTS)             // End frame
Dim COL_FRAME_SPEED(MAX_COLLECTS)           // Frame speed
Dim COL_SAM_PLAY(MAX_COLLECTS)              // Collect Audio Sample

Global MAX_COLLECTS, COL_STATUS(), COL_X#(), COL_Y#(), COL_TYPE(), COL_IFRAME#(), COL_START_FRAME(), COL_END_FRAME(), COL_FRAME_SPEED(), COL_SAM_PLAY()

// Enemy Ships (Bobs 350 to 449) + 50 for back burner
MAX_ENEMY_SHIPS = 50
MAX_PATH_POINTS = 8
Dim ES_HIT_POINTS(MAX_ENEMY_SHIPS)          // Destroyed when reaches zero
Dim ES_STATUS(MAX_ENEMY_SHIPS)              // 0 = Dead, 1 = Live, 2 = Exploding
Dim ES_X#(MAX_ENEMY_SHIPS)                  // Map X Position
Dim ES_Y#(MAX_ENEMY_SHIPS)                  // Map Y Pistion
Dim ES_FRAME#(MAX_ENEMY_SHIPS)              // Current frame/image
Dim ES_AI_TYPE(MAX_ENEMY_SHIPS)             // 0 = Straight, 1 = Sinusoidal Wobble
Dim ES_HIT_SAM(MAX_ENEMY_SHIPS)             // Sample when hit by player bullet
Dim ES_SPEEDX#(MAX_ENEMY_SHIPS)             // X Speed
Dim ES_SPEEDY#(MAX_ENEMY_SHIPS)             // Y Speed
Dim ES_AI_OFFX#(MAX_ENEMY_SHIPS)            // X Offset applied by the AI
Dim ES_AI_OFFY#(MAX_ENEMY_SHIPS)            // Y Offset applied by the AI
Dim ES_AGE#(MAX_ENEMY_SHIPS)                // Age in number of frames, used in the AI
Dim ES_SHOOT_AI_TYPE(MAX_ENEMY_SHIPS)       // 0 = None, 1 = Random
Dim ES_BB_XOFF(MAX_ENEMY_SHIPS)             // Back burner X offset
Dim ES_BB_YOFF(MAX_ENEMY_SHIPS)             // Back burner Y offset
Dim ES_BB_FRAME#(MAX_ENEMY_SHIPS)           // Back burner current frame
Dim ES_BB_START_FRAME(MAX_ENEMY_SHIPS)      // Back burner start frame
Dim ES_BB_END_FRAME(MAX_ENEMY_SHIPS)        // Back burner end frame
Dim ES_WEAPON_TYPE(MAX_ENEMY_SHIPS)         // Weapon type
Dim ES_FIRE_TIME#(MAX_ENEMY_SHIPS)          // Used in the AI to trigger a shot
Dim ES_EXP_SIZE(MAX_ENEMY_SHIPS)            // Explosion size, see ADD_ES_EXPLOSION
Dim ES_EXP_COUNT(MAX_ENEMY_SHIPS)           // Number fo explosion to add
Dim ES_AI_PATH_POINTS_X#(MAX_ENEMY_SHIPS, MAX_PATH_POINTS + 1)
Dim ES_AI_PATH_POINTS_Y#(MAX_ENEMY_SHIPS, MAX_PATH_POINTS + 1)
Dim ES_AI_PATH_NODE_TIME#(MAX_ENEMY_SHIPS)  // Used in the AI to control move speed between paths
Dim ES_AI_SIZE(MAX_ENEMY_SHIPS)             // Used in the Sinusoidal Wobble AI type
Dim ES_HIT_FRAME#(MAX_ENEMY_SHIPS)          // Image when hit by player bullet
Dim ES_ISHIT#(MAX_ENEMY_SHIPS)              // Value used to show hit frame in draw routine
Dim ES_ISBOSS(MAX_ENEMY_SHIPS)              // Is this a boss ship 1 = yes, 0 = no
Dim ES_HAS_SMOKE(MAX_ENEMY_SHIPS)        	// 1 = yes 0 = no
Dim ES_SMOKE_INDEX(MAX_ENEMY_SHIPS, 5)      // Used to reference the smoke particle system
Dim ES_SMOKE_X_OFF(MAX_ENEMY_SHIPS, 5)      // X position offset for smoke system
Dim ES_SMOKE_Y_OFF(MAX_ENEMY_SHIPS, 5)      // Y position offset for smoke system
Dim ES_KILL_POINTS(MAX_ENEMY_SHIPS) 		// Original kill points
Dim ES_SCORE_POINTS(MAX_ENEMY_SHIPS) 		// Player points

Global MAX_ENEMY_SHIPS, ES_HIT_POINTS(), ES_STATUS(), ES_X#(), ES_Y#(), ES_FRAME#(), ES_AI_TYPE(), ES_SPEEDX#(), ES_SPEEDY#(), ES_AI_OFFX#(), ES_AI_OFFY#(), ES_AGE#(), ES_HIT_SAM()
Global ES_SHOOT_AI_TYPE(), ES_BB_XOFF(), ES_BB_YOFF(), ES_BB_FRAME#(), ES_BB_START_FRAME(), ES_BB_END_FRAME(), ES_WEAPON_TYPE(), ES_FIRE_TIME#(), ES_EXP_SIZE(), ES_EXP_COUNT()
Global ES_AI_PATH_POINTS_X#(), ES_AI_PATH_POINTS_Y#(), ES_AI_PATH_NODE_TIME#(), MAX_PATH_POINTS, ES_AI_SIZE(), ES_HIT_FRAME#(), ES_ISHIT#(), ES_ISBOSS()
Global ES_HAS_SMOKE(), ES_SMOKE_INDEX(), ES_SMOKE_X_OFF(), ES_SMOKE_Y_OFF(), ES_KILL_POINTS(), ES_SCORE_POINTS()

// Ground Enemies (Bobs 450 to 549)
MAX_GROUND_ENEMIES = 100
Dim GE_HIT_POINTS(MAX_GROUND_ENEMIES)       // Destroyed when reaches zero
Dim GE_TYPE(MAX_GROUND_ENEMIES)             // The type
Dim GE_STATUS(MAX_GROUND_ENEMIES)           // 0 = Dead, 1 = Live, 2 = Exploding
Dim GE_X#(MAX_GROUND_ENEMIES)               // Map X Position
Dim GE_Y#(MAX_GROUND_ENEMIES)               // Map Y Pistion
Dim GE_FRAME#(MAX_GROUND_ENEMIES)           // Current frame/image
Dim GE_START_FRAME#(MAX_GROUND_ENEMIES)     // Start frame/image
Dim GE_HIT_SAM(MAX_GROUND_ENEMIES)          // Sample when hit by player bullet
Dim GE_EX_SAM(MAX_GROUND_ENEMIES)           // Sample when exploding
Dim GE_FIRE_SAM(MAX_GROUND_ENEMIES)         // Sample when shooting
Dim GE_COLLECT_TYPE(MAX_GROUND_ENEMIES)     // Collectable to add when destroyed
Dim GE_HIT_FRAME(MAX_GROUND_ENEMIES)        // Image for when hit by player bullet
Dim GE_ISHIT#(MAX_GROUND_ENEMIES)           // Used to show the hit frame in the draw routine
Dim GE_HAS_SMOKE(MAX_GROUND_ENEMIES)        // 1 = yes 0 = no
Dim GE_SMOKE_INDEX(MAX_GROUND_ENEMIES)      // Used to reference the smoke particle system
Dim GE_SMOKE_X_OFF(MAX_GROUND_ENEMIES)      // X position offset for smoke system
Dim GE_SMOKE_Y_OFF(MAX_GROUND_ENEMIES)      // Y position offset for smoke system
Dim GE_ROTATE(MAX_GROUND_ENEMIES)           // Amount of rotation to apply when drawing the bob
Dim GE_SCORE_POINTS(MAX_ENEMY_SHIPS) 		// Player points

// Arrays used for scripting enemy behaviour
Dim GE_STEP(MAX_GROUND_ENEMIES)
Dim GE_STEPS(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP1#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP2#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP3#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP4#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP5#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP6#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP7#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP8#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP9#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP10#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP11#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP12#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP13#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP14#(MAX_GROUND_ENEMIES, 10)
Dim GE_STEP_PROP15#(MAX_GROUND_ENEMIES, 10)

// Arrays used for scripting enemy behaviour animations
Dim GE_ANIM(MAX_GROUND_ENEMIES)
Dim GE_ANIM_TYPE$(MAX_GROUND_ENEMIES, 5)
Dim GE_ANIM_PROP1#(MAX_GROUND_ENEMIES, 5)
Dim GE_ANIM_PROP2#(MAX_GROUND_ENEMIES, 5)
Dim GE_ANIM_PROP3#(MAX_GROUND_ENEMIES, 5)
Dim GE_ANIM_PROP4#(MAX_GROUND_ENEMIES, 5)
Dim GE_ANIM_PROP5#(MAX_GROUND_ENEMIES, 5)

Global MAX_GROUND_ENEMIES, GE_START_FRAME#(), GE_TYPE(), GE_HIT_POINTS(), GE_STATUS(), GE_X#(), GE_Y#(), GE_FRAME#(), GE_HIT_SAM(), GE_EX_SAM(), GE_FIRE_SAM(), GE_COLLECT_TYPE()
Global GE_STEP(), GE_STEPS(), GE_STEP_PROP1#(), GE_STEP_PROP2#(), GE_STEP_PROP3#(), GE_STEP_PROP4#(), GE_STEP_PROP5#(), GE_STEP_PROP6#(), GE_STEP_PROP7#()
Global GE_STEP_PROP8#(), GE_STEP_PROP9#(), GE_STEP_PROP10#(), GE_STEP_PROP11#(), GE_STEP_PROP12#(), GE_STEP_PROP13#(), GE_STEP_PROP14#(), GE_STEP_PROP15#()
Global GE_ANIM(), GE_ANIM_TYPE$(), GE_ANIM_PROP1#(), GE_ANIM_PROP2#(), GE_ANIM_PROP3#(), GE_ANIM_PROP4#(), GE_ANIM_PROP5#(), GE_HIT_FRAME(), GE_ISHIT#(), GE_SMOKE_INDEX(), GE_HAS_SMOKE()
Global GE_SMOKE_X_OFF(), GE_SMOKE_Y_OFF(), GE_ROTATE(), GE_SCORE_POINTS()

// Explosions & Ship Bullet impacts (Bobs 100 to 199 )
MAX_EP = 100
Dim EP_STATUS(MAX_EP)           			// 0 = Dead, 1 = Live
Dim EPX#(MAX_EP)
Dim EPY#(MAX_EP)
Dim EP_SPEED#(MAX_EP)
Dim EP_FRAME#(MAX_EP)
Dim EP_END_FRAME(MAX_EP)
Dim EP_ROTATE(MAX_EP)
Global MAX_EP, EP_STATUS(), EPX#(), EPY#(), EP_SPEED#(), EP_FRAME#(), EP_END_FRAME(), EP_ROTATE()

Dim EXPLOSION_ANIMATION_START(17)
Dim EXPLOSION_ANIMATION_END(17)
Global EXPLOSION_ANIMATION_START(), EXPLOSION_ANIMATION_END()
// Small
EXPLOSION_ANIMATION_START(0) = 88
EXPLOSION_ANIMATION_END(0) = 98
// Medium
EXPLOSION_ANIMATION_START(1) = 99
EXPLOSION_ANIMATION_END(1) = 109
// Large
EXPLOSION_ANIMATION_START(2) = 110
EXPLOSION_ANIMATION_END(2) = 120
// Tank
EXPLOSION_ANIMATION_START(3) = 776
EXPLOSION_ANIMATION_END(3) = 787
// Really Big
EXPLOSION_ANIMATION_START(4) = 797
EXPLOSION_ANIMATION_END(4) = 807
// Enemy Ship Shot 1
EXPLOSION_ANIMATION_START(5) = 960
EXPLOSION_ANIMATION_END(5) = 964
// Enemy Ship Shot 2
EXPLOSION_ANIMATION_START(6) = 977
EXPLOSION_ANIMATION_END(6) = 981
// Enemy Ship Shot 3
EXPLOSION_ANIMATION_START(7) = 991
EXPLOSION_ANIMATION_END(7) = 994
// Boss Ship Shot 1
EXPLOSION_ANIMATION_START(8) = 1007
EXPLOSION_ANIMATION_END(8) = 1016
// Boss Ship 1 Explosion 1
EXPLOSION_ANIMATION_START(9) = 1018
EXPLOSION_ANIMATION_END(9) = 1032
// Boss Ship 2 Explosion 2
EXPLOSION_ANIMATION_START(10) = 1033
EXPLOSION_ANIMATION_END(10) = 1042
// Boss Ship Shot 2
EXPLOSION_ANIMATION_START(11) = 1055
EXPLOSION_ANIMATION_END(11) = 1061
// Enemy Ship Shot 4
EXPLOSION_ANIMATION_START(12) = 1074
EXPLOSION_ANIMATION_END(12) = 1081
// Enemy Ship Shot 5
EXPLOSION_ANIMATION_START(13) = 1094
EXPLOSION_ANIMATION_END(13) = 1101
// Enemy Ship 5 Explosion
EXPLOSION_ANIMATION_START(14) = 1102
EXPLOSION_ANIMATION_END(14) = 1112
// Enemy Ship 5 Explosion
EXPLOSION_ANIMATION_START(15) = 1125
EXPLOSION_ANIMATION_END(15) = 1140
// Rocket
EXPLOSION_ANIMATION_START(16) = 729
EXPLOSION_ANIMATION_END(16) = 739

// Enemy Bullets (Bobs 200 to 299 )
MAX_EB = 100
Dim EB_STATUS(MAX_EB)
Dim EBX#(MAX_EB)
Dim EBY#(MAX_EB)
Dim EB_SPEEDX#(MAX_EB)
Dim EB_SPEEDY#(MAX_EB)
Dim EB_FRAME#(MAX_EB)
Dim EB_FRAME_SPEED#(MAX_EB)
Dim EB_END_FRAME(MAX_EB)
Dim EB_START_FRAME(MAX_EB)
Dim EB_HIT_DAMAGE#(MAX_EB)
Dim EB_EX_TYPE(MAX_EB)
Dim EB_EX_SPEED(MAX_EB)
Dim EB_LIVE_TIME(MAX_EB)
Dim EB_MUZZEL_START(MAX_EB)
Dim EB_MUZZEL_END(MAX_EB)
Dim EB_MUZZEL_FINISHED(MAX_EB)
Dim EB_FIRE_SAM(MAX_EB)
Dim EB_ROTATE(MAX_EB)

Global MAX_EB, EB_STATUS(), EBX#(), EBY#(), EB_SPEEDX#(), EB_SPEEDY#(), EB_FRAME#(), EB_END_FRAME(), EB_FRAME_SPEED#(), EB_END_FRAME(), EB_ROTATE()
Global EB_START_FRAME(), EB_HIT_DAMAGE#(), EB_EX_TYPE(), EB_EX_SPEED(), EB_LIVE_TIME(), EB_MUZZEL_START(), EB_MUZZEL_END(), EB_MUZZEL_FINISHED(), EB_FIRE_SAM()

SAM_PLAYER_HIT_TERRAIN = 2
SAM_PLAYER_HIT_ENEMY = 3
SAM_PLAYER_SHIELD_DOWN = 4
SAM_GE_ROCKET_FIRE = 5
SAM_GE_TANK_FIRE = 6
SAM_GE_LASER_FIRE = 7
SAM_GE_PLASMA_FIRE = 8
SAM_GE_ROCKET_OPEN = 9
SAM_GE_LASER_START = 10
SAM_GE_TANK_START = 11
SAM_GE_LIZARD_ATTACK = 12
SAM_PLAYER_SHIELD_UP = 13
SAM_PLAYER_TAKE_DAMAGE = 14
SAM_PLAYER_SHIP_DESTROYED = 15
SAM_SHIP_FLYBY = 20
SAM_PLAYER_HIT_BOSS = 32
SAM_BOSS_SHIP_DESTROYED = 33
SAM_PLAYER_AIR_TO_GROUND = 78

Global SAM_PLAYER_HIT_ENEMY, SAM_PLAYER_HIT_TERRAIN, SAM_PLAYER_SHIELD_DOWN, SAM_GE_ROCKET_FIRE, SAM_GE_TANK_FIRE, SAM_GE_LASER_FIRE, SAM_GE_PLASMA_FIRE
Global SAM_GE_ROCKET_OPEN, SAM_GE_LASER_START, SAM_GE_TANK_START, SAM_GE_LIZARD_ATTACK, SAM_PLAYER_SHIELD_UP, SAM_PLAYER_TAKE_DAMAGE, SAM_PLAYER_SHIP_DESTROYED, SAM_SHIP_FLYBY
Global SAM_PLAYER_HIT_BOSS, SAM_BOSS_SHIP_DESTROYED

// Ground Enemies (Bobs 450 to 549)
For i = 0 to MAX_GROUND_ENEMIES - 1
    GE_STATUS(i) = 0
Next i

// Player Bullets (Bobs 50 to 99)
For i = 0 to MAX_BULLETS - 1
    BULLET_STATUS(i) = 0
Next i

// Explosions (100 to 199)
For i = 0 to MAX_EP - 1
    EP_STATUS(i) = 0
Next i

// Enemy bullets (200 to 299)
For i = 0 to MAX_EB - 1
    EB_STATUS(i) = 0
Next i

// Collectables (Bobs 300 to 309)
For i = 0 to MAX_COLLECTS - 1
    COL_STATUS(i) = 0
Next i

// Enemy Ships (Bobs 350 to 399, 400 to 449 back burner)
For i = 0 to MAX_ENEMY_SHIPS - 1
    ES_STATUS(i) = 0
Next i

// Explosions
For i = 88 to 120
    Hot Spot i, $11
Next i

// Player images
For i = 10 to 41
    Hot Spot i, $11
Next i
For i = 300 to 491
    Hot Spot i, $11
Next i

// Collectables
For i = 900 to 926
    Hot Spot i, $11
Next i

// Lizard, Rocket, Plasma Cannon, Tank images, Meteor, Bomb, Laser Canon, Kamikaze, + Hits
For i = 710 to 848
    Hot Spot i, $11
Next i

// Bullets
For i = 200 to 244
    Hot Spot i, $11
Next i

// Shield
For i = 80 to 87
    Hot Spot i, $11
Next i

// Enemy Ships
For i = 950 to 1171
    Hot Spot i, $11
Next i

// UI
For i = 1501 to 1508
    Hot Spot i, $11
Next i
Hot Spot 2052, $11
Hot Spot 1543, $11

For i = 1520 to 1541
    Hot Spot i, $11
Next i

// Smoke
For i = 1 to 4
    Hot Spot i, $11
Next i

// Game loop variables
CURRENT_TIME# = Timer
LAST_TIME# = 0
DELTA_TIME# = 0
Global DELTA_TIME#
MENU_MUSIC = 251
MENU_CLICK = 250

// DEMO INTRO
Screen Open 0, DW, DH, 256, Lowres

{ if (Application.renderingCallBack) { Application.renderingCallBack();	} }

Screen 0: Cls 0: Curs Off
Set Transparent 0
Screen Display 0, 0, 0, DW, DH

Gosub DISPLAY_INTRO_SCREEN

// Add an iFrame so we can play a YouTube video playlist
Dom Element "iframe", "video"
Dom Add "video", "body"
Dom Attribute "video", "src", "https://www.youtube.com/embed/videoseries?list=PLHp6woYwQKxXCXEyRlZfYXYIbA2YVe9rT&autoplay=1&mute=1&loop=1"
Dom Attribute "video", "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"

{
	self = this;

	window.addEventListener("resize", function(){
		setupVideo();
	});

	function setupVideo(){
		var video = document.getElementById('video');

		if (video) {
			var canvas = document.getElementById('AOZCanvas');
			var aozWidth = canvas.getBoundingClientRect().width;
			var aozHeight = canvas.getBoundingClientRect().height;

			var wFits = aozWidth / self.root.vars.DW;
			var hFits = aozHeight / self.root.vars.DH;
			var minFits = wFits > hFits ? hFits : wFits;

			var width = self.root.vars.DW * minFits;
			var height = self.root.vars.DH * minFits;

			var x = ((self.root.vars.DW / 2) - (540 / 2)) * (width / self.root.vars.DW) + (aozWidth - width) / 2;
			var y = ((self.root.vars.DH / 2) - 260)  * (height / this.self.vars.DH) + (aozHeight - height) / 2;
			var videoWidth = 540 * minFits;
			var videoHeight = 304 * minFits;

			video.setAttribute('style', 'border: 2px solid #ADFEFD; height:' + parseInt(videoHeight) + 'px; width:' + parseInt(videoWidth) + 'px; top: ' + parseInt(y) + 'px; ' + 'left: ' + parseInt(x) + 'px; position: absolute; z-index: 6000; display: block;' );
		}
	}

	setupVideo();
}

Gosub INIT_GAME
Gosub DISPLAY_INTRO_SCREEN

Repeat Until Inkey$ <>"" Or Fire(0)

// Remove the video element
{
	var video = document.getElementById('video');
	video.remove();
}

Cls 0: Wait 1: Clear Key
Goto GAME_MENU

DISPLAY_INTRO_SCREEN:
	Paste Bob 0, 0, 1500
	Paste Bob DW / 2, DH / 2, 1539
	Ink 5
	Paste Bob DW / 2, 150, 1540
	Set Font "baloo",25
	Ink 1
	Text DW / 2,460,"Loading....","#center"
	Text DW / 2,620,"Developed By Phil Bell","#center"
	Text DW / 2,660,"Music By Mikolaj Holowko","#center"
	Text DW / 2,720,"Use arrow keys or Joystick/Gamepad","#center"
	Text DW / 2,760,"[SPACE] to fire - [ESC] to pause game","#center"

	Ink 5: Set Font "baloo",30

	IF AUDIO_LOADED = 1
		Text DW / 2, 810,"Press any key to start","#center"
	Else
		Text DW / 2, 810,"Loading game assets...","#center"
	End If
Return

LOAD_ASSETS:

	Screen 0: total = 67: pos = 0

	// Load audio files into custom JS library
	{
		Application.loadCustomAudio();
	}

	// Wait for audio to be loaded
	Do
		{
			this.vars.pos = Application.getLoadedCount();
		}

		UPDATE_LOAD_PROGRESS[pos, total]

		If AUDIO_LOADED = 1
			Exit
		End If

		Wait Vbl
	Loop
Return

MAIN_GAME_LOOP:
    Do
        CURRENT_TIME# = Timer
        DELTA_TIME# = Min(1, CURRENT_TIME# - LAST_TIME#)

		AnimFadeIn[1]

        Gosub UPDATE_GAME_OBJECTS
        Gosub DRAW_GAME_OBJECTS
        Gosub CHECK_PLAYER_HEALTH

        If LEVEL_COMPLETE = 1
            Goto DO_LEVEL_COMPLETE
        End If

        If PLAYER_STATE = 2
            Goto GAME_OVER
        End If

        If Key State(27)
            Goto DO_GAME_PAUSED
        End If

        LAST_TIME# = CURRENT_TIME#
        Wait Vbl
    Loop

UPDATE_GAME_OBJECTS:
    Gosub UPDATE_MAP
    Gosub UPDATE_PLAYER
    Gosub UPDATE_PLAYER_BULLETS
    Gosub UPDATE_GROUND_ENEMIES
    Gosub UPDATE_ENEMY_SHIPS
    Gosub UPDATE_ENEMY_BULLETS
    Gosub UPDATE_COLLECTABLES
	Gosub UPDATE_PARTICLE_SYSTEM
	Gosub UPDATE_SMOKE_SYSTEM
Return

DRAW_GAME_OBJECTS:
    Gosub DRAW_MAP
    Gosub DRAW_PLAYER
    Gosub DRAW_PLAYER_BULLETS
    Gosub DRAW_GROUND_ENEMIES
    Gosub DRAW_ENEMY_SHIPS
    Gosub DRAW_ENEMY_BULLETS
    Gosub DRAW_EXPLOSIONS
    Gosub DRAW_COLLECTABLES
	Gosub DRAW_PARTICLE_SYSTEM
	Gosub DRAW_SMOKE_SYSTEM
Return

DO_GAME_PAUSED:
    Screen 3
	Reserve Zone 2
    Set Zone 1, (DW / 2) - 20, (DH / 2) + 70 to (DW / 2) + 40, (DH / 2) + 140
    Set Zone 2, (DW / 2) - 30, (DH / 2) + 160 to (DW / 2) + 60, (DH / 2) + 180
    Cls 0
    Paste Bob DW / 2, DH / 2, 1534
    Screen to front 3
    Screen Show 3

    menu_trigger = 0

	// Show the player stats
	Set Font "baloo", 16
	Ink 1: text (DW / 2) - 62, (DH / 2) - 115,"Player Health"
	For ph = 0 to Int(PLAYER_HEALTH# * 2)
		Paste Bob (DW / 2) - 39 + ph, (DH / 2) - 107, 5
	Next ph

	text (DW / 2) - 62, (DH / 2) - 83,"Ship Health"
    For ph = 0 to Int(PLAYER_HIT_POINTS# * 2)
        Paste Bob (DW / 2) - 39 + ph, (DH / 2) - 78, 6
    Next ph

	text (DW / 2) - 62, (DH / 2) - 55,"Player XP"
	For ph = 0 to (Min(93, KILLS_REQUIRED_HUD) * 2)
		Paste Bob (DW / 2) - 39 + ph, (DH / 2) - 49, 7
	Next ph

	Set Font "baloo", 18
	Ink 5: Text (DW / 2), (DH / 2) - 17,"Destroy enemies to increase your XP", "#center"
	Text (DW / 2) + 15, (DH / 2) + 171,"Quit Game", "#center"
    Do
        CURRENT_TIME# = Timer
        DELTA_TIME# = Min(1, CURRENT_TIME# - LAST_TIME#)

		Gosub UPDATE_MOUSE

		// Show player ship
		Paste Bob DW / 2, DH / 2 + 30, BII#
		// Animate the back burner
		Add PBBF#, PBBFS# * DELTA_TIME#
        If Int(PBBF#) >= BII# + 5: PBBF# = BII# + 4: PBBFS# = -20: End If
        If Int(PBBF#) <= BII#: PBBF# = BII# + 1: PBBFS# = 20: End If
        Bob 2, DW / 2 - PBXOFFOFF, DH / 2 + 30, Int(PBBF#)

        If Mouse Click
            If Mouse Zone = 1
                menu_trigger = 1
            else
                If Mouse Zone = 2
					Bob Off 2
                    PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
                    Wait 0.5
					STOP_AUDIO_SAMPE[LEVEL_MUSIC]
					STOP_AUDIO_SAMPE[BOSS_MUSIC]
                    Goto GAME_MENU
                End If
            End If
        End If

        If Key State(32) or Fire(0)
            menu_trigger = 1
        End If

        If menu_trigger = 1
			Bob Off 2
            PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
            Screen Hide 3
            Screen 1
            Goto MAIN_GAME_LOOP
        End If

        LAST_TIME# = CURRENT_TIME#
        Wait Vbl
    Loop

GAME_OVER:
    Gosub CLEAR_GAME_OBJECTS
    MAP_SPEED# = 0

    Screen 3
    Reserve Zone 1
    Set Zone 1, (DW / 2) - 30, (DH / 2) + 80 to (DW / 2) + 30, (DH / 2) + 120
    Cls 0
    Paste Bob DW / 2, DH / 2, 1536
    Paste Bob DW / 2, (DH / 2) + 100, 1504

    Set Font "baloo", 35
    Ink 1: text DW / 2, 550,"Game Over","#center"
    Screen to front 3
    Screen Show 3

    menu_trigger = 0
    menutimer = Timer
	change_music_trigger = 0

	Gosub POST_NEW_SCORE

    Do
        CURRENT_TIME# = Timer
        DELTA_TIME# = Min(1, CURRENT_TIME# - LAST_TIME#)

        Screen 1
        Gosub UPDATE_GAME_OBJECTS
        Gosub DRAW_GAME_OBJECTS

        Screen 3
		Gosub UPDATE_MOUSE
        If Mouse Click
            If Mouse Zone = 1
                menu_trigger = 1
            End If
        End If

        // Enable the space bar to continue after 2 seconds
        If Timer - menutimer >= 2
            If Key State(32) or Fire(0)
                menu_trigger = 1
            End If
        End If

		// restart level music
		If change_music_trigger = 0
			If Timer - menutimer >= 3
				STOP_AUDIO_SAMPE[LEVEL_MUSIC]
				STOP_AUDIO_SAMPE[BOSS_MUSIC]
				PLAY_AUDIO_SAMPLE[LEVEL_MUSIC, true, 1]
				change_music_trigger = 1
	        End If
		End If

        If menu_trigger = 1
            PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
            Wait 0.5
			STOP_AUDIO_SAMPE[LEVEL_MUSIC]
            Goto GAME_MENU
        End If

        LAST_TIME# = CURRENT_TIME#
        Wait Vbl
    Loop

SHOW_UPGRADE:
    Screen 3
    Reserve Zone 1
    Set Zone 1, (DW / 2) - 30, (DH / 2) + 80 to (DW / 2) + 30, (DH / 2) + 120
    Cls 0
    Paste Bob DW / 2, DH / 2, 1535
    Paste Bob DW / 2, DH / 2 + 100, 1504
    Screen to front 3
    Screen Show 3

    Paste Bob DW / 2, DH / 2 + 30, BII#
    Set Font "baloo",28
    Ink 1: text DW / 2, 470,"Ship Upgrade","#center"
    Set Font "baloo",20
    Ink 5: text (DW / 2) + 20, 510,"Your New Ship","#center"

    PLAY_AUDIO_SAMPLE[SAM_PLAYER_SHIELD_UP, false, 1]
	Gosub UPDATE_HUD
    menu_trigger = 0
    menutimer = Timer

	Gosub SAVE_MAX_PLAYER_SHIP_DATA

    Do
        CURRENT_TIME# = Timer
        DELTA_TIME# = Min(1, CURRENT_TIME# - LAST_TIME#)

        Add PBBF#, PBBFS# * DELTA_TIME#
        // Bounce the stop back burner image frames
        If Int(PBBF#) >= BII# + 5: PBBF# = BII# + 4: PBBFS# = -20: End If
        If Int(PBBF#) <= BII#: PBBF# = BII# + 1: PBBFS# = 20: End If
        Bob 2, DW / 2 - PBXOFFOFF, DH / 2 + 30, Int(PBBF#)

		Gosub UPDATE_MOUSE
        If Mouse Click
            If Mouse Zone = 1
                menu_trigger = 1
            End If
        End If

        // Enable the space bar to continue after 2 seconds
        If Timer - menutimer >= 2
            If Key State(32) or Fire(0)
                menu_trigger = 1
            End If
        End If

        If menu_trigger = 1
            Bob Off 2
            PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
            Screen Hide 3
            Screen 1
            // Shield the player for 3 seconds
            HAS_SHIELD = 1
            SHIELD_TIMER# = 0
            SHIELD_TIME# = 3
            return
        End If

        LAST_TIME# = CURRENT_TIME#
        Wait Vbl
    Loop

GAME_MENU_ADD_SHIP:
    If RND(100) > 98
        estype = RND(6)
        If estype = 0
            ADD_SHIP_ENEMY[158, 31, RND(16)]
        End If
        If estype = 1
            ADD_SHIP_ENEMY[161, 31, RND(16)]
        End If
        If estype = 2
            ADD_SHIP_ENEMY[164, 31, RND(16)]
        End If
        If estype = 3
            ADD_SHIP_ENEMY[172, 31, RND(16)]
        End If
        If estype = 4
            ADD_SHIP_ENEMY[175, 31, RND(16)]
        End If
        If estype = 5
            ADD_SHIP_ENEMY[176, 31, RND(16)]
        End If
        If estype = 6
            ADD_SHIP_ENEMY[173, 31, RND(16)]
        End If
    End If
Return

GAME_MENU:
    // Play menu music
	PLAY_AUDIO_SAMPLE[MENU_MUSIC, true, 1]

    LEVELX# = 0
    XB# = 0: XB1# = 0: XB2# = 0
    Gosub CLEAR_GAME_OBJECTS

GAME_MENU_FROM_INPUT:

	LEVEL = 1
	SELECT_LEVEL_TRIGGER = 0
    Screen Hide 1: Screen Hide 2: Screen Hide 4:
	Screen Show 0: Screen 3: Cls 0
    Reserve Zone 7
	Reset Zone
	Screen Show 3

SELECT_LEVEL_UPDATE:
	Screen 3: Cls 0

	// Load the top score from leaderboard
	LEADERBOARD_LOADED = false
	Leaderboard Load leaderboardName$="TopScore", onLoaded$="ON_TOPSCORE_LOADED"

	Paste Bob 0, 0, 1499
	Paste Bob 500, DH / 2, 1543
    Paste Bob DW / 2 - 20, 340, 1502
	Paste Bob DW / 2, 100, 1540
    Paste Bob 500, (DH / 2) + 150, 1505
	Paste Bob 1400, (DH / 2), 1539

	Set Zone 5, 460, (DH / 2) + 110 to 535, (DH / 2) + 185
    Set Font "baloo",27
	Ink 5: Text 490, 420,"Welcome " + Player Name$(),"#center"
	Set Font "baloo",16
	Text 395, 695,"Login","#center"
	Set Zone 6, 350, 670 to 440, 700

	If Player IsGuest() = true
		Text 605, 695,"Register","#center"
	Else
		Text 605, 695,"Account","#center"
	End If
	Set Zone 7, 560, 670 to 650, 700

    menu_trigger = 0

	Set Zone 1, 325, 575 to 375, 625

	If LEVEL_SELECT = 1
		Paste Bob 350, 600, 1541
	Else
		Paste Bob 350, 600, 1507
	End If
	Paste Bob 350, 600, 1520

	If MAX_LEVEL < 2
		Paste Bob 450, 600, 1508
		Paste Bob 450, 600, 1526
	Else
		Set Zone 2, 425, 575 to 475, 625
		If LEVEL_SELECT = 2
			Paste Bob 450, 600, 1541
		Else
			Paste Bob 450, 600, 1507
		End If
		Paste Bob 450, 600, 1521
	End If

	If MAX_LEVEL < 3
		Paste Bob 550, 600, 1508
		Paste Bob 550, 600, 1527
	Else
		Set Zone 3, 525, 575 to 575, 625
		If LEVEL_SELECT = 3
			Paste Bob 550, 600, 1541
		Else
			Paste Bob 550, 600, 1507
		End if
		Paste Bob 550, 600, 1522
	End If

	If MAX_LEVEL < 4
		Paste Bob 650, 600, 1508
		Paste Bob 650, 600, 1528
	Else
		Set Zone 4, 625, 575 to 675, 625
		If LEVEL_SELECT = 4
			Paste Bob 650, 600, 1541
		Else
			Paste Bob 650, 600, 1507
		End If
		Paste Bob 650, 600, 1523
	End If

    Do
        CURRENT_TIME# = Timer
        DELTA_TIME# = Min(1, CURRENT_TIME# - LAST_TIME#)

		Gosub UPDATE_MOUSE

		JFIRE = False: JYLEFT = False: JYRIGHT = False

		JFIRE = Fire(0)
		JYLEFT = JLeft(0)
		JYRIGHT = JRight(0)

        Screen 0
        Add XB#, -10 * DELTA_TIME#
        Add XB1#, -15 * DELTA_TIME#
        Add XB2#, -25 * DELTA_TIME#

        // Reset the x position when end of screen is reached
        If ABS(XB#) >= DW: XB# = 0: End If
        If ABS(XB1#) >= DW: XB1# = 0: End If
        If ABS(XB2#) >= DW: XB2# = 0: End If

        // Draw background images
        Paste Bob XB#, 0, 1497
        Paste Bob XB# + DW, 0, 1497
        Paste Bob XB1#, 0, 1496
        Paste Bob XB1# + DW, 0, 1496
        Paste Bob XB2#, 0, 1495
        Paste Bob XB2# + DW, 0, 1495

        Gosub GAME_MENU_ADD_SHIP
        Gosub UPDATE_ENEMY_SHIPS
        Gosub DRAW_ENEMY_SHIPS

        Screen 3

		If LEADERBOARD_LOADED = true
			LEADERBOARD_LOADED = false
			Set Font "baloo",27
			Ink 1: text 490, 480,"Top Player : " + GLOBAL_HI_SCORE_NAME$,"#center"
			DisplayValue[400, 485, 6, GLOBAL_HI_SCORE, 1]

			// Load the selected level leader board
			Set Font "baloo", 30
			Leaderboard Load leaderboardName$="Level" + Str$(LEVEL_SELECT), onLoaded$="ON_LEADERBOARD_LOADED"
		End If

		// Left
		If SELECT_LEVEL_TRIGGER = 0 and LEVEL_SELECT > 1 and (Key State(37) Or JYLEFT or Key State(65))
			SELECT_LEVEL_TRIGGER = 1
			Add LEVEL_SELECT, -1
			PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
			Goto SELECT_LEVEL_UPDATE
		End If

		// Right
		If SELECT_LEVEL_TRIGGER = 0 and LEVEL_SELECT < MAX_LEVEL and (Key State(39) Or JYRIGHT or Key State(68))
			SELECT_LEVEL_TRIGGER = 1
			Add LEVEL_SELECT, 1
			PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
			Goto SELECT_LEVEL_UPDATE
		End If

		If Key State(32) or JFIRE = True
			  menu_trigger = 1
		End If

		// Reset trigger when no input
		If Key State(68) = False and Key State(65) = False and Key State(37) = False and Key State(39) = False and JYLEFT = False and JYRIGHT = False
			SELECT_LEVEL_TRIGGER = 0
		End If

		If Mouse Click
            If Mouse Zone >= 1 And Mouse Zone <= 4
				LEVEL_SELECT = Mouse Zone
				PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
				Goto SELECT_LEVEL_UPDATE
            End If

			// Start Game
			If Mouse Zone = 5
				menu_trigger = 1
			End If

			// Login
			If Mouse Zone = 6
				PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
				Goto DO_LOGIN
			End If

			// Register / Rename
			If Mouse Zone = 7
				PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
				If Player IsGuest() = false
					Goto DO_RENAME
				Else
					Goto DO_REGISTER
				End If
			End If
        End If

		If menu_trigger = 1
			LEVEL = LEVEL_SELECT
			PLAYER_SCORE = 0
			STOP_AUDIO_SAMPE[MENU_MUSIC]
			PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
			Wait 0.2

			If LEVEL = 1
				PLAYER_SHIP = 1
			Else
				If LEVEL = 2
					PLAYER_SHIP = Min(2, MAX_PLAYER_SHIP)    // Max Ship 2 if unlocked
				else
					If LEVEL = 3
						PLAYER_SHIP = Min(3, MAX_PLAYER_SHIP)    // Max Ship 3 if unlocked
					Else
						If LEVEL = 4
							PLAYER_SHIP = Min(4, MAX_PLAYER_SHIP)    // Max Ship 4 if unlocked
						End If
					End If
				End If
			End If

			Goto START_GAME
		End If

        LAST_TIME# = CURRENT_TIME#
        Wait Vbl
    Loop

Procedure ON_TOPSCORE_LOADED[COUNT]
	// Fired when the "TopScore" leaderboard has been loaded
	GLOBAL_HI_SCORE_NAME$ = Leaderboard$(itemIndex = 0, itemName$="playerName")
	GLOBAL_HI_SCORE = Val(Leaderboard$(itemIndex = 0, itemName$="value"))
	LEADERBOARD_LOADED = true
End Proc

Procedure ON_LEADERBOARD_LOADED[COUNT]
	// Fired when the selected level leaderboard has been loaded
	For x = 0 to 9

		If x < COUNT
			LBNAME$ = Leaderboard$(itemIndex = x, itemName$="playerName")
			LBSCORE$ = Leaderboard$(itemIndex = x, itemName$="value")
			LBID$ = Leaderboard$(itemIndex = x, itemName$="id")

			// Highlight the current player score
			If Player Id$() = LBID$
				Ink 5
				DisplayValue[1520, 260 + x * 53, 6, Val(LBSCORE$), 1]
			Else
				Ink 1
				DisplayValue[1520, 260 + x * 53, 6, Val(LBSCORE$), 0]
			End If

			Text 1150, 310 + x * 53, LBNAME$
			Text 1100, 310 + x * 53, Str$(x + 1)
		Else
			Text 1150, 310 + x * 53, ". . . . . . . . . . . . . . . . ."
			Text 1100, 310 + x * 53, Str$(x + 1)
			DisplayValue[1520, 260 + x * 53, 6, 0, 0]
		End If
	Next x
End Proc

DO_LEVEL_COMPLETE:

    Gosub KILL_ALL_ENEMIES
    PLAYER_KILL_COUNT = 0

    PXT# = 1700
    PYT# = DH / 2
    PMS# = 1

    Screen 3
    Reserve Zone 1
    Set Zone 1, (DW / 2) - 30, (DH / 2) + 120 to (DW / 2) + 30, (DH / 2) + 180
    Cls 0
    Paste Bob DW / 2, DH / 2, 1501
    Paste Bob DW / 2, (DH / 2) + 150, 1505

    Set Font "baloo",40
    Ink 1: text DW / 2, 500,"VICTORY !!","#center"
    Ink 1: text DW / 2, 560,"WELL DONE","#center"
    Set Font "baloo",35
    Ink 5:text DW / 2, 620,"Continue...","#center"

    Screen to front 3
    Screen Show 3

	change_music_trigger = 0
    menu_trigger = 0
    menutimer = Timer

    Do
        CURRENT_TIME# = Timer
        DELTA_TIME# = Min(1, CURRENT_TIME# - LAST_TIME#)

        Screen 1
        Gosub UPDATE_GAME_OBJECTS
        Gosub DRAW_GAME_OBJECTS

        Screen 3
		Gosub UPDATE_MOUSE
        If Mouse Click
            If Mouse Zone = 1
                menu_trigger = 1
            End If
        End If

        //Enable the space bar to continue after 2 seconds
        If Timer - menutimer >= 2
            If Key State(32) or Fire(0)
                menu_trigger = 1
            End If
        End If

		// stop boss music and play the level music
		If change_music_trigger = 0
			If Timer - menutimer >= 3
				STOP_AUDIO_SAMPE[BOSS_MUSIC]
				PLAY_AUDIO_SAMPLE[LEVEL_MUSIC, true, 1]
				change_music_trigger = 1
	        End If
		End If

        If menu_trigger = 1
			PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
			Gosub POST_NEW_SCORE
            Wait 0.5
			STOP_AUDIO_SAMPE[LEVEL_MUSIC]

            menutimer = Timer

			// Reset map level position
		    LEVELX# = 0

			// Next Level
		    If LEVEL < 4
				Inc LEVEL
				If LEVEL > MAX_LEVEL
					MAX_LEVEL = LEVEL
					Gosub SAVE_MAX_LEVEL_DATA
				End If
	            Goto START_GAME
			Else
				Goto GAME_MENU
			End If

        End If

        LAST_TIME# = CURRENT_TIME#
        Wait Vbl
    Loop

INIT_GAME:
    // Game Screen
    Screen Open 1, DW, DH, 256, Lowres
    Curs Off
    Set Transparent 0
    Screen Hide 1

    // HUD screen
    Screen Open 2, 211, 90, 32, Lowres
    Curs Off
    Set Transparent 0
    Screen Hide 2

    // UI
    Screen Open 3, DW, DH, 256, Lowres
    Curs Off
    Set Transparent 0
    Screen Hide 3

	// Player score HUD screen
    Screen Open 4, 250, 140, 32, Lowres
	Screen Display 4, 1650, 0, 250, 140
    Curs Off
    Set Transparent 0
    Screen Hide 4

	// Login/Register
    Screen Open 5, DW, DH, 32, Lowres
    Curs Off
	Set Transparent 0
    Screen Hide 5

	// Screen for fade effect
	Screen Open 20, DW, DH, 32, Lowres
	Screen 20: Curs Off: Flash Off
	Cls 0: Set Transparent 0
	Screen To Front 20
	Screen Hide 20

    // Add static hud elements to screen 2
    Screen 2
    Paste Bob 0, 0, 700
    Paste Bob 10, 9, 701
    Paste Bob 90, 16, 702
    Paste Bob 90, 30, 705
    Paste Bob 90, 44, 708
    Paste Bob 102, 42, 709

    Gosub LOAD_ASSETS
    Gosub CLEAR_GAME_OBJECTS
Return

CLEAR_GAME_OBJECTS:
    For i = 0 to MAX_GROUND_ENEMIES - 1
        GE_STATUS(i) = 0
        Bob Off i + 450
    Next i

    For i = 0 to MAX_ENEMY_SHIPS - 1
        ES_STATUS(i) = 0
        Bob Off i + 350
        Bob Off i + 400
    Next i

    For i = 0 to MAX_EB - 1
        EB_STATUS(i) = 0
        Bob Off i + 200
    Next i

    For i = 0 to MAX_EP - 1
        EP_STATUS(i) = 0
        Bob Off i + 100
    Next i

    For i = 0 to MAX_COLLECTS - 1
        COL_STATUS(i) = 0
        Bob Off i + 300
    Next i

    For i = 0 to MAX_BULLETS - 1
        BULLET_STATUS(i) = 0
        Bob Off i + 50
    Next i

	For i = 0 to MAX_SMOKE_SYSTEMS - 1
		SMOKE_SYSTEM_STATUS(i) = 0
		For p = 0 to MAX_SMOKE_PARTICLES - 1
			SMOKE_PARTICLE_STATUS(i, p) = 0
		Next p
	Next i

	For i = 0 to MAX_PARTICLE_SYSTEMS - 1
		PARTICLE_SYSTEM_STATUS(i) = 0
		For p = 0 to MAX_PARTICLES - 1
			PARTICLE_SYSTEM_PARTICLE_STATUS(i, p) = 0
			Bob Off i + SMOKE_BOB_OFFSET
		Next p
	Next i
Return

START_GAME:
    Screen Hide 0
    Screen Hide 3
    Screen Show 1
    Screen Show 2
	Screen Show 4
    Screen 0
	Bob Off
    Gosub CLEAR_GAME_OBJECTS
    Screen 1
    Cls 0
	Bob Off

	// Fade the screen in
	Gosub INIT_FADE_IN

	CURRENT_TIME# = Timer
	DELTA_TIME# = Min(1, CURRENT_TIME# - LAST_TIME#)
	LAST_TIME# = CURRENT_TIME#
	AnimFadeIn[1]

    PLAYER_KILL_COUNT = 0
	Gosub UPDATE_MOUSE
    Gosub SETUP_LEVEL

    Goto MAIN_GAME_LOOP

Procedure UPDATE_LOAD_PROGRESS[pos, total]
    p = (pos / total) * 100
    t = (360 / 100) * p

    For i = 0 to Int(t)
        Paste Bob ((DW / 2) - 180) + i, DH - 200, 1538
    Next i
    Paste Bob DW / 2, DH - 200, 1537
End Proc

RESET_PLAYER:
    PMF# = BII#         // Set the player frame to the base index as set in the level setup
    PBBF# = BII# + 1
    HAS_SHIELD = 1      // Start off shielded
    SHIELD_TIMER# = 0
    SHIELD_TIME# = 3    // 3 Seconds
    PLAYER_STATE = 0
    PLAYER_HIT_POINTS# = 93
    PLAYER_HIT = 0
    PX# = 128: PY# = DH / 2: PXT# = PX#: PYT# = PY#: SPEEDX# = 0: SPEEDY# = 0
    PLAY_AUDIO_SAMPLE[SAM_PLAYER_SHIELD_UP, false, 1]
Return

SETUP_LEVEL:
    Gosub RESET_PLAYER
    MAP_SPEED# = 90
    LEVELX# = 0
    LEVEL_COMPLETE = 0
	PLAYER_LEVEL_SCORE = 0

    // Player variables
    PMS# = 5: PBBA = 0: PBBFS# = 20: PSF# = 80: PSR# = 0

    // Reset Background image X positions
    XB# = 0: XB1# = 0: XB2# = 0: XB3# = 0
	MAP$ = ""
	Reset Maps
    If LEVEL = 1
        BG1 = 492: BG2 = 493: BG3 = 494: BG4 = 495  // Background images
        PLAYER_HEALTH# = 93                         // Player health
        SHOOT_TIMER# = 2                            // Used to trigger the fire weapon
        SHOOT_RATE = 14                             // Control the rate of fire
        LEVEL_MUSIC = 200                           // Music for the level
		BOSS_MUSIC = 210							// Music for level boss
        KILLS_REQUIRED = 180                        // Kills required to upgrade
		MAP$ = "Level1"
        Load Map "maps/Level1.tmx"
    Else
        If LEVEL = 2
            PLAYER_HEALTH# = 93
            BG1 = 500: BG2 = 501: BG3 = 502: BG4 = 503
            SHOOT_TIMER# = 2
            SHOOT_RATE = 10
            LEVEL_MUSIC = 201
			BOSS_MUSIC = 211
            KILLS_REQUIRED = 300
			MAP$ = "Level2"
            Load Map "maps/Level2.tmx"
        Else
            If LEVEL = 3
                PLAYER_HEALTH# = 93
                BG1 = 496: BG2 = 497: BG3 = 498: BG4 = 499
                SHOOT_TIMER# = 2
                SHOOT_RATE = 10
                LEVEL_MUSIC = 202
				BOSS_MUSIC = 212
                KILLS_REQUIRED = 260
				MAP$ = "Level3"
                Load Map "maps/Level3.tmx"
            Else
                If LEVEL = 4
                    PLAYER_HEALTH# = 93
					BG1 = 504: BG2 = 505: BG3 = 506: BG4 = 507
	                SHOOT_TIMER# = 2
	                SHOOT_RATE = 10
	                LEVEL_MUSIC = 203
					BOSS_MUSIC = 213
	                KILLS_REQUIRED = 280
					MAP$ = "Level4"
                    Load Map "maps/Level4.tmx"
                End If
            End If
        End If
    End If

    Gosub SET_PLAYER_SHIP
    Gosub UPDATE_HUD

	// Load the tileset, and set first image to our first image in the image bank
    Load Tileset "maps/Cybenet.tsx", 510

    // Open tile map but dont display (Each view is a layer in the map)
    Open View "view1", MAP$, "Cybenet", 0         // Terrain
	Display View "view1", 0, 0, 0, 0
    Open View "view2", MAP$, "Cybenet", 1         // Decoration
	Display View "view2", 0, 0, 0, 0
    Open View "view3", MAP$, "Cybenet", 2         // Ground Enemy
	Display View "view3", 0, 0, 0, 0
    Open View "view4", MAP$, "Cybenet", 3         // Enemy Ships
	Display View "view4", 0, 0, 0, 0
    Open View "view5", MAP$, "Cybenet", 4         // Decoration 2
	Display View "view5", 0, 0, 0, 0
    Open View"view6", MAP$, "Cybenet", 5          // Commands
	Display View "view6", 0, 0, 0, 0

	// Open destructable layer
	If LEVEL >= 4
		Open View "view7", MAP$, "Cybenet", 6     // Distructable
		Display View "view7", 0, 0, 0, 0
	End If
Return

Procedure ADD_PARTICLE_SYSTEM[x, y, particle_count, max_life, gravity]
	For i = 0 to MAX_PARTICLE_SYSTEMS - 1
		If PARTICLE_SYSTEM_STATUS(i) = 0

			PARTICLE_SYSTEM_STATUS(i) = 1
			PARTICLE_SYSTEM_X#(i) = x
			PARTICLE_SYSTEM_Y#(i) = y
			PARTICLE_SYSTEM_GRAVITY(i) = gravity

			For p = 0 to MAX_PARTICLES - 1
				If PARTICLE_SYSTEM_PARTICLE_STATUS(i, p) = 0
					If particle_count > 0
						PARTICLE_SYSTEM_PARTICLE_STATUS(i, p) = 1
						PARTICLE_SYSTEM_PARTICLE_X#(i, p) = x
						PARTICLE_SYSTEM_PARTICLE_Y#(i, p) = y
						PARTICLE_SYSTEM_PARTICLE_VX#(i, p) = Rnd(300) * Sin(Rnd(359))
						PARTICLE_SYSTEM_PARTICLE_VY#(i, p) = Rnd(300) * Cos(Rnd(359))
						PARTICLE_SYSTEM_PARTICLE_LIFE#(i, p) = Rnd(max_life)
						PARTICLE_SYSTEM_PARTICLE_COLOUR#(i, p) = 19
					Else
						PARTICLE_SYSTEM_PARTICLE_STATUS(i, p) = 0
					End If
					Dec particle_count
				End If
			Next p
			Exit
		End If
	Next i
End Proc

UPDATE_PARTICLE_SYSTEM:
	For i = 0 to MAX_PARTICLE_SYSTEMS - 1
		If PARTICLE_SYSTEM_STATUS(i) = 1

			HAS_LIVE_PARTICLE = 0

			For p = 0 to MAX_PARTICLES - 1
				If PARTICLE_SYSTEM_PARTICLE_STATUS(i, p) = 1
					// Check if off screen
					If PARTICLE_SYSTEM_PARTICLE_X#(i, p) < 0 or PARTICLE_SYSTEM_PARTICLE_X#(i, p) > DW or PARTICLE_SYSTEM_PARTICLE_Y#(i, p) < 0 or PARTICLE_SYSTEM_PARTICLE_Y#(i, p) > DH
						PARTICLE_SYSTEM_PARTICLE_STATUS(i, p) = 0
					else
						// Check if hit terrain
						t = Tile Value("view1", Int((PARTICLE_SYSTEM_PARTICLE_X#(i, p) + LEVELX#) / 64), Int(PARTICLE_SYSTEM_PARTICLE_Y#(i, p) / 64))

						If t <> 0
							PARTICLE_SYSTEM_PARTICLE_STATUS(i, p) = 0
						Else
							// Apply gravity
							Add PARTICLE_SYSTEM_PARTICLE_VY#(i, p), PARTICLE_SYSTEM_GRAVITY(i) * DELTA_TIME#
							// Add velocity
							Add PARTICLE_SYSTEM_PARTICLE_X#(i, p), PARTICLE_SYSTEM_PARTICLE_VX#(i, p) * DELTA_TIME#
							Add PARTICLE_SYSTEM_PARTICLE_Y#(i, p), PARTICLE_SYSTEM_PARTICLE_VY#(i, p) * DELTA_TIME#
							// Update colour
							Add PARTICLE_SYSTEM_PARTICLE_COLOUR#(i, p), -(10 * DELTA_TIME#)

							If PARTICLE_SYSTEM_PARTICLE_LIFE#(i, p) <= 0
								PARTICLE_SYSTEM_PARTICLE_STATUS(i, p) = 0
							else
								HAS_LIVE_PARTICLE = 1
							End If
							// Reduce life
							Add PARTICLE_SYSTEM_PARTICLE_LIFE#(i, p), -(60 * DELTA_TIME#)
						End If
					End If
				End If
			Next p

			If HAS_LIVE_PARTICLE = 0
				PARTICLE_SYSTEM_STATUS(i) = 0
			End If
		End If
	Next i
Return

DRAW_PARTICLE_SYSTEM:
	For i = 0 to MAX_PARTICLE_SYSTEMS - 1
		If PARTICLE_SYSTEM_STATUS(i) = 1
			For p = 0 to MAX_PARTICLES - 1
				If PARTICLE_SYSTEM_PARTICLE_STATUS(i, p) = 1
					Ink Max(17, Int(PARTICLE_SYSTEM_PARTICLE_COLOUR#(i, p)))
					Bar PARTICLE_SYSTEM_PARTICLE_X#(i, p), PARTICLE_SYSTEM_PARTICLE_Y#(i, p) to PARTICLE_SYSTEM_PARTICLE_X#(i, p) + 2, PARTICLE_SYSTEM_PARTICLE_Y#(i, p) + 2
				End If
			Next p
		End If
	Next i
Return

Procedure ADD_SHIP_ENEMY[type, x, y]

    For es = 0 to MAX_ENEMY_SHIPS - 1
        If ES_STATUS(es) = 0
            ES_STATUS(es) = 1
			For si = 0 to 4
				ES_SMOKE_INDEX(es, si) = -1
			Next si
			ES_HAS_SMOKE(es) = 0
			ES_KILL_POINTS(es) = 0

            // Ship 1
            If type = 157 or type = 158 or type = 159
                ES_ISBOSS(es) = 0                           // Is this a boss ship 1 = yes 0 = no
                ES_HIT_POINTS(es) = 1                       // Number of hits required to destroy
                ES_X#(es) = (x * 64) - LEVELX#              // X Screen Position
                ES_Y#(es) = y * 64                          // Y Screen Position
                ES_FRAME#(es) = 950                         // Current Image number
                ES_HIT_FRAME#(es) = 950                      // Image to show when hit by player bullet
                ES_ISHIT#(es) = 0                           // Flag used to show the hit frame
                ES_AI_TYPE(es) = 0                          // 0 = Straight 2 = Wrobble 3 = Catmull
                ES_SPEEDX#(es) = -100                       // X Speed
                ES_SPEEDY#(es) = 0                          // Y Speed
                ES_AI_OFFX#(es) = 0                         // AI X Movement offset
                ES_AI_OFFY#(es) = 0                         // AI Y movement offset
                ES_AGE#(es) = 0                             // Age in frames, used in the AI
                ES_HIT_SAM(es) = SAM_PLAYER_HIT_ENEMY       // Sample to play when hit
                ES_BB_XOFF(es) = 42                         // Back burner X offset
                ES_BB_YOFF(es) = 1                          // Back burner Y offset
                ES_BB_FRAME#(es) = 951                      // Back burner current frame
                ES_BB_START_FRAME(es) = ES_BB_FRAME#(es)    // Back burner start frame
                ES_BB_END_FRAME(es) = 954                   // Back burner end frame
                ES_WEAPON_TYPE(es) = 1                      // Weapon type
                ES_SHOOT_AI_TYPE(es) = 1                    // Shoot AI - 0 = None, 1 = Random, 2 = Fixed
                ES_FIRE_TIME#(es) = DELTA_TIME# + (3 + Rnd(6)) // Used to set the next time to fire
                ES_EXP_SIZE(es) = 0                         // Small explosion
                ES_EXP_COUNT(es) = 1                        // Number of explosions
                ES_AI_PATH_NODE_TIME#(es) = 0.9             // Used in the path AI, speed to each path point
				ES_SCORE_POINTS(es) = 10

                If type = 157
                    ES_AI_TYPE(es) = 1                      // 1 = Sinusoidal Wobble
                    ES_AI_SIZE(es) = 110                    // Wrobble size
					ES_SCORE_POINTS(es) = 20
                End If

                If type = 158
                    ES_AI_TYPE(es) = 2                      // 2= Catmull-Rom spline curve
                    ES_SPEEDX#(es) = -120
					ES_SCORE_POINTS(es) = 30
                    // Set up the path points
                    ES_AI_PATH_POINTS_X#(es, 0) = 0
                    ES_AI_PATH_POINTS_Y#(es, 0) = 0

                    ES_AI_PATH_POINTS_X#(es, 1) = -Rnd(32)
                    ES_AI_PATH_POINTS_Y#(es, 1) = -(50 + Rnd(50))

                    ES_AI_PATH_POINTS_X#(es, 2) = Rnd(32)
                    ES_AI_PATH_POINTS_Y#(es, 2) = -(50 + Rnd(50))

                    ES_AI_PATH_POINTS_X#(es, 3) = -Rnd(32)
                    ES_AI_PATH_POINTS_Y#(es, 3) = -(50 + Rnd(50))

                    ES_AI_PATH_POINTS_X#(es, 4) = Rnd(32)
                    ES_AI_PATH_POINTS_Y#(es, 4) = (50 + Rnd(50))

                    ES_AI_PATH_POINTS_X#(es, 5) = -Rnd(32)
                    ES_AI_PATH_POINTS_Y#(es, 5) = (50 + Rnd(50))

                    ES_AI_PATH_POINTS_X#(es, 6) = Rnd(32)
                    ES_AI_PATH_POINTS_Y#(es, 6) = (50 + Rnd(50))

                    ES_AI_PATH_POINTS_X#(es, 7) = -Rnd(32)
                    ES_AI_PATH_POINTS_Y#(es, 7) = -(50 + Rnd(50))

                End If
            End If

            // Ship 2
            If type = 160 or type = 161 or type = 162
                ES_ISBOSS(es) = 0
                ES_HIT_POINTS(es) = 2
                ES_X#(es) = (x * 64) - LEVELX#
                ES_Y#(es) = y * 64
                ES_FRAME#(es) = 965
                ES_HIT_FRAME#(es) = 995
                ES_ISHIT#(es) = 0
                ES_AI_TYPE(es) = 0
                ES_SPEEDX#(es) = -110
                ES_SPEEDY#(es) = 0
                ES_AI_OFFX#(es) = 0
                ES_AI_OFFY#(es) = 0
                ES_AGE#(es) = 0
                ES_HIT_SAM(es) = SAM_PLAYER_HIT_ENEMY
                ES_BB_XOFF(es) = 52
                ES_BB_YOFF(es) = -1
                ES_BB_FRAME#(es) = 966
                ES_BB_START_FRAME(es) = ES_BB_FRAME#(es)
                ES_BB_END_FRAME(es) = 969
                ES_WEAPON_TYPE(es) = 2
                ES_SHOOT_AI_TYPE(es) = 1
                ES_FIRE_TIME#(es) = DELTA_TIME# + (3 + Rnd(5))
                ES_EXP_SIZE(es) = 1
                ES_EXP_COUNT(es) = 1
                ES_AI_PATH_NODE_TIME#(es) = 0.8
				ES_SCORE_POINTS(es) = 40

                If type = 161
                    ES_AI_TYPE(es) = 1
                    ES_AI_SIZE(es) = 120
					ES_SCORE_POINTS(es) = 50
                End If

                If type = 162
                    ES_AI_TYPE(es) = 2
                    ES_SPEEDX#(es) = -130
					ES_SCORE_POINTS(es) = 60
                    // Set up the path points
                    ES_AI_PATH_POINTS_X#(es, 0) = 0
                    ES_AI_PATH_POINTS_Y#(es, 0) = 0

                    ES_AI_PATH_POINTS_X#(es, 1) = -(50 + Rnd(30))
                    ES_AI_PATH_POINTS_Y#(es, 1) = 0

                    ES_AI_PATH_POINTS_X#(es, 2) = -(50 + Rnd(30))
                    ES_AI_PATH_POINTS_Y#(es, 2) = -(30 + Rnd(100))

                    ES_AI_PATH_POINTS_X#(es, 3) = 30 + Rnd(100)
                    ES_AI_PATH_POINTS_Y#(es, 3) = -(30 + Rnd(100))

                    ES_AI_PATH_POINTS_X#(es, 4) = 0
                    ES_AI_PATH_POINTS_Y#(es, 4) = 0

                    ES_AI_PATH_POINTS_X#(es, 5) = -(50 + Rnd(30))
                    ES_AI_PATH_POINTS_Y#(es, 5) = 30 + Rnd(100)

                    ES_AI_PATH_POINTS_X#(es, 6) = 0
                    ES_AI_PATH_POINTS_Y#(es, 6) = 30 + Rnd(100)

                    ES_AI_PATH_POINTS_X#(es, 7) = 30 + Rnd(100)
                    ES_AI_PATH_POINTS_Y#(es, 7) = 0

                End If
            End If

            // Ship 3
            If type = 163 or type = 164 or type = 165
                ES_ISBOSS(es) = 0
                ES_HIT_POINTS(es) = 4
                ES_X#(es) = (x * 64) - LEVELX#
                ES_Y#(es) = y * 64
            	ES_FRAME#(es) = 982
                ES_HIT_FRAME#(es) = 996
                ES_ISHIT#(es) = 0
                ES_AI_TYPE(es) = 0
                ES_SPEEDX#(es) = -110
                ES_SPEEDY#(es) = 0
                ES_AI_OFFX#(es) = 0
                ES_AI_OFFY#(es) = 0
                ES_AGE#(es) = 0
                ES_HIT_SAM(es) = SAM_PLAYER_HIT_ENEMY
                ES_BB_XOFF(es) = 58
                ES_BB_YOFF(es) = -1
                ES_BB_FRAME#(es) = 983
                ES_BB_START_FRAME(es) = ES_BB_FRAME#(es)
                ES_BB_END_FRAME(es) = 986
                ES_WEAPON_TYPE(es) = 3
                ES_SHOOT_AI_TYPE(es) = 1
                ES_FIRE_TIME#(es) = DELTA_TIME# + (1 + Rnd(3))
                ES_EXP_SIZE(es) = 2
                ES_EXP_COUNT(es) = 2
                ES_AI_PATH_NODE_TIME#(es) = 0.7
				ES_SCORE_POINTS(es) = 70

                If type = 164
                    ES_AI_TYPE(es) = 1
                    ES_AI_SIZE(es) = 120
					ES_SCORE_POINTS(es) = 80
                End If

                If type = 165
                    ES_AI_TYPE(es) = 2
                    ES_SPEEDX#(es) = -130
					ES_SCORE_POINTS(es) = 90
                    // Set up the path points
                    ES_AI_PATH_POINTS_X#(es, 0) = 0
                    ES_AI_PATH_POINTS_Y#(es, 0) = 0

                    ES_AI_PATH_POINTS_X#(es, 1) = -(50 + Rnd(20))
                    ES_AI_PATH_POINTS_Y#(es, 1) = -(50 + Rnd(20))

                    ES_AI_PATH_POINTS_X#(es, 2) = 0
                    ES_AI_PATH_POINTS_Y#(es, 2) = -(50 + Rnd(20))

                    ES_AI_PATH_POINTS_X#(es, 3) = 0
                    ES_AI_PATH_POINTS_Y#(es, 3) = 50 + Rnd(100)

                    ES_AI_PATH_POINTS_X#(es, 4) = 50 + Rnd(20)
                    ES_AI_PATH_POINTS_Y#(es, 4) = -(50 + Rnd(100))

                    ES_AI_PATH_POINTS_X#(es, 5) = 50 + Rnd(20)
                    ES_AI_PATH_POINTS_Y#(es, 5) = 0

                    ES_AI_PATH_POINTS_X#(es, 6) = 50 + Rnd(20)
                    ES_AI_PATH_POINTS_Y#(es, 6) = 0

                    ES_AI_PATH_POINTS_X#(es, 7) = 80 + Rnd(50)
                    ES_AI_PATH_POINTS_Y#(es, 7) = -(50 + Rnd(50))

                End If
            End If

            // Ship 4
            If type = 171 or type = 172 or type = 173
                ES_ISBOSS(es) = 0
                ES_HIT_POINTS(es) = 3
                ES_X#(es) = (x * 64) - LEVELX#
                ES_Y#(es) = y * 64
                ES_FRAME#(es) = 1062
                ES_HIT_FRAME#(es) = 1063
                ES_ISHIT#(es) = 0
                ES_AI_TYPE(es) = 0
                ES_SPEEDX#(es) = -100
                ES_SPEEDY#(es) = 0
                ES_AI_OFFX#(es) = 0
                ES_AI_OFFY#(es) = 0
                ES_AGE#(es) = 0
                ES_HIT_SAM(es) = SAM_PLAYER_HIT_ENEMY
                ES_BB_XOFF(es) = 58
                ES_BB_YOFF(es) = -1
                ES_BB_FRAME#(es) = 1064
                ES_BB_START_FRAME(es) = ES_BB_FRAME#(es)
                ES_BB_END_FRAME(es) = 1067
                ES_WEAPON_TYPE(es) = 6
                ES_SHOOT_AI_TYPE(es) = 1
                ES_FIRE_TIME#(es) = DELTA_TIME# + (1 + Rnd(5))
                ES_EXP_SIZE(es) = 4
                ES_EXP_COUNT(es) = 4
                ES_AI_PATH_NODE_TIME#(es) = 1.4
				ES_SCORE_POINTS(es) = 100

                If type = 172
                    ES_AI_TYPE(es) = 1
                    ES_SPEEDX#(es) = -110
                    ES_AI_SIZE(es) = 100 + Rnd(100)
					ES_SCORE_POINTS(es) = 110
                End If

                If type = 173
                    ES_AI_TYPE(es) = 2
                    ES_SPEEDX#(es) = -115
					ES_SCORE_POINTS(es) = 120
                    ES_HIT_POINTS(es) = 4
                    // Set up the path points
                    ES_AI_PATH_POINTS_X#(es, 0) = -50
                    ES_AI_PATH_POINTS_Y#(es, 0) = 0

                    ES_AI_PATH_POINTS_X#(es, 1) = -300
                    ES_AI_PATH_POINTS_Y#(es, 1) = 370

                    ES_AI_PATH_POINTS_X#(es, 2) = 300
                    ES_AI_PATH_POINTS_Y#(es, 2) = 370

                    ES_AI_PATH_POINTS_X#(es, 3) = -300
                    ES_AI_PATH_POINTS_Y#(es, 3) = -300

                    ES_AI_PATH_POINTS_X#(es, 4) = 300
                    ES_AI_PATH_POINTS_Y#(es, 4) = -300

                    ES_AI_PATH_POINTS_X#(es, 5) = 400
                    ES_AI_PATH_POINTS_Y#(es, 5) = 0

                    ES_AI_PATH_POINTS_X#(es, 6) = 300
                    ES_AI_PATH_POINTS_Y#(es, 6) = 150

                    ES_AI_PATH_POINTS_X#(es, 7) = 0
                    ES_AI_PATH_POINTS_Y#(es, 7) = 0

                End If
            End If

            // Ship 5
            If type = 174 or type = 175 or type = 176
                ES_ISBOSS(es) = 0
                ES_HIT_POINTS(es) = 6
                ES_X#(es) = (x * 64) - LEVELX#
                ES_Y#(es) = y * 64
                ES_FRAME#(es) = 1082
                ES_HIT_FRAME#(es) = 1083
                ES_ISHIT#(es) = 0
                ES_AI_TYPE(es) = 0
                ES_SPEEDX#(es) = -80
                ES_SPEEDY#(es) = 0
                ES_AI_OFFX#(es) = 0
                ES_AI_OFFY#(es) = 0
                ES_AGE#(es) = 0
                ES_HIT_SAM(es) = SAM_PLAYER_HIT_ENEMY
                ES_BB_XOFF(es) = 70
                ES_BB_YOFF(es) = 7
                ES_BB_FRAME#(es) = 1084
                ES_BB_START_FRAME(es) = ES_BB_FRAME#(es)
                ES_BB_END_FRAME(es) = 1087
                ES_WEAPON_TYPE(es) = 7
                ES_SHOOT_AI_TYPE(es) = 1
                ES_FIRE_TIME#(es) = DELTA_TIME# + (1 + Rnd(5))
                ES_EXP_SIZE(es) = 14
                ES_EXP_COUNT(es) = 4
                ES_AI_PATH_NODE_TIME#(es) = 1.2
				ES_SCORE_POINTS(es) = 130

                If type = 175
                    ES_AI_TYPE(es) = 1
                    ES_SPEEDX#(es) = -85
                    ES_AI_SIZE(es) = 150 + Rnd(100)
                    ES_HIT_POINTS(es) = 7
					ES_SCORE_POINTS(es) = 140
                End If

                If type = 176
                    ES_AI_TYPE(es) = 2
                    ES_SPEEDX#(es) = -95
                    ES_HIT_POINTS(es) = 7
					ES_SCORE_POINTS(es) = 150
                    // Set up the path points
                    ES_AI_PATH_POINTS_X#(es, 0) = 0
                    ES_AI_PATH_POINTS_Y#(es, 0) = 0

                    ES_AI_PATH_POINTS_X#(es, 1) = -300
                    ES_AI_PATH_POINTS_Y#(es, 1) = 100

                    ES_AI_PATH_POINTS_X#(es, 2) = 300
                    ES_AI_PATH_POINTS_Y#(es, 2) = 0

                    ES_AI_PATH_POINTS_X#(es, 3) = 500
                    ES_AI_PATH_POINTS_Y#(es, 3) = 200

                    ES_AI_PATH_POINTS_X#(es, 4) = 0
                    ES_AI_PATH_POINTS_Y#(es, 4) = 500

                    ES_AI_PATH_POINTS_X#(es, 5) = 500
                    ES_AI_PATH_POINTS_Y#(es, 5) = 500

                    ES_AI_PATH_POINTS_X#(es, 6) = 500
                    ES_AI_PATH_POINTS_Y#(es, 6) = 100

                    ES_AI_PATH_POINTS_X#(es, 7) = 200
                    ES_AI_PATH_POINTS_Y#(es, 7) = 200
                End If
            End If

            // Boss 1
            If type = 169
                ES_ISBOSS(es) = 1
                ES_HIT_POINTS(es) = 100
				ES_KILL_POINTS(es) = 100
                ES_X#(es) = (x * 64) - LEVELX#
                ES_Y#(es) = y * 64
                ES_FRAME#(es) = 997
                ES_HIT_FRAME#(es) = 1017
                ES_ISHIT#(es) = 0
                ES_SPEEDX#(es) = 0
                ES_SPEEDY#(es) = 0
                ES_AI_OFFX#(es) = 0
                ES_AI_OFFY#(es) = 0
                ES_AGE#(es) = 0
                ES_HIT_SAM(es) = SAM_PLAYER_HIT_BOSS
                ES_BB_XOFF(es) = 80
                ES_BB_YOFF(es) = -5
                ES_BB_FRAME#(es) = 998
                ES_BB_START_FRAME(es) = ES_BB_FRAME#(es)
                ES_BB_END_FRAME(es) = 1001
                ES_WEAPON_TYPE(es) = 4
                ES_SHOOT_AI_TYPE(es) = 2
                ES_FIRE_TIME#(es) = 0
                ES_EXP_SIZE(es) = 9
                ES_EXP_COUNT(es) = 15
                ES_AI_PATH_NODE_TIME#(es) = 1.1
				ES_HAS_SMOKE(es) = 1
				ES_SCORE_POINTS(es) = 1000

                ES_AI_TYPE(es) = 2
                // Set up the path points
                ES_AI_PATH_POINTS_X#(es, 0) = -50
                ES_AI_PATH_POINTS_Y#(es, 0) = 0

                ES_AI_PATH_POINTS_X#(es, 1) = -300
                ES_AI_PATH_POINTS_Y#(es, 1) = 370

                ES_AI_PATH_POINTS_X#(es, 2) = 300
                ES_AI_PATH_POINTS_Y#(es, 2) = 370

                ES_AI_PATH_POINTS_X#(es, 3) = -300
                ES_AI_PATH_POINTS_Y#(es, 3) = -300

                ES_AI_PATH_POINTS_X#(es, 4) = 300
                ES_AI_PATH_POINTS_Y#(es, 4) = -300

                ES_AI_PATH_POINTS_X#(es, 5) = 400
                ES_AI_PATH_POINTS_Y#(es, 5) = 0

                ES_AI_PATH_POINTS_X#(es, 6) = 300
                ES_AI_PATH_POINTS_Y#(es, 6) = 150

                ES_AI_PATH_POINTS_X#(es, 7) = 0
                ES_AI_PATH_POINTS_Y#(es, 7) = 0
            End If

            // Boss 2
            If type = 170
                ES_ISBOSS(es) = 1
                ES_HIT_POINTS(es) = 300
				ES_KILL_POINTS(es) = 300
                ES_X#(es) = (x * 64) - LEVELX#
                ES_Y#(es) = y * 64
                ES_FRAME#(es) = 1043
                ES_HIT_FRAME#(es) = 1044
                ES_ISHIT#(es) = 0
                ES_SPEEDX#(es) = 0
                ES_SPEEDY#(es) = 0
                ES_AI_OFFX#(es) = 0
                ES_AI_OFFY#(es) = 0
                ES_AGE#(es) = 0
                ES_HIT_SAM(es) = SAM_PLAYER_HIT_BOSS
                ES_BB_XOFF(es) = 70
                ES_BB_YOFF(es) = 8
                ES_BB_FRAME#(es) = 1045
                ES_BB_START_FRAME(es) = ES_BB_FRAME#(es)
                ES_BB_END_FRAME(es) = 1048
                ES_WEAPON_TYPE(es) = 5
                ES_SHOOT_AI_TYPE(es) = 2
                ES_FIRE_TIME#(es) = 0
                ES_EXP_SIZE(es) = 10
                ES_EXP_COUNT(es) = 15
                ES_AI_PATH_NODE_TIME#(es) = 1.1
				ES_HAS_SMOKE(es) = 1
				ES_SCORE_POINTS(es) = 2000

                ES_AI_TYPE(es) = 2
                // Set up the path points
                ES_AI_PATH_POINTS_X#(es, 0) = 0
                ES_AI_PATH_POINTS_Y#(es, 0) = 0

                ES_AI_PATH_POINTS_X#(es, 1) = -300
                ES_AI_PATH_POINTS_Y#(es, 1) = 300

                ES_AI_PATH_POINTS_X#(es, 2) = 300
                ES_AI_PATH_POINTS_Y#(es, 2) = 200

                ES_AI_PATH_POINTS_X#(es, 3) = 400
                ES_AI_PATH_POINTS_Y#(es, 3) = 400

                ES_AI_PATH_POINTS_X#(es, 4) = -300
                ES_AI_PATH_POINTS_Y#(es, 4) = 700

                ES_AI_PATH_POINTS_X#(es, 5) = 400
                ES_AI_PATH_POINTS_Y#(es, 5) = 700

                ES_AI_PATH_POINTS_X#(es, 6) = -300
                ES_AI_PATH_POINTS_Y#(es, 6) = 300

                ES_AI_PATH_POINTS_X#(es, 7) = 500
                ES_AI_PATH_POINTS_Y#(es, 7) = 400

            End If

            // Boss 3
            If type = 177
                ES_ISBOSS(es) = 1
                ES_HIT_POINTS(es) = 500
				ES_KILL_POINTS(es) = 500
                ES_X#(es) = (x * 64) - LEVELX#
                ES_Y#(es) = y * 64
                ES_FRAME#(es) = 1113
                ES_HIT_FRAME#(es) = 1114
                ES_ISHIT#(es) = 0
                ES_SPEEDX#(es) = 0
                ES_SPEEDY#(es) = 0
                ES_AI_OFFX#(es) = 0
                ES_AI_OFFY#(es) = 0
                ES_AGE#(es) = 0
                ES_HIT_SAM(es) = SAM_PLAYER_HIT_BOSS
                ES_BB_XOFF(es) = 90
                ES_BB_YOFF(es) = 8
                ES_BB_FRAME#(es) = 1115
                ES_BB_START_FRAME(es) = ES_BB_FRAME#(es)
                ES_BB_END_FRAME(es) = 1118
                ES_WEAPON_TYPE(es) = 8
                ES_SHOOT_AI_TYPE(es) = 2
                ES_FIRE_TIME#(es) = 0
                ES_EXP_SIZE(es) = 10
                ES_EXP_COUNT(es) = 15
                ES_AI_PATH_NODE_TIME#(es) = 0.9
				ES_HAS_SMOKE(es) = 1
				ES_SCORE_POINTS(es) = 3000

                ES_AI_TYPE(es) = 2
                // Set up the path points
                ES_AI_PATH_POINTS_X#(es, 0) = 0
                ES_AI_PATH_POINTS_Y#(es, 0) = 0

                ES_AI_PATH_POINTS_X#(es, 1) = 500
                ES_AI_PATH_POINTS_Y#(es, 1) = -100

                ES_AI_PATH_POINTS_X#(es, 2) = -100
                ES_AI_PATH_POINTS_Y#(es, 2) = -600

                ES_AI_PATH_POINTS_X#(es, 3) = 500
                ES_AI_PATH_POINTS_Y#(es, 3) = -550

                ES_AI_PATH_POINTS_X#(es, 4) = 200
                ES_AI_PATH_POINTS_Y#(es, 4) = -600

                ES_AI_PATH_POINTS_X#(es, 5) = 300
                ES_AI_PATH_POINTS_Y#(es, 5) = 100

                ES_AI_PATH_POINTS_X#(es, 6) = 500
                ES_AI_PATH_POINTS_Y#(es, 6) = -650

                ES_AI_PATH_POINTS_X#(es, 7) = 300
                ES_AI_PATH_POINTS_Y#(es, 7) = -100

            End If

			// Boss 4
			If type = 202
				ES_ISBOSS(es) = 1
				ES_HIT_POINTS(es) = 500
				ES_KILL_POINTS(es) = 500
				ES_X#(es) = (x * 64) - LEVELX#
				ES_Y#(es) = y * 64
				ES_FRAME#(es) = 1170
				ES_HIT_FRAME#(es) = 1171
				ES_ISHIT#(es) = 0
				ES_SPEEDX#(es) = 0
				ES_SPEEDY#(es) = 0
				ES_AI_OFFX#(es) = 0
				ES_AI_OFFY#(es) = 0
				ES_AGE#(es) = 0
				ES_HIT_SAM(es) = SAM_PLAYER_HIT_BOSS
				ES_BB_XOFF(es) = 90
				ES_BB_YOFF(es) = 0
				ES_BB_FRAME#(es) = 1115
				ES_BB_START_FRAME(es) = ES_BB_FRAME#(es)
				ES_BB_END_FRAME(es) = 1118
				ES_WEAPON_TYPE(es) = 9
				ES_SHOOT_AI_TYPE(es) = 2
				ES_FIRE_TIME#(es) = 0
				ES_EXP_SIZE(es) = 10
				ES_EXP_COUNT(es) = 15
				ES_AI_PATH_NODE_TIME#(es) = 0.7
				ES_HAS_SMOKE(es) = 1
				ES_SCORE_POINTS(es) = 4000

				ES_AI_TYPE(es) = 2
				// Set up the path points
				ES_AI_PATH_POINTS_X#(es, 0) = 0
				ES_AI_PATH_POINTS_Y#(es, 0) = 0

				ES_AI_PATH_POINTS_X#(es, 1) = 500
				ES_AI_PATH_POINTS_Y#(es, 1) = -100

				ES_AI_PATH_POINTS_X#(es, 2) = -100
				ES_AI_PATH_POINTS_Y#(es, 2) = -600

				ES_AI_PATH_POINTS_X#(es, 3) = 500
				ES_AI_PATH_POINTS_Y#(es, 3) = -550

				ES_AI_PATH_POINTS_X#(es, 4) = 200
				ES_AI_PATH_POINTS_Y#(es, 4) = -600

				ES_AI_PATH_POINTS_X#(es, 5) = 300
				ES_AI_PATH_POINTS_Y#(es, 5) = 100

				ES_AI_PATH_POINTS_X#(es, 6) = 500
				ES_AI_PATH_POINTS_Y#(es, 6) = -650

				ES_AI_PATH_POINTS_X#(es, 7) = 300
				ES_AI_PATH_POINTS_Y#(es, 7) = -100

			End If

            // Exit loop here
            Exit
        End If
    Next es
End Proc

Procedure SPLINEX[p0x#, p1x#, p2x#, p3x#, t#]
    splx# = 0.5 * ((2 * p1x#) + t# * (( -p0x# + p2x#) + t# * ((2 * p0x# -5 * p1x# +4 * p2x# -p3x#) + t# * ( -p0x# +3 * p1x# -3 * p2x# +p3x#))))
End Proc[splx#]

Procedure SPLINEY[p0y#, p1y#, p2y#, p3y#, t#]
    sply# = 0.5 * ((2 * p1y#) + t# * (( -p0y# + p2y#) + t# * ((2 * p0y# -5 * p1y# +4 * p2y# -p3y#) + t# * (  -p0y# +3 * p1y# -3 * p2y# +p3y#))))
End Proc[sply#]

UPDATE_ENEMY_SHIPS:
    For es = 0 to MAX_ENEMY_SHIPS - 1
        If ES_STATUS(es) = 1

            Add ES_AGE#(es), DELTA_TIME#

            // Remove the last offset
            Add ES_X#(es), - ES_AI_OFFX#(es)
            Add ES_Y#(es), - ES_AI_OFFY#(es)

            // Add screen x scroll to ship x position
            ES_X#(es) = ES_X#(es) - MAP_SPEED# * DELTA_TIME#

            // add the ship speed
            Add ES_X#(es), ES_SPEEDX#(es) * DELTA_TIME#
            Add ES_Y#(es), ES_SPEEDY#(es) * DELTA_TIME#

            // Do the ship AI
            If ES_AI_TYPE(es) = 0
                // Nothing, just move using the current speed
            else
                // Sinusoidal Wobble
                If ES_AI_TYPE(es) = 1
                    ES_AI_OFFY#(es) = (Sin(ES_AGE#(es) * 60) / 3.141592653589793238) * ES_AI_SIZE(es)
                else

                    // Catmull-Rom spline curve
                    If ES_AI_TYPE(es) = 2
                        pathProgress# = ES_AGE#(es) / ES_AI_PATH_NODE_TIME#(es)

                        ei = Int(pathProgress#)
                        pointratio# = pathProgress# - ei

                        p0x# = ES_AI_PATH_POINTS_X#(es, (ei -1 + MAX_PATH_POINTS) mod MAX_PATH_POINTS)
                        p0y# = ES_AI_PATH_POINTS_Y#(es, (ei -1 + MAX_PATH_POINTS) mod MAX_PATH_POINTS)
                        p1x# = ES_AI_PATH_POINTS_X#(es, ei mod MAX_PATH_POINTS)
                        p1y# = ES_AI_PATH_POINTS_Y#(es, ei mod MAX_PATH_POINTS)
                        p2x# = ES_AI_PATH_POINTS_X#(es, (ei +1 + MAX_PATH_POINTS) mod MAX_PATH_POINTS)
                        p2y# = ES_AI_PATH_POINTS_Y#(es, (ei +1 + MAX_PATH_POINTS) mod MAX_PATH_POINTS)
                        p3x# = ES_AI_PATH_POINTS_X#(es, (ei +2 + MAX_PATH_POINTS) mod MAX_PATH_POINTS)
                        p3y# = ES_AI_PATH_POINTS_Y#(es, (ei +2 + MAX_PATH_POINTS) mod MAX_PATH_POINTS)

                        SPLINEX[p0x#, p1x#, p2x#, p3x#, pointratio#]
                        ES_AI_OFFX#(es) = PARAM#

                        SPLINEY[p0y#, p1y#, p2y#, p3y#, pointratio#]
                        ES_AI_OFFY#(es) = PARAM#
                    End If

                End If
            End If

            // Add the new offset
            Add ES_X#(es), ES_AI_OFFX#(es)
            Add ES_Y#(es), ES_AI_OFFY#(es)

            // Does this enemy have a weapon
            If ES_SHOOT_AI_TYPE(es) > 0
                // Is it time to shoot
                If ES_FIRE_TIME#(es) < ES_AGE#(es)

                    // Add a bullet using the enemy weapon type
                    If ES_WEAPON_TYPE(es) = 1 // Ship 1
                        //[x, y, speedx#, speedy#, frame_speed#, frame_start, frame_end, hit_damage#, ex_type, ex_speed, live_time, muzzel_start, muzzel_end, x_off#, y_off#, fire_sam, bob_rotate]
                        ADD_ENEMY_BULLET[ES_X#(es) + LEVELX#, ES_Y#(es), -600, 0, 60, 959, 959, 2, 5, 10, 1, 955, 958, -64, 0, 26, 0]
                        If ES_SHOOT_AI_TYPE(es) = 1
                            ES_FIRE_TIME#(es) = ES_AGE#(es) + (5 + Rnd(20))
                        End If
                    else
                        If ES_WEAPON_TYPE(es) = 2 // Ship 2
                            ADD_ENEMY_BULLET[ES_X#(es) + LEVELX#, ES_Y#(es), -800, 0, 60, 976, 976, 3, 6, 10, 1, 970, 975, -64, 0, 27, 0]
                            If ES_SHOOT_AI_TYPE(es) = 1
                                ES_FIRE_TIME#(es) = ES_AGE#(es) + (5 + Rnd(18))
                            End If
                        Else
                            If ES_WEAPON_TYPE(es) = 3 // Ship 3
                                ADD_ENEMY_BULLET[ES_X#(es) + LEVELX#, ES_Y#(es), -1000, 0, 60, 990, 990, 4, 7, 10, 1, 987, 989, -80, 2, 28, 0]
                                If ES_SHOOT_AI_TYPE(es) = 1
                                    ES_FIRE_TIME#(es) = ES_AGE#(es) + (5 + Rnd(15))
                                End If
                            else
                                If ES_WEAPON_TYPE(es) = 4 // boss 1
                                    ADD_ENEMY_BULLET[ES_X#(es) + LEVELX#, ES_Y#(es), -1400, 0, 60, 1006, 1006, 5, 8, 18, 1, 1002, 1006, -80, 2, 29, 0]
                                    If ES_SHOOT_AI_TYPE(es) = 2
                                        ES_FIRE_TIME#(es) = ES_AGE#(es) + (0.5 + Rnd(3))
                                    End If
                                Else
                                    If ES_WEAPON_TYPE(es) = 5 // boss 2
                                        ADD_ENEMY_BULLET[ES_X#(es) + LEVELX#, ES_Y#(es), -1600, 0, 60, 1054, 1054, 7, 11, 18, 1, 1049, 1054, -120, 2, 30, 0]
                                        If ES_SHOOT_AI_TYPE(es) = 2
                                            ES_FIRE_TIME#(es) = ES_AGE#(es) + (0.3 + Rnd(2))
                                        End If
                                    Else
                                        If ES_WEAPON_TYPE(es) = 6 // ship 4
                                            ADD_ENEMY_BULLET[ES_X#(es) + LEVELX#, ES_Y#(es), -1200, 0, 60, 1073, 1073, 5, 12, 18, 1, 1068, 1073, -80, 2, 34, 0]
                                            If ES_SHOOT_AI_TYPE(es) = 1
                                                ES_FIRE_TIME#(es) = ES_AGE#(es) + (3 + Rnd(12))
                                            End If
                                        Else
                                            If ES_WEAPON_TYPE(es) = 7 // ship 5
                                                ADD_ENEMY_BULLET[ES_X#(es) + LEVELX#, ES_Y#(es), -1400, 0, 60, 1093, 1093, 6, 13, 18, 1, 1088, 1093, -105, 4, 35, 0]
                                                If ES_SHOOT_AI_TYPE(es) = 1
                                                    ES_FIRE_TIME#(es) = ES_AGE#(es) + (3 + Rnd(11))
                                                End If
                                            Else
                                                If ES_WEAPON_TYPE(es) = 8 // Boss 3
                                                    ADD_ENEMY_BULLET[ES_X#(es) + LEVELX#, ES_Y#(es), -1800, 0, 60, 1124, 1124, 10, 15, 18, 1, 1119, 1124, -180, 30, 34, 0]
                                                    If ES_SHOOT_AI_TYPE(es) = 2
                                                        ES_FIRE_TIME#(es) = ES_AGE#(es) + (0.2 + Rnd(2))
                                                    End If
												Else
													If ES_WEAPON_TYPE(es) = 9 // Boss 4
	                                                    ADD_ENEMY_BULLET[ES_X#(es) + LEVELX#, ES_Y#(es), -2000, 0, 60, 1124, 1124, 10, 15, 18, 1, 1119, 1124, -180, 30, 34, 0]
	                                                    If ES_SHOOT_AI_TYPE(es) = 2
	                                                        ES_FIRE_TIME#(es) = ES_AGE#(es) + (0.2 + Rnd(2))
	                                                    End If
	                                                End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

			// Do we need to update the position of the smoke system
			If ES_HAS_SMOKE(es) = 1
				For si = 0 to 4
					If ES_SMOKE_INDEX(es, si) >= 0
						SMOKE_SYSTEM_X#(ES_SMOKE_INDEX(es, si)) = ES_X#(es) + ES_SMOKE_X_OFF(es, si)
						SMOKE_SYSTEM_Y#(ES_SMOKE_INDEX(es, si)) = ES_Y#(es) + ES_SMOKE_Y_OFF(es, si)
					End If
				Next si
			End If

			// Check collision with destructible terrain
			If LEVEL >= 4 and ES_ISBOSS(es) = 0
				t2 = Tile Value("view7", Int((ES_X#(es) + LEVELX#) / 64), Min(30, Max(0, Int(ES_Y#(es) / 64))))
				If t2 <> 0
					// Remove enemy
					ES_STATUS(es) = 0
					Bob Off es + 350
					Bob Off es + 400
					// Add explosion animation
					//[x#, y#, speed#, ex_size, count, xrange, yrange, play_debris, play_explosion]
					ADD_ES_EXPLOSION[ES_X#(es), ES_Y#(es), 6, ES_EXP_SIZE(es), ES_EXP_COUNT(es), 30, 30, 1, 1]
				End If
			End If

            // Remove when off screen
            If ES_X#(es) < -64
                ES_STATUS(es) = 0
                Bob Off es + 350
                Bob Off es + 400
            End If

        End If
    Next es
Return

DRAW_ENEMY_SHIPS:
    For es = 0 to MAX_ENEMY_SHIPS - 1
        If ES_STATUS(es) = 1

            // Draw hit frame
            If ES_ISHIT#(es) > 0
                Bob es + 350, ES_X#(es), ES_Y#(es), ES_HIT_FRAME#(es)
                Add ES_ISHIT#(es), -(30 * DELTA_TIME#)
            else
                Bob es + 350, ES_X#(es), ES_Y#(es), Int(ES_FRAME#(es))
            End If

            // Draw back burner
            Bob es + 400, ES_X#(es) + ES_BB_XOFF(es), ES_Y#(es) + ES_BB_YOFF(es), Int(ES_BB_FRAME#(es))

            // Next animation frame
            Add ES_BB_FRAME#(es), 0.5
            If Int(ES_BB_FRAME#(es)) > ES_BB_END_FRAME(es)
                ES_BB_FRAME#(es) = ES_BB_START_FRAME(es)
            End If
        End If
    Next es
Return

Procedure PLAY_AUDIO_SAMPLE[audioId, loopOn, vol]
    If audioId > 0
		{ Application.playAudio(vars.audioId, vars.loopOn, vars.vol ); }
    End If
End Proc

Procedure STOP_AUDIO_SAMPE[audioId]
	If audioId > 0
		{ Application.stopAudio(vars.audioId); }
	End If
End Proc

Procedure ADD_COLLECTABLE[colType, x#, y#]

    If colType > 0
        For ac = 0 to MAX_COLLECTS - 1
            If COL_STATUS(ac) = 0

                COL_STATUS(ac) = 1
                COL_X#(ac) = x#
                COL_Y#(ac) = y#
                COL_TYPE(ac) = colType

                If colType = 1                 // Shoot Rate Increase
                    COL_START_FRAME(ac) = 900
                    COL_END_FRAME(ac) = 904
                    COL_FRAME_SPEED(ac) = 10
                    COL_IFRAME#(ac) = COL_START_FRAME(ac)
                    COL_SAM_PLAY(ac) = 75
                Else
                    If colType = 2                 // Ship hit points restore
                        COL_START_FRAME(ac) = 905: COL_END_FRAME(ac) = 909: COL_FRAME_SPEED(ac) = 10: COL_IFRAME#(ac) = COL_START_FRAME(ac): COL_SAM_PLAY(ac) = 76
                    Else
                        If colType = 3                 // Destroy all
                            COL_START_FRAME(ac) = 910: COL_END_FRAME(ac) = 913: COL_FRAME_SPEED(ac) = 10: COL_IFRAME#(ac) = COL_START_FRAME(ac): COL_SAM_PLAY(ac) = 0
                        Else
                            If colType = 4                 // Shields
                                COL_START_FRAME(ac) = 914: COL_END_FRAME(ac) = 921: COL_FRAME_SPEED(ac) = 10: COL_IFRAME#(ac) = COL_START_FRAME(ac): COL_SAM_PLAY(ac) = SAM_PLAYER_SHIELD_UP
                            Else
                                If colType = 5                 // Player heath restore
                                    COL_START_FRAME(ac) = 922: COL_END_FRAME(ac) = 926: COL_FRAME_SPEED(ac) = 10: COL_IFRAME#(ac) = COL_START_FRAME(ac): COL_SAM_PLAY(ac) = 77
                                End If
                            End If
                        End If
                    End If
                End If
                // Exit loop
                Exit
            End If
        Next ac
    End If
End Proc

UPDATE_COLLECTABLES:
    // Check player collision with collectables
    If PLAYER_STATE = 0
        c = Bob Col (1, 300 to 300 + MAX_COLLECTS - 1)
        If c = 1
            For i = 0 to MAX_COLLECTS - 1
                If COL_STATUS(i) = 1
                    If col(i + 300) = true
                        Bob Off i + 300
                        PLAY_AUDIO_SAMPLE[COL_SAM_PLAY(i), false, 1]

                        If COL_TYPE(i) = 1                      // Increase fire rate
                            SHOOT_RATE = Max(5, SHOOT_RATE - 4) // Shoot X
                        Else
                            If COL_TYPE(i) = 2                  // Restore Hit Points
                                PLAYER_HIT_POINTS# = Min(93, PLAYER_HIT_POINTS# + 93)
                                Gosub UPDATE_HUD
                            Else
                                If COL_TYPE(i) = 3              // Kill all
                                    Gosub KILL_ALL_ENEMIES
                                Else
                                    If COL_TYPE(i) = 4          // Shields
                                        HAS_SHIELD = 1
                                        SHIELD_TIMER# = 0        // used to trigger the removal of the shield
                                        SHIELD_TIME# = 15       // Duration in seconds
                                    Else
                                        If COL_TYPE(i) = 5      // Restore Health and Hit Points
                                            PLAYER_HEALTH# = Min(94, PLAYER_HEALTH# + 93)
                                            PLAYER_HIT_POINTS# = Min(93, PLAYER_HIT_POINTS# + 93)
                                            Gosub UPDATE_HUD
                                        End If
                                    End If
                                End If
                            End If
                        End If
                        COL_STATUS(i) = 0
                        // Exit loop
                        Exit
                    End If
                End If
            Next i
        End If
    End If
Return

KILL_ALL_ENEMIES:
    For ke = 0 to MAX_GROUND_ENEMIES - 1
        If GE_STATUS(ke) = 1 and GE_HIT_POINTS(ke) > 0
            Bob Off ke + 450
            // Add explosion animation
            ADD_EXPLOSION[GE_X#(ke), GE_Y#(ke), 6, -1, 5, 100, 30, 1, 1, 1, 0]
            ADD_COLLECTABLE[GE_COLLECT_TYPE(ke), GE_X#(ke), GE_Y#(ke)]
            // Remove enemy
            GE_STATUS(ke) = 0
			// Update score
			Add PLAYER_SCORE, GE_SCORE_POINTS(ke)
			Add PLAYER_LEVEL_SCORE, GE_SCORE_POINTS(ke)
			// Remove smoke system
			If GE_HAS_SMOKE(ke) = 1 and GE_SMOKE_INDEX(ke) >= 0
				SMOKE_SYSTEM_STATUS(GE_SMOKE_INDEX(ke)) = 2
			End If
        End If
    Next ke

    For ke = 0 to MAX_ENEMY_SHIPS - 1
        If ES_STATUS(ke) = 1 and ES_HIT_POINTS(ke) > 0
            Bob Off ke + 350
            Bob Off ke + 400
            // Add explosion animation
            ADD_EXPLOSION[GE_X#(ke), GE_Y#(ke), 6, -1, 5, 100, 30, 1, 1, 0]
            // Remove enemy
            ES_STATUS(ke) = 0
			// Update score
			Add PLAYER_SCORE, ES_SCORE_POINTS(ke)
			Add PLAYER_LEVEL_SCORE, ES_SCORE_POINTS(ke)
            Inc PLAYER_KILL_COUNT
        End If
    Next ke

    Gosub UPDATE_HUD
Return

DRAW_COLLECTABLES:
    For ac = 0 to MAX_COLLECTS - 1
        // Is the collectable live
        If COL_STATUS(ac) = 1
            // Put the bob on screen
            Bob ac + 300, COL_X#(ac) - LEVELX#, COL_Y#(ac), Int(COL_IFRAME#(ac))
			Bob Scale ac + 300, 1.4, 1.4
            // Increment the frame
            Add COL_IFRAME#(ac), COL_FRAME_SPEED(ac) * DELTA_TIME#
            If Int(COL_IFRAME#(ac)) > COL_END_FRAME(ac): COL_IFRAME#(ac) = COL_START_FRAME(ac): End If
        End If
    Next ac
Return

Procedure ADD_GROUND_ENEMY[type, x, y]
    For i = 0 to MAX_GROUND_ENEMIES - 1
        If GE_STATUS(i) = 0

			GE_SMOKE_INDEX(i) = -1
			GE_ISHIT#(i) = 0
			GE_HAS_SMOKE(i) = 0
			GE_ROTATE(i) = 0

            // Techno Lizard
            If type = 139
                GE_STATUS(i) = 1
                GE_TYPE(i) = 1
                GE_HIT_SAM(i) = SAM_PLAYER_HIT_ENEMY
                GE_FIRE_SAM(i) = 0
                GE_HIT_POINTS(i) = 25                               // amount of hits to destroy
                GE_X#(i) = x * 64 + (LEVELX# mod 64) + 64
                GE_Y#(i) = (y * 64) - 50
                GE_FRAME#(i) = 710
                GE_START_FRAME#(i) = GE_FRAME#(i)
                GE_COLLECT_TYPE(i) = 0
                GE_HIT_FRAME(i) = 844
				GE_HAS_SMOKE(i) = 1
				GE_SMOKE_X_OFF(i) = 0
				GE_SMOKE_Y_OFF(i) = 100
				GE_SCORE_POINTS(i) = 2500

                // Current Step
                GE_STEP(i) = 0
                // Current Animation
                GE_ANIM(i) = 0

                GE_STEPS(i, 0) = 10                                 // "MOVER"
                GE_STEP_PROP1#(i, 0) = GE_X#(i) + 100 + RND(40)     // Target X
                GE_STEP_PROP2#(i, 0) = 20 + RND(60)                 // Speed
                GE_STEP_PROP3#(i, 0) = 0                            // Animation

                GE_STEPS(i, 1) = 5                                  // "PLAYSOUND"
                GE_STEP_PROP1#(i, 1) = 0                            // Animation
                GE_STEP_PROP2#(i, 1) = SAM_GE_LIZARD_ATTACK         // Play sample

                GE_STEPS(i, 2) = 12                                 // "PLAYONCE"
                GE_STEP_PROP1#(i, 2) = 1                            // Animation

                GE_STEPS(i, 3) = 11                                 // "MOVEL"
                GE_STEP_PROP1#(i, 3) = GE_X#(i)                     // Target X
                GE_STEP_PROP2#(i, 3) = 20 + RND(60)                 // Speed
                GE_STEP_PROP3#(i, 3) = 0                            // Animation

                GE_STEPS(i, 4) = 5                                  //"PLAYSOUND"
                GE_STEP_PROP1#(i, 4) = 0                            // Animation
                GE_STEP_PROP2#(i, 4) = SAM_GE_LIZARD_ATTACK         // Play sample

                GE_STEPS(i, 5) = 12                                 //"PLAYONCE"
                GE_STEP_PROP1#(i, 5) = 1           // Animation

                GE_STEPS(i, 6) = 15                // "GOTO"
                GE_STEP_PROP1#(i, 6) = 0           // Animation

                // Animations
                GE_ANIM_TYPE$(i, 0) = "BOUNCE"
                GE_ANIM_PROP1#(i, 0) = 710          // Start frame
                GE_ANIM_PROP2#(i, 0) = 712          // End Frame
                GE_ANIM_PROP3#(i, 0) = 12           // Speed

                GE_ANIM_TYPE$(i, 1) = "PLAYONCE"
                GE_ANIM_PROP1#(i, 1) = 713          // Start frame
                GE_ANIM_PROP2#(i, 1) = 718          // End Frame
                GE_ANIM_PROP3#(i, 1) = 20           // Speed

            End If

            // Door/Rocket
            If type = 140 or type = 142
                GE_STATUS(i) = 1
                GE_TYPE(i) = 2
                GE_HIT_SAM(i) = 0
                GE_FIRE_SAM(i) = SAM_GE_ROCKET_FIRE
                GE_HIT_POINTS(i) = 500                      // amount of hits to destroy
                GE_X#(i) = x * 64 + (LEVELX# mod 64) + 32
                GE_Y#(i) = (y * 64)
                GE_FRAME#(i) = 719
                GE_START_FRAME#(i) = GE_FRAME#(i)
                GE_COLLECT_TYPE(i) = 0
                GE_HIT_FRAME(i) = 719
				GE_SCORE_POINTS(i) = 0

                // Current Step
                GE_STEP(i) = 0
                // Current Animation
                GE_ANIM(i) = 0

                GE_STEPS(i, 0) = 13                         // "DETECT"
                GE_STEP_PROP1#(i, 0) = 200                  // Distance
                GE_STEP_PROP2#(i, 0) = 0                    // Animation

                GE_STEPS(i, 1) = 5                          // "PLAYSOUND"
                GE_STEP_PROP1#(i, 1) = 0                    // Animation
                GE_STEP_PROP2#(i, 1) = SAM_GE_ROCKET_OPEN   // Play sample

                GE_STEPS(i, 2) = 12                         //"PLAYONCE"
                GE_STEP_PROP1#(i, 2) = 1                    // Animation

                GE_STEPS(i, 3) = 13                         //"DETECT"
                GE_STEP_PROP1#(i, 3) = 40                   // Distance
                GE_STEP_PROP2#(i, 3) = 0                    // Animation

                GE_STEPS(i, 4) = 16                // "FIRE"
                GE_STEP_PROP1#(i, 4) = 0           // Animation
                GE_STEP_PROP2#(i, 4) = 0           // Speed X

        		GE_STEP_PROP3#(i, 4) = -900        // Speed Y
                GE_STEP_PROP4#(i, 4) = 725         // Start Frame
                GE_STEP_PROP5#(i, 4) = 728         // End Frame
                GE_STEP_PROP6#(i, 4) = 60          // Frame Speed
                GE_STEP_PROP7#(i, 4) = 2           // Hit Damage to player
                GE_STEP_PROP8#(i, 4) = 16          // Explosion Type
                GE_STEP_PROP9#(i, 4) = 25          // Explosion animation speed
                GE_STEP_PROP10#(i, 4) = 10         // Time before it is live
                GE_STEP_PROP11#(i, 4) = 725        // Muzzel start frame
                GE_STEP_PROP12#(i, 4) = 725        // Muzzel end frame
                GE_STEP_PROP13#(i, 4) = 0          // X Offset
                GE_STEP_PROP14#(i, 4) = 0          // Y Offset

                GE_STEPS(i, 5) = 17                // "WAITRANDOM"
                GE_STEP_PROP1#(i, 5) = 0           // Animation
                GE_STEP_PROP2#(i, 5) = 0           // Counter
                GE_STEP_PROP3#(i, 5) = 5           // Duration
                GE_STEP_PROP4#(i, 5) = 25          // Random

                GE_STEPS(i, 6) = 13                // "DETECT"
                GE_STEP_PROP1#(i, 6) = 40          // Distance
                GE_STEP_PROP2#(i, 6) = 0           // Animation

                If type = 140
                    GE_STEPS(i, 6) = 15            // "GOTO"
                    GE_STEP_PROP1#(i, 6) = 3       // Step number
                Else
                    GE_STEPS(i, 6) = 14            // "STOP"
                    GE_STEP_PROP1#(i, 6) = 0       // Animation
                End If

                // Animations
                GE_ANIM_TYPE$(i, 0) = "STOP"

                GE_ANIM_TYPE$(i, 1) = "PLAYONCE"
                GE_ANIM_PROP1#(i, 1) = 719          // Start frame
                GE_ANIM_PROP2#(i, 1) = 724          // End Frame
                GE_ANIM_PROP3#(i, 1) = 12           // Speed
            End If

            // Plasma Cannon
            If type = 141 or type = 143
                GE_STATUS(i) = 1
                GE_TYPE(i) = 3
                GE_HIT_SAM(i) = SAM_PLAYER_HIT_ENEMY
                GE_FIRE_SAM(i) = SAM_GE_PLASMA_FIRE
                GE_HIT_POINTS(i) = 15                        // amount of hits to destroy
                GE_X#(i) = x * 64 + (LEVELX# mod 64) + 32
                GE_Y#(i) = y * 64 + 32
                GE_FRAME#(i) = 741
                GE_START_FRAME#(i) = GE_FRAME#(i)
                GE_COLLECT_TYPE(i) = 0
                GE_HIT_FRAME(i) = 845
				GE_HAS_SMOKE(i) = 1
				GE_SMOKE_X_OFF(i) = 0
				GE_SMOKE_Y_OFF(i) = 0
				GE_SCORE_POINTS(i) = 1500

                // Current Step
                GE_STEP(i) = 0
                // Current Animation
                GE_ANIM(i) = 0

                GE_STEPS(i, 0) = 19                         // "DISTANCE"
                GE_STEP_PROP1#(i, 0) = 0                    // Animation

                If type = 141
                    GE_STEP_PROP2#(i, 0) = 70               // Distance to trigger next step
                Else
                    GE_STEP_PROP2#(i, 0) = 300              // Distance to trigger next step
                End If

                GE_STEPS(i, 1) = 20                // "FIREATPLAYER"
                GE_STEP_PROP1#(i, 1) = 0           // Animation
                GE_STEP_PROP2#(i, 1) = 0           // Speed X
                GE_STEP_PROP3#(i, 1) = 0           // Speed Y
                GE_STEP_PROP4#(i, 1) = 743         // Start Frame
                GE_STEP_PROP5#(i, 1) = 750         // End Frame
                GE_STEP_PROP6#(i, 1) = 60          // Frame Speed
                GE_STEP_PROP7#(i, 1) = 5           // Hit Damage to player
                GE_STEP_PROP8#(i, 1) = 4           // Explosion Type
                GE_STEP_PROP9#(i, 1) = 15          // Explosion animation speed
                GE_STEP_PROP10#(i, 1) = 1          // Time before it is live
                GE_STEP_PROP11#(i, 1) = 743        // Muzzel start frame
                GE_STEP_PROP12#(i, 1) = 743        // Muzzel end frame
                GE_STEP_PROP13#(i, 1) = 0          // X Offset
                GE_STEP_PROP14#(i, 1) = -40        // Y Offset

                GE_STEPS(i, 2) = 17                // "WAITRANDOM"
                GE_STEP_PROP1#(i, 2) = 0           // Animation
                GE_STEP_PROP2#(i, 2) = 0           // Counter

                If type = 141
                    GE_STEP_PROP3#(i, 2) = 100      // Duration
                Else
                    GE_STEP_PROP3#(i, 2) = 30       // Duration
                End If

                GE_STEP_PROP4#(i, 2) = 100          // Random value

                GE_STEPS(i, 3) = 15                 //"GOTO"
                GE_STEP_PROP1#(i, 3) = 0            // Step number

                // Animations
                GE_ANIM_TYPE$(i, 0) = "POINTATPLAYER"
                GE_ANIM_PROP1#(i, 0) = 741          // Left
                GE_ANIM_PROP2#(i, 0) = 742          // Up
                GE_ANIM_PROP3#(i, 0) = 740          // Right
            End If

            // Tank
            If type = 144 or type = 152
                GE_STATUS(i) = 1
                GE_TYPE(i) = 4
                GE_HIT_SAM(i) = SAM_PLAYER_HIT_ENEMY
                GE_FIRE_SAM(i) = SAM_GE_TANK_FIRE
                GE_HIT_POINTS(i) = 25                       // amount of hits to destroy
                GE_X#(i) = x * 64 + (LEVELX# mod 64) + 32
                GE_Y#(i) = (y * 64) + 38
                GE_FRAME#(i) = 766
                GE_START_FRAME#(i) = GE_FRAME#(i)
                GE_COLLECT_TYPE(i) = 0
                GE_HIT_FRAME(i) = 846
				GE_HAS_SMOKE(i) = 1
				GE_SMOKE_X_OFF(i) = 0
				GE_SMOKE_Y_OFF(i) = 0
				GE_SCORE_POINTS(i) = 2500

                If type = 152
                    GE_COLLECT_TYPE(i) = 4                  // Shields
                End If

                // Current Step
                GE_STEP(i) = 0
                // Current Animation
                GE_ANIM(i) = 0

                GE_STEPS(i, 0) = 6                          // "DETECTX"
                GE_STEP_PROP1#(i, 0) = 100                  // Distance
                GE_STEP_PROP2#(i, 0) = 1                    // Animation

                GE_STEPS(i, 1) = 5                          //"PLAYSOUND"
                GE_STEP_PROP1#(i, 1) = 0                    // Animation
                GE_STEP_PROP2#(i, 1) = SAM_GE_TANK_START    // Play sample

                GE_STEPS(i, 2) = 9                          //"MOVETOTARGET"
                GE_STEP_PROP1#(i, 2) = GE_X#(i) + 500       // Target X
                GE_STEP_PROP2#(i, 2) = 1                    // Max Speed
                GE_STEP_PROP3#(i, 2) = 0                    // Animation
                GE_STEP_PROP4#(i, 2) = GE_Y#(i)             // Target Y

                GE_STEPS(i, 3) = 7                 // "DISTANCEX"
                GE_STEP_PROP1#(i, 3) = 600         // Distance
                GE_STEP_PROP2#(i, 3) = 1           // Animation

                GE_STEPS(i, 4) = 16                // "FIRE"
                GE_STEP_PROP1#(i, 4) = 1           // Animation
                GE_STEP_PROP2#(i, 4) = 400         // Speed X
                GE_STEP_PROP3#(i, 4) = -400        // Speed Y
                GE_STEP_PROP4#(i, 4) = 775         // Start Frame
                GE_STEP_PROP5#(i, 4) = 775         // End Frame
                GE_STEP_PROP6#(i, 4) = 60          // Frame Speed
                GE_STEP_PROP7#(i, 4) = 2           // Hit Damage to player
                GE_STEP_PROP8#(i, 4) = 3           // Explosion Type
                GE_STEP_PROP9#(i, 4) = 15          // Explosion animation speed
                GE_STEP_PROP10#(i, 4) = 1          // Time before it is live
                GE_STEP_PROP11#(i, 4) = 770        // Muzzel start frame
                GE_STEP_PROP12#(i, 4) = 774        // Muzzel end frame
                GE_STEP_PROP13#(i, 4) = 73         // X Offset
                GE_STEP_PROP14#(i, 4) = -117       // Y Offset

                GE_STEPS(i, 5) = 17                // "WAITRANDOM"
                GE_STEP_PROP1#(i, 5) = 1           // Animation
                GE_STEP_PROP2#(i, 5) = 0           // Counter
                GE_STEP_PROP3#(i, 5) = 10          // Duration
                GE_STEP_PROP4#(i, 5) = 10          // Duration

                GE_STEPS(i, 6) = 15                // "GOTO"
                GE_STEP_PROP1#(i, 6) = 3           // Step number

                // Animations
                GE_ANIM_TYPE$(i, 0) = "BOUNCE"
                GE_ANIM_PROP1#(i, 0) = 766          // Start frame
                GE_ANIM_PROP2#(i, 0) = 769          // End Frame
                GE_ANIM_PROP3#(i, 0) = 12           // Speed

                GE_ANIM_TYPE$(i, 1) = "WAIT"
                GE_ANIM_PROP1#(i, 1) = 766          // Frame
            End If

            // Metoer
            If type = 145 or type = 149 or type = 150 or type = 151 or type = 153 or type = 154
                GE_STATUS(i) = 1
                GE_TYPE(i) = 5
                GE_HIT_SAM(i) = SAM_PLAYER_HIT_TERRAIN
                GE_FIRE_SAM(i) = 0
                GE_HIT_POINTS(i) = 10                   // amount of hits to destroy
                GE_X#(i) = x * 64
                GE_Y#(i) = y * 64 + 32
                GE_FRAME#(i) = 788
                GE_START_FRAME#(i) = GE_FRAME#(i)
                GE_COLLECT_TYPE(i) = 0
                GE_HIT_FRAME(i) = 843
				GE_SCORE_POINTS(i) = 1000

                If type = 149
                    GE_COLLECT_TYPE(i) = 1          // Shoot X Collectable
                Else
                    If type = 150
                        GE_COLLECT_TYPE(i) = 2      // Hit Points
                    Else
                        If type = 151
                            GE_COLLECT_TYPE(i) = 3  // Destroy All
                        Else
                            If type = 153
                                GE_COLLECT_TYPE(i) = 5  // Health
                            else
                                If type = 154
                                    GE_COLLECT_TYPE(i) = 4  // Shields
                                End If
                            End If
                        End If
                    End If
                End If

                // Current Step
                GE_STEP(i) = 0
                // Current Animation
                GE_ANIM(i) = 0

                GE_STEPS(i, 0) = 11                      // "MOVEL"
                GE_STEP_PROP1#(i, 0) = GE_X#(i) - 2000   // Target X
                GE_STEP_PROP2#(i, 0) = 50 + Rnd(150)     // Min Speed
                GE_STEP_PROP3#(i, 0) = 0                 // Animation

                // Animations
                GE_ANIM_TYPE$(i, 0) = "REPEAT"
                GE_ANIM_PROP1#(i, 0) = 788               // Start frame
                GE_ANIM_PROP2#(i, 0) = 793               // End Frame
                GE_ANIM_PROP3#(i, 0) = 5 + rnd(5)        // Speed
            End If

            // Bomb
            If type = 146
                GE_STATUS(i) = 1
                GE_TYPE(i) = 6
                GE_HIT_SAM(i) = SAM_PLAYER_HIT_ENEMY
                GE_FIRE_SAM(i) = 0
                GE_HIT_POINTS(i) =  1                   // Hits to destroy
                GE_X#(i) = x * 64
                GE_Y#(i) = y * 64
                GE_FRAME#(i) = 794
                GE_START_FRAME#(i) = GE_FRAME#(i)
                GE_COLLECT_TYPE(i) = 0
                GE_HIT_FRAME(i) = 794
				GE_SCORE_POINTS(i) = 0

                // Current Step
                GE_STEP(i) = 0
                // Current Animation
                GE_ANIM(i) = 0

                GE_STEPS(i, 0) = 18                     // "DISTANCE_RADIUS"
                GE_STEP_PROP1#(i, 0) = 0                // Animation
                GE_STEP_PROP2#(i, 0) = 1                // Distance to trigger next step

                GE_STEPS(i, 1) = 4                      // "EXPLOSION_DAMAGE"
                GE_STEP_PROP1#(i, 1) = 20               // speed
                GE_STEP_PROP2#(i, 1) = 4                // type
                GE_STEP_PROP3#(i, 1) = 20               // damage amount to player

                GE_STEPS(i, 2) = 14                     // "STOP"
                GE_STEP_PROP1#(i, 2) = 0                // Animation

                // Animations
                GE_ANIM_TYPE$(i, 0) = "WAIT"
                GE_ANIM_PROP1#(i, 0) = 794              // frame
            End If

            // Laser cannon right
            If type = 147
                GE_STATUS(i) = 1
                GE_TYPE(i) = 7
                GE_HIT_SAM(i) = SAM_PLAYER_HIT_ENEMY
                GE_FIRE_SAM(i) = SAM_GE_LASER_FIRE
                GE_HIT_POINTS(i) = 30                       // amount of hits to destroy
                GE_X#(i) = x * 64 + (LEVELX# mod 64) + 64
                GE_Y#(i) = (y * 64) + 32
                GE_FRAME#(i) = 808
                GE_START_FRAME#(i) = GE_FRAME#(i)
                GE_COLLECT_TYPE(i) = 0
                GE_HIT_FRAME(i) = 847
				GE_HAS_SMOKE(i) = 1
				GE_SMOKE_X_OFF(i) = 0
				GE_SMOKE_Y_OFF(i) = 0
				GE_SCORE_POINTS(i) = 3000

                // Current Step
                GE_STEP(i) = 0

                // Current Animation
                GE_ANIM(i) = 0

                GE_STEPS(i, 0) = 7                          // "DISTANCEX"
                GE_STEP_PROP1#(i, 0) = 600                  // Distance
                GE_STEP_PROP2#(i, 0) = 0                    // Animation

                GE_STEPS(i, 1) = 5                          // "PLAYSOUND"
                GE_STEP_PROP1#(i, 1) = 0                    // Animation
                GE_STEP_PROP2#(i, 1) = SAM_GE_LASER_START   // Play sample

                GE_STEPS(i, 2) = 12                // "PLAYONCE"
                GE_STEP_PROP1#(i, 2) = 1           // Animation

                GE_STEPS(i, 3) = 16                // "FIRE"
                GE_STEP_PROP1#(i, 3) = 0           // Animation
                GE_STEP_PROP2#(i, 3) = 800         // Speed X
                GE_STEP_PROP3#(i, 3) = -800        // Speed Y
                GE_STEP_PROP4#(i, 3) = 818         // Start Frame
                GE_STEP_PROP5#(i, 3) = 818         // End Frame
                GE_STEP_PROP6#(i, 3) = 60          // Frame Speed
                GE_STEP_PROP7#(i, 3) = 5           // Hit Damage to player
                GE_STEP_PROP8#(i, 3) = 0           // Explosion Type
                GE_STEP_PROP9#(i, 3) = 15          // Explosion animation speed
                GE_STEP_PROP10#(i, 3) = 1          // Time before it is live
                GE_STEP_PROP11#(i, 3) = 818        // Muzzel start frame
                GE_STEP_PROP12#(i, 3) = 818        // Muzzel end frame
                GE_STEP_PROP13#(i, 3) = 120        // X Offset
                GE_STEP_PROP14#(i, 3) = -150       // Y Offset

                GE_STEPS(i, 4) = 17                // "WAITRANDOM"
                GE_STEP_PROP1#(i, 4) = 0           // Animation
                GE_STEP_PROP2#(i, 4) = 0           // Counter
                GE_STEP_PROP3#(i, 4) = 20          // Duration
                GE_STEP_PROP4#(i, 4) = 30          // Random

                GE_STEPS(i, 5) = 15                // "GOTO"
                GE_STEP_PROP1#(i, 5) = 0           // Step number

                // Animations
                GE_ANIM_TYPE$(i, 0) = "WAIT"
                GE_ANIM_PROP1#(i, 0) = 808

                GE_ANIM_TYPE$(i, 1) = "PLAYONCE"
                GE_ANIM_PROP1#(i, 1) = 809          // Start frame
                GE_ANIM_PROP2#(i, 1) = 817          // End Frame
                GE_ANIM_PROP3#(i, 1) = 12           // Speed
            End If

            // Laser cannon left
            If type = 148 or type = 168
                GE_STATUS(i) = 1
                GE_TYPE(i) = 8
                GE_HIT_SAM(i) = SAM_PLAYER_HIT_ENEMY
                GE_FIRE_SAM(i) = SAM_GE_LASER_FIRE
                GE_HIT_POINTS(i) = 30                       // amount of hits to destroy
                GE_X#(i) = x * 64 + (LEVELX# mod 64) + 64
                GE_Y#(i) = (y * 64) + 32
                GE_FRAME#(i) = 819
                GE_START_FRAME#(i) = GE_FRAME#(i)
                GE_COLLECT_TYPE(i) = 0
                GE_HIT_FRAME(i) = 848
				GE_HAS_SMOKE(i) = 1
				GE_SMOKE_X_OFF(i) = 0
				GE_SMOKE_Y_OFF(i) = 0
				GE_SCORE_POINTS(i) = 3000

                If type = 168
                    GE_COLLECT_TYPE(i) = 4  // Shields
                End If

                // Current Step
                GE_STEP(i) = 0

                // Current Animation
                GE_ANIM(i) = 0

                GE_STEPS(i, 0) = 8                          // "DISTANCEXLEFT"
                GE_STEP_PROP1#(i, 0) = 600                  // Distance
                GE_STEP_PROP2#(i, 0) = 0                    // Animation

                GE_STEPS(i, 1) = 5                          //"PLAYSOUND"
                GE_STEP_PROP1#(i, 1) = 0                    // Animation
                GE_STEP_PROP2#(i, 1) = SAM_GE_LASER_START   // Play sample

                GE_STEPS(i, 2) = 12                // "PLAYONCE"
                GE_STEP_PROP1#(i, 2) = 1           // Animation

                GE_STEPS(i, 3) = 16                // "FIRE"
                GE_STEP_PROP1#(i, 3) = 0           // Animation
                GE_STEP_PROP2#(i, 3) = -800        // Speed X
                GE_STEP_PROP3#(i, 3) = -800        // Speed Y
                GE_STEP_PROP4#(i, 3) = 829         // Start Frame
                GE_STEP_PROP5#(i, 3) = 829         // End Frame
                GE_STEP_PROP6#(i, 3) = 60          // Frame Speed
                GE_STEP_PROP7#(i, 3) = 5           // Hit Damage to player
                GE_STEP_PROP8#(i, 3) = 0           // Explosion Type
                GE_STEP_PROP9#(i, 3) = 15          // Explosion animation speed
                GE_STEP_PROP10#(i, 3) = 1          // Time before it is live
                GE_STEP_PROP11#(i, 3) = 829        // Muzzel start frame
                GE_STEP_PROP12#(i, 3) = 829        // Muzzel end frame
                GE_STEP_PROP13#(i, 3) = -120       // X Offset
                GE_STEP_PROP14#(i, 3) = -150       // Y Offset

                GE_STEPS(i, 4) = 17                // "WAITRANDOM"
                GE_STEP_PROP1#(i, 4) = 0           // Animation
                GE_STEP_PROP2#(i, 4) = 0           // Counter
                GE_STEP_PROP3#(i, 4) = 20          // Duration
                GE_STEP_PROP4#(i, 4) = 30          // Random

                GE_STEPS(i, 5) = 15                // "GOTO"
                GE_STEP_PROP1#(i, 5) = 0           // Step number

                // Animations
                GE_ANIM_TYPE$(i, 0) = "WAIT"
                GE_ANIM_PROP1#(i, 0) = 819

                GE_ANIM_TYPE$(i, 1) = "PLAYONCE"
                GE_ANIM_PROP1#(i, 1) = 820          // Start frame
                GE_ANIM_PROP2#(i, 1) = 828          // End Frame
                GE_ANIM_PROP3#(i, 1) = 12           // Speed
            End If

            // KAMIKAZE
            If type = 155
                GE_STATUS(i) = 1
                GE_TYPE(i) = 9
                GE_HIT_SAM(i) = SAM_PLAYER_HIT_ENEMY
                GE_FIRE_SAM(i) = 0
                GE_HIT_POINTS(i) = 1                       // amount of hits to destroy
                GE_X#(i) = x * 64 + (LEVELX# mod 64) + 32
                GE_Y#(i) = (y * 64) + 32
                GE_FRAME#(i) = 830
                GE_START_FRAME#(i) = GE_FRAME#(i)
                GE_COLLECT_TYPE(i) = 0
                GE_HIT_FRAME(i) = 830
				GE_SCORE_POINTS(i) = 100

                // Current Step
                GE_STEP(i) = 0

                // Current Animation
                GE_ANIM(i) = 0

                GE_STEPS(i, 0) = 3                         // TRIGGERXPOSITION
                GE_STEP_PROP1#(i, 0) = 10                  // X Position
                GE_STEP_PROP2#(i, 0) = 0                   // Animation

                GE_STEPS(i, 1) = 5                         // "PLAYSOUND"
                GE_STEP_PROP1#(i, 1) = 0                   // Animation
                GE_STEP_PROP2#(i, 1) = SAM_SHIP_FLYBY      // Play sample

                GE_STEPS(i, 2) = 2                         // FLYTILLDEAD
                GE_STEP_PROP1#(i, 2) = 1                   // Animation
                GE_STEP_PROP2#(i, 2) = 1200                // X Speed
                GE_STEP_PROP3#(i, 2) = 5                   // Player damage

                GE_STEPS(i, 3) = 5                         // "PLAYSOUND"
                GE_STEP_PROP1#(i, 3) = 3                   // Animation
                GE_STEP_PROP2#(i, 3) = 53                  // Play sample

                GE_STEPS(i, 4) = 12                        // "PLAYONCE"
                GE_STEP_PROP1#(i, 4) = 2                   // Animation

                GE_STEPS(i, 5) = 1                         // REMOVE

                // Animations
                GE_ANIM_TYPE$(i, 0) = "INVISIBLE"

                GE_ANIM_TYPE$(i, 1) = "BOUNCE"
                GE_ANIM_PROP1#(i, 1) = 830          // Start frame
                GE_ANIM_PROP2#(i, 1) = 833          // End Frame
                GE_ANIM_PROP3#(i, 1) = 12           // Speed

                GE_ANIM_TYPE$(i, 2) = "PLAYONCE"
                GE_ANIM_PROP1#(i, 2) = 834          // Start frame
                GE_ANIM_PROP2#(i, 2) = 842          // End Frame
                GE_ANIM_PROP3#(i, 2) = 12           // Speed

                GE_ANIM_TYPE$(i, 3) = "WAIT"
                GE_ANIM_PROP1#(i, 3) = 830

            End If

			// Door/Rocket Above
            If type = 201
                GE_STATUS(i) = 1
                GE_TYPE(i) = 2
                GE_HIT_SAM(i) = 0
                GE_FIRE_SAM(i) = SAM_GE_ROCKET_FIRE
                GE_HIT_POINTS(i) = 500                      // amount of hits to destroy
                GE_X#(i) = x * 64 + (LEVELX# mod 64) + 32
                GE_Y#(i) = (y * 64) + 50
                GE_FRAME#(i) = 719
                GE_START_FRAME#(i) = GE_FRAME#(i)
                GE_COLLECT_TYPE(i) = 0
                GE_HIT_FRAME(i) = 719
				GE_ROTATE(i) = 180
				GE_SCORE_POINTS(i) = 0

                // Current Step
                GE_STEP(i) = 0
                // Current Animation
                GE_ANIM(i) = 0

                GE_STEPS(i, 0) = 21                         // "DETECT PLAYER BELOW"
                GE_STEP_PROP1#(i, 0) = 200                  // Distance
                GE_STEP_PROP2#(i, 0) = 0                    // Animation

                GE_STEPS(i, 1) = 5                          // "PLAYSOUND"
                GE_STEP_PROP1#(i, 1) = 0                    // Animation
                GE_STEP_PROP2#(i, 1) = SAM_GE_ROCKET_OPEN   // Play sample

                GE_STEPS(i, 2) = 12                         //"PLAYONCE"
                GE_STEP_PROP1#(i, 2) = 1                    // Animation

                GE_STEPS(i, 3) = 21                         //"DETECT PLAYER BELOW"
                GE_STEP_PROP1#(i, 3) = 40                   // Distance
                GE_STEP_PROP2#(i, 3) = 0                    // Animation

                GE_STEPS(i, 4) = 16                // "FIRE"
                GE_STEP_PROP1#(i, 4) = 0           // Animation
                GE_STEP_PROP2#(i, 4) = 0           // Speed X

        		GE_STEP_PROP3#(i, 4) = 900         // Speed Y
                GE_STEP_PROP4#(i, 4) = 725         // Start Frame
                GE_STEP_PROP5#(i, 4) = 728         // End Frame
                GE_STEP_PROP6#(i, 4) = 60          // Frame Speed
                GE_STEP_PROP7#(i, 4) = 2           // Hit Damage to player
                GE_STEP_PROP8#(i, 4) = 16          // Explosion Type
                GE_STEP_PROP9#(i, 4) = 25          // Explosion animation speed
                GE_STEP_PROP10#(i, 4) = 10         // Time before it is live
                GE_STEP_PROP11#(i, 4) = 725        // Muzzel start frame
                GE_STEP_PROP12#(i, 4) = 725        // Muzzel end frame
                GE_STEP_PROP13#(i, 4) = 0          // X Offset
                GE_STEP_PROP14#(i, 4) = -50        // Y Offset

                GE_STEPS(i, 5) = 17                // "WAITRANDOM"
                GE_STEP_PROP1#(i, 5) = 0           // Animation
                GE_STEP_PROP2#(i, 5) = 0           // Counter
                GE_STEP_PROP3#(i, 5) = 5           // Duration
                GE_STEP_PROP4#(i, 5) = 25          // Random

                GE_STEPS(i, 6) = 21                // "DETECT PLAYER BELOW"
                GE_STEP_PROP1#(i, 6) = 40          // Distance
                GE_STEP_PROP2#(i, 6) = 0           // Animation

                GE_STEPS(i, 6) = 15            	   // "GOTO"
                GE_STEP_PROP1#(i, 6) = 3       	   // Step number

                // Animations
                GE_ANIM_TYPE$(i, 0) = "STOP"

                GE_ANIM_TYPE$(i, 1) = "PLAYONCE"
                GE_ANIM_PROP1#(i, 1) = 719          // Start frame
                GE_ANIM_PROP2#(i, 1) = 724          // End Frame
                GE_ANIM_PROP3#(i, 1) = 12           // Speed
            End If

            // Exit loop here
            Exit
        End If
    Next i
End Proc

UPDATE_GROUND_ENEMIES:

    For i = 0 to MAX_GROUND_ENEMIES - 1

        If GE_STATUS(i) = 1
            current_step = GE_STEP(i)
            s = GE_STEPS(i, current_step)

            // 1 = REMOVE
            If s = 1
                GE_STATUS(i) = 0
                Bob Off i + 450
				If GE_HAS_SMOKE(i) = 1 and GE_SMOKE_INDEX(i) >= 0
					SMOKE_SYSTEM_STATUS(GE_SMOKE_INDEX(i)) = 2
				End If
            End If

            // 2 = FLYTILLDEAD
            If s = 2
                GE_ANIM(i) = Int(GE_STEP_PROP1#(i, current_step))
                GE_X#(i) = GE_X#(i) + GE_STEP_PROP2#(i, current_step) * DELTA_TIME#

                // Check colission with terrain
                t = Tile Value("view1", Int((GE_X#(i) + 32) / 64), Max(0, Int(GE_Y#(i) / 64)))
				t7 = 0
				If LEVEL >= 4
					t7 = Tile Value("view7", Int((GE_X#(i) + 32) / 64), Max(0, Int(GE_Y#(i) / 64)))
					If t7 <> 0
						SET_DAMAGED[Int((GE_X#(i) + 32) / 64), Max(0, Int(GE_Y#(i) / 64))]
					End If
				End If

                If t <> 0 or t7 <> 0
                    Inc GE_STEP(i)
                else
                    // Check collision with player
                    pc = Bob Col (1, i + 450 to i + 450)
                    If pc = 1
                        Inc GE_STEP(i)
                        //Only damage if player has no shield
                        If HAS_SHIELD = 0
                            DAMAGE_AMOUNT# = GE_STEP_PROP3#(i, current_step)
                            Gosub PLAYER_TAKE_DAMAGE
                        End If
                    End If
                End if
            End If

            // 3 = TRIGGERXPOSITION
            If s = 3
                If GE_X#(i) - LEVELX# <= Int(GE_STEP_PROP1#(i, current_step))
                    Inc GE_STEP(i)
                End If
            End If

            // 4 = EXPLOSION_DAMAGE
            If s = 4
                Bob Off i + 450
                GE_STATUS(i) = 0
                ADD_EXPLOSION[GE_X#(i), GE_Y#(i), Int(GE_STEP_PROP1#(i, current_step)), Int(GE_STEP_PROP2#(i, current_step)), 1, 0, 0, 0, 1, 0, 0]
                Inc GE_STEP(i)
                // Only damage if player has no shield
                If HAS_SHIELD = 0
                    DAMAGE_AMOUNT# = GE_STEP_PROP4#(i, current_step)
                    Gosub PLAYER_TAKE_DAMAGE
                End If
            End If

            // 5 = PLAYSOUND
            If s = 5
                // Set the animation for this step
                GE_ANIM(i) = Int(GE_STEP_PROP1#(i, current_step))
                PLAY_AUDIO_SAMPLE[Int(GE_STEP_PROP2#(i, current_step)), false, 0.7]
                Inc GE_STEP(i)
            End If

            // 6 = DETECTX
            If s = 6
                // Set the animation for this step
                GE_ANIM(i) = Int(GE_STEP_PROP2#(i, current_step))
                If PLAYER_STATE = 0
                    distance = GE_STEP_PROP1#(i, current_step)
                    If PX# + LEVELX# - GE_X#(i) > distance and PY# < GE_Y#(i)
                        Inc GE_STEP(i)
                    End If
                End If
            End If

            // 7 = DISTANCEX
            If s = 7
                // Set the animation for this step
                GE_ANIM(i) = Int(GE_STEP_PROP2#(i, current_step))
                If PLAYER_STATE = 0
                    distance = GE_STEP_PROP1#(i, current_step)
                    If PX# + LEVELX# > GE_X#(i) and (PX# + LEVELX#) - GE_X#(i) < distance and PY# < GE_Y#(i)
                        Inc GE_STEP(i)
                    End If
                End If
            End If

            // 8 = DISTANCEXLEFT
            If s = 8
                // Set the animation for this step
                GE_ANIM(i) = Int(GE_STEP_PROP2#(i, current_step))
                If PLAYER_STATE = 0
                    distance = GE_STEP_PROP1#(i, current_step)
                    If PX# + LEVELX# < GE_X#(i) and GE_X#(i) - (PX# + LEVELX#) < distance and PY# < GE_Y#(i)
                        Inc GE_STEP(i)
                    End If
                End If
            End If

            // 9 = MOVETOTARGET
            If s = 9
                target_x# = GE_STEP_PROP1#(i, current_step)
                target_y# = GE_STEP_PROP4#(i, current_step)
                lpms# = GE_STEP_PROP2#(i, current_step)

                // Move x
                speed_x# = (target_x# - GE_X#(i)) * lpms#
                GE_X#(i) = GE_X#(i) + speed_x# * DELTA_TIME#

                // Move y
                speed_y# = (target_y# - GE_Y#(i)) * lpms#
                GE_Y#(i) = GE_Y#(i) + speed_y# * DELTA_TIME#

                // Check if target reached
                If Abs(GE_X#(i) - target_x#) <= 40 and Abs(GE_Y#(i) - target_y#) <= 40
                    Inc GE_STEP(i)
                End If

                // Set the animation for this step
                GE_ANIM(i) = Int(GE_STEP_PROP3#(i, current_step))
            End If

            // 10 = MOVER
            If s = 10
                target_x = GE_STEP_PROP1#(i, current_step)
                speed_x# = GE_STEP_PROP2#(i, current_step)

                If GE_X#(i) > target_x
                    Inc GE_STEP(i)
                Else
                    Add GE_X#(i), speed_x# * DELTA_TIME#
                End If

                // Set the animation for this step
                GE_ANIM(i) = Int(GE_STEP_PROP3#(i, current_step))
            End If

            // 11 = MOVEL
            If s = 11
                target_x = GE_STEP_PROP1#(i, current_step)
                speed_x# = GE_STEP_PROP2#(i, current_step)

                If GE_X#(i) < target_x
                    Inc GE_STEP(i)
                Else
                    Add GE_X#(i), -speed_x# * DELTA_TIME#
                End If

                // Set the animation for this step
                GE_ANIM(i) = Int(GE_STEP_PROP3#(i, current_step))
            End If

            // 12 = PLAYONCE
            If s = 12
                // Set the animation for this step
                GE_ANIM(i) = Int(GE_STEP_PROP1#(i, current_step))
            End If

            // 13 = DETECT PLAYER ABOVE
            If s = 13
                // Set the animation for this step
                GE_ANIM(i) = Int(GE_STEP_PROP2#(i, current_step))
                If PLAYER_STATE = 0
                    distance = GE_STEP_PROP1#(i, current_step)
                    If Abs(PX# + LEVELX# - GE_X#(i)) < distance and PY# < GE_Y#(i)
                        Inc GE_STEP(i)
                    End If
                End If
            End If

            // 14 = STOP
            If s = 14
                // Set the animation for this step
                GE_ANIM(i) = GE_STEP_PROP1#(i, current_step)
            End If

            // 15 = GOTO
            If s = 15
                // Set the animation for this step
                GE_ANIM(i) = 0
                GE_STEP(i) = GE_STEP_PROP1#(i, current_step)
            End If

            // 16 = FIRE
            If s = 16
                // Set the animation for this step
                GE_ANIM(i) = GE_STEP_PROP1#(i, current_step)
                ADD_ENEMY_BULLET[GE_X#(i), GE_Y#(i) + 32, GE_STEP_PROP2#(i, current_step), GE_STEP_PROP3#(i, current_step), GE_STEP_PROP6#(i, current_step), GE_STEP_PROP4#(i, current_step), GE_STEP_PROP5#(i, current_step), GE_STEP_PROP7#(i, current_step), GE_STEP_PROP8#(i, current_step), GE_STEP_PROP9#(i, current_step), GE_STEP_PROP10#(i, current_step), GE_STEP_PROP11#(i, current_step), GE_STEP_PROP12#(i, current_step), GE_STEP_PROP13#(i, current_step), GE_STEP_PROP14#(i, current_step), GE_FIRE_SAM(i), GE_ROTATE(i)]
                Inc GE_STEP(i)
            End If

            // 17 = WAITRANDOM
            If s = 17
                // Set the animation for this step
                GE_ANIM(i) = Int(GE_STEP_PROP1#(i, current_step))
                Inc GE_STEP_PROP2#(i, current_step)
                If GE_STEP_PROP2#(i, current_step) >= (GE_STEP_PROP3#(i, current_step) + Rnd(Int(GE_STEP_PROP4#(i, current_step))))
                    GE_STEP_PROP2#(i, current_step) = 0
                    Inc GE_STEP(i)
                End If
            End If

            // 18 = DISTANCE_RADIUS
            If s = 18
                If PLAYER_STATE = 0
                    // Set the animation for this step
                    GE_ANIM(i) = Int(GE_STEP_PROP1#(i, current_step))
                    xx = ABS((PX# + LEVELX#  - GE_X#(i)) / 64
                    yy = ABS(PY# - GE_Y#(i)) / 64
                    // Calculate the distance
                    distance = (xx * xx) + (yy * yy)
                    If distance < GE_STEP_PROP2#(i, current_step)
                        Inc GE_STEP(i)
                    End If
                End If
            End If

            // 19 = DISTANCE
            If s = 19
                If PLAYER_STATE = 0 and PY# < GE_Y#(i)
                    // Set the animation for this step
                    GE_ANIM(i) = Int(GE_STEP_PROP1#(i, current_step))
                    xx = ABS((PX# + LEVELX#  - GE_X#(i)) / 64
                    yy = ABS(PY# - GE_Y#(i)) / 64
                    // Calculate the distance
                    distance = (xx * xx) + (yy * yy)
                    If distance < GE_STEP_PROP2#(i, current_step)
                        Inc GE_STEP(i)
                    End If
                End If
            End If

            // 20 = FIREATPLAYER
            If s = 20
                // Set the animation for this step
                GE_ANIM(i) = GE_STEP_PROP1#(i, current_step)

                If PX# + LEVELX# < GE_X#(i) - 128
                    // Left
                    GE_STEP_PROP2#(i, 1) = -400           // Speed X
                    GE_STEP_PROP3#(i, 1) = -300           // Speed Y
                Else
                    If PX# + LEVELX# > GE_X#(i) + 128
                        // Right
                        GE_STEP_PROP2#(i, 1) = 400        // Speed X
                        GE_STEP_PROP3#(i, 1) = -400       // Speed Y
                    Else
                        // Up
                        GE_STEP_PROP2#(i, 1) = 0          // Speed X
                        GE_STEP_PROP3#(i, 1) = -500       // Speed Y
                    End If
                End If

                ADD_ENEMY_BULLET[GE_X#(i), GE_Y#(i) + 32, GE_STEP_PROP2#(i, current_step), GE_STEP_PROP3#(i, current_step), GE_STEP_PROP6#(i, current_step), GE_STEP_PROP4#(i, current_step), GE_STEP_PROP5#(i, current_step), GE_STEP_PROP7#(i, current_step), GE_STEP_PROP8#(i, current_step), GE_STEP_PROP9#(i, current_step), GE_STEP_PROP10#(i, current_step), GE_STEP_PROP11#(i, current_step), GE_STEP_PROP12#(i, current_step), GE_STEP_PROP13#(i, current_step), GE_STEP_PROP14#(i, current_step), GE_FIRE_SAM(i), GE_ROTATE(i)]
                Inc GE_STEP(i)
            End If

			// 21 = DETECT PLAYER BELOW
            If s = 21
                // Set the animation for this step
                GE_ANIM(i) = Int(GE_STEP_PROP2#(i, current_step))
                If PLAYER_STATE = 0
                    distance = GE_STEP_PROP1#(i, current_step)
                    If Abs(PX# + LEVELX# - GE_X#(i)) < distance and PY# > GE_Y#(i)
                        Inc GE_STEP(i)
                    End If
                End If
            End If

			// Do we need to update the position of the smoke system
			If GE_HAS_SMOKE(i) = 1 and GE_SMOKE_INDEX(i) >= 0
				SMOKE_SYSTEM_X#(GE_SMOKE_INDEX(i)) = GE_X#(i) - LEVELX#
			End If

        End If
    Next i
Return

DRAW_GROUND_ENEMIES:
    // Draw ground enemies
    For i = 0 to MAX_GROUND_ENEMIES - 1
        If GE_STATUS(i) = 1

            // Animation
            a = GE_ANIM(i)
            a$ = GE_ANIM_TYPE$(i, a)

            // Draw the bob if not invisible
            If a$ <> "INVISIBLE"
                If GE_ISHIT#(i) > 0
                    Bob i + 450, GE_X#(i) - LEVELX#, GE_Y#(i), GE_HIT_FRAME(i)
                    Add GE_ISHIT#(i), -(30 * DELTA_TIME#)
                else
                    Bob i + 450, GE_X#(i) - LEVELX#, GE_Y#(i), Int(GE_FRAME#(i))
                End If

				If GE_ROTATE(i) > 0
					Bob Rotate i + 450, -GE_ROTATE(i)
				End If
            End If

            If a$ = "BOUNCE"
                anim_speed# = GE_ANIM_PROP3#(i, a)
                Add GE_FRAME#(i), anim_speed# * DELTA_TIME#

                If Int(GE_FRAME#(i)) > Int(GE_ANIM_PROP2#(i, a))
                     GE_FRAME#(i) = Int(GE_ANIM_PROP2#(i, a)
                     GE_ANIM_PROP3#(i, a) = -GE_ANIM_PROP3#(i, a)
                End If

                If Int(GE_FRAME#(i)) < Int(GE_ANIM_PROP1#(i, a))
                     GE_FRAME#(i) = Int(GE_ANIM_PROP1#(i, a)
                     GE_ANIM_PROP3#(i, a) = -GE_ANIM_PROP3#(i, a)
                End If
            End If

            If a$ = "PLAYONCE"
                anim_speed# = GE_ANIM_PROP3#(i, a)
                If Int(GE_FRAME#(i)) < Int(GE_ANIM_PROP1#(i, a))
                    GE_FRAME#(i) = Int(GE_ANIM_PROP1#(i, a))
                End If
                Add GE_FRAME#(i), anim_speed# * DELTA_TIME#

                If Int(GE_FRAME#(i)) > Int(GE_ANIM_PROP2#(i, a))
                    GE_FRAME#(i) = Int(GE_ANIM_PROP2#(i, a)
                    Inc GE_STEP(i)
                End If
            End If

            If a$ = "PLAYONCESTOP"
                anim_speed# = GE_ANIM_PROP3#(i, a)
                If Int(GE_FRAME#(i)) < Int(GE_ANIM_PROP1#(i, a))
                    GE_FRAME#(i) = Int(GE_ANIM_PROP1#(i, a))
                End If
                Add GE_FRAME#(i), anim_speed# * DELTA_TIME#

                If Int(GE_FRAME#(i)) > Int(GE_ANIM_PROP2#(i, a))
                    GE_FRAME#(i) = Int(GE_ANIM_PROP2#(i, a)
                End If
            End If

            If a$ = "REPEAT"
                anim_speed# = GE_ANIM_PROP3#(i, a)
                If Int(GE_FRAME#(i)) < Int(GE_ANIM_PROP1#(i, a))
                    GE_FRAME#(i) = Int(GE_ANIM_PROP1#(i, a))
                End If
                Add GE_FRAME#(i), anim_speed# * DELTA_TIME#

                If Int(GE_FRAME#(i)) > Int(GE_ANIM_PROP2#(i, a))
                    GE_FRAME#(i) = Int(GE_ANIM_PROP1#(i, a)
                End If
            End If

            If a$ = "POINTATPLAYER"
                If PX# + LEVELX# < GE_X#(i) - 128
                    GE_FRAME#(i) = Int(GE_ANIM_PROP1#(i, a)
                Else
                    If PX# + LEVELX# > GE_X#(i) + 128
                        GE_FRAME#(i) = Int(GE_ANIM_PROP3#(i, a)
                    Else
                        GE_FRAME#(i) = Int(GE_ANIM_PROP2#(i, a)
                    End If
                End If
            End If

            If a$ = "WAIT"
                GE_FRAME#(i) = Int(GE_ANIM_PROP1#(i, a)
            End If

            // Remove when off screen
            If GE_X#(i) - LEVELX# <= -128 or GE_X#(i) - LEVELX# > DW + 256
                GE_STATUS(i) = 0
                Bob Off i + 450
				If GE_HAS_SMOKE(i) = 1 and GE_SMOKE_INDEX(i) >= 0
					SMOKE_SYSTEM_STATUS(GE_SMOKE_INDEX(i)) = 2
				End If
            End If
        End If
    Next i
Return

Procedure ADD_ENEMY_BULLET[x#, y#, speedx#, speedy#, frame_speed#, frame_start, frame_end, hit_damage#, ex_type, ex_speed, live_time, muzzel_start, muzzel_end, x_off#, y_off#, fire_sam, bobrotate]
    For eb = 0 to MAX_EB - 1
        If EB_STATUS(eb) = 0
            EB_STATUS(eb) = 1
            EBX#(eb) = x# + x_off#
            EBY#(eb) = y# + y_off#
            EB_SPEEDX#(eb) = speedx#
            EB_SPEEDY#(eb) = speedy#
            EB_FRAME_SPEED#(eb) = frame_speed#
            EB_START_FRAME(eb) = frame_start
            EB_END_FRAME(eb) = frame_end
            EB_HIT_DAMAGE#(eb) = hit_damage#
            EB_EX_TYPE(eb) = ex_type
            EB_EX_SPEED(eb) = ex_speed
            EB_LIVE_TIME(eb) = live_time
            EB_MUZZEL_START(eb) = muzzel_start
            EB_MUZZEL_END(eb) = muzzel_end
            EB_MUZZEL_FINISHED(eb) = 0
            EB_FIRE_SAM(eb) = fire_sam
            EB_FRAME#(eb) = muzzel_start
			EB_ROTATE(eb) = bobrotate
            // Exit loop
            Exit
        End If
    Next eb
End Proc

UPDATE_ENEMY_BULLETS:
    For i = 0 to MAX_EB - 1
        If EB_STATUS(i) = 1
            // Start moving when the muzzel animation has finished
            If EB_MUZZEL_FINISHED(i) = 1
                Add EBX#(i), EB_SPEEDX#(i) * DELTA_TIME#
                Add EBY#(i), EB_SPEEDY#(i) * DELTA_TIME#
                Dec EB_LIVE_TIME(i)

                // Remove when off screen
                If EBY#(i) < 0 or EBX#(i) < 0
                    EB_STATUS(i) = 0
                    Bob Off i + 200
                End If

                // Check bullet collsion with terrain
                If EB_STATUS(i) = 1 and EB_LIVE_TIME(i) < 0
                    t = Tile Value("view1",  Int((EBX#(i)) / 64), Min(16, Int(EBY#(i) / 64)))
					t7 = 0
					If LEVEL >= 4
						t7 = Tile Value("view7",  Int((EBX#(i)) / 64), Min(16, Int(EBY#(i) / 64)))
					End If
                    If t <> 0 or t7 <> 0
                        Bob Off i + 200
                        ADD_EXPLOSION[EBX#(i), EBY#(i), EB_EX_SPEED(i), EB_EX_TYPE(i), 1, 0, 0, 1, 0, 0, EB_ROTATE(i)]
                        EB_STATUS(i) = 0
                    End if
                End If
            End If
        End If
    Next i

    // Check player collision with enemy bullets
    If PLAYER_STATE = 0
        c = Bob Col (1, 200 to 200 + MAX_EB - 1)
        If c = 1
            For i = 0 to MAX_EB - 1
                If col(i + 200) = true
                    Bob Off i + 200
                    ADD_EXPLOSION[EBX#(i), EBY#(i), EB_EX_SPEED(i), EB_EX_TYPE(i), 1, 0, 0, 0, 0, 0, EB_ROTATE(i)]
                    If HAS_SHIELD = 0
                        DAMAGE_AMOUNT# = EB_HIT_DAMAGE#(i)
                        Gosub PLAYER_TAKE_DAMAGE
                    ENd If
                    EB_STATUS(i) = 0
                End If
            Next i
        End If
    End If
Return

DRAW_ENEMY_BULLETS:
    For i = 0 to MAX_EB - 1
        // Is the bullet live
        If EB_STATUS(i) = 1
            // Put the bob on screen
            Bob i + 200, EBX#(i) - LEVELX#, EBY#(i), Int(EB_FRAME#(i))

			If EB_ROTATE(i) > 0
				Bob Rotate i + 200, -EB_ROTATE(i)
			End If

            // Increment the frame
            Add EB_FRAME#(i), EB_FRAME_SPEED#(i) * DELTA_TIME#

            // Move the muzzel flash frame if not finished
            If EB_MUZZEL_FINISHED(i) = 0
                If Int(EB_FRAME#(i)) > EB_MUZZEL_END(i)
                    EB_FRAME#(i) = EB_START_FRAME(i)
                    EB_MUZZEL_FINISHED(i) = 1
                    PLAY_AUDIO_SAMPLE[EB_FIRE_SAM(i), false, 0.4]
                End If
            Else
                // Move the bullet frame
                If Int(EB_FRAME#(i)) > EB_END_FRAME(i)
                    EB_FRAME#(i) = EB_START_FRAME(i)
                End If
            End If
        End If
    Next i
Return

DRAW_EXPLOSIONS:
    For i = 0 to MAX_EP - 1
        If EP_STATUS(i) = 1

            Add EPX#(i), -MAP_SPEED# * DELTA_TIME#
            Bob i + 100, EPX#(i), EPY#(i), Int(EP_FRAME#(i))

			If EP_ROTATE(i) > 0
				Bob Rotate i + 100, -EP_ROTATE(i)
			End If

            Add EP_FRAME#(i), EP_SPEED#(i) * DELTA_TIME#
            If Int(EP_FRAME#(i)) > EP_END_FRAME(i)
                EP_STATUS(i) = 0
                Bob Off i + 100
            End If
        End If
    Next i
Return

Procedure ADD_ES_EXPLOSION[x#, y#, speed#, ex_size, count, xrange, yrange, play_debris, play_explosion]
    For ex = 0 to MAX_EP - 1

        If EP_STATUS(ex) = 0
            Dec count
            EP_STATUS(ex) = 1

            EPX#(ex) = (x# - xrange) + RND(xrange)
            EPY#(ex) = (y# - yrange) + RND(yrange)
            EP_SPEED#(ex) = speed# + 5 + Rnd(10)

            // Pick random if -1
            exs = ex_size
            If ex_size = -1
                exs = Rnd(4)
            End If

            EP_FRAME#(ex) = EXPLOSION_ANIMATION_START(exs)
            EP_END_FRAME(ex) = EXPLOSION_ANIMATION_END(exs)

            // exit loop if we have added the required amount
            If count = 0
				Exit
			End If
        End If
    Next ex

    If play_explosion = 1
        PLAY_AUDIO_SAMPLE[Rnd(7) + 50, false, 0.7]
    End If

    If play_debris = 1
        PLAY_AUDIO_SAMPLE[Rnd(9) + 65, false, 0.6]
    End If

	// Add particle effect
	ADD_PARTICLE_SYSTEM[x#, y#, Rnd(200) + 100, 50, 150]
End Proc

Procedure ADD_EXPLOSION[x#, y#, speed#, ex_size, count, xrange, yrange, play_debris, play_explosion, add_particle, bobrotate]
    For ex = 0 to MAX_EP - 1
        If EP_STATUS(ex) = 0
            Dec count
            EP_STATUS(ex) = 1
            EPX#(ex) = (x# - xrange) + RND(xrange) - LEVELX#
            EPY#(ex) = (y# - yrange) + RND(yrange)
            EP_SPEED#(ex) = speed# + 5 + Rnd(10)
			EP_ROTATE(ex) = bobrotate

            // Pick random if -1
            exs = ex_size
            If ex_size = -1
                exs = Rnd(4)
            End If

            EP_FRAME#(ex) = EXPLOSION_ANIMATION_START(exs)
            EP_END_FRAME(ex) = EXPLOSION_ANIMATION_END(exs)

            // exit loop if we have added the required amount
            If count = 0
				Exit
			End If
        End If
    Next ex

    If play_explosion = 1
        PLAY_AUDIO_SAMPLE[Rnd(7) + 50, false, 0.7]
    End If

    If play_debris = 1
        PLAY_AUDIO_SAMPLE[Rnd(9) + 65, false, 0.6]
    End If

	// Add particle effect
	If add_particle = 1
		ADD_PARTICLE_SYSTEM[x# - LEVELX#, y#, Rnd(200) + 100, 30, 200]
	End If
End Proc

UPDATE_MAP:
    // Advance the Map position
    Add LEVELX#, MAP_SPEED# * DELTA_TIME#

    // Update position of background images
    Add XB#, -10 * DELTA_TIME#
    Add XB1#, -15 * DELTA_TIME#
    Add XB2#, -28 * DELTA_TIME#
    Add XB3#, -35 * DELTA_TIME#

    // Reset the x position when end of screen is reached
    If ABS(XB#) >= DW: XB# = 0: End If
    If ABS(XB1#) >= DW: XB1# = 0: End If
    If ABS(XB2#) >= DW: XB2# = 0: End If
    If ABS(XB3#) >= DW: XB3# = 0: End If
Return

DRAW_MAP:
    // Draw background images
    Paste Bob XB#, 0, BG1
    Paste Bob XB# + DW, 0, BG1

    Paste Bob XB1#, 0, BG2
    Paste Bob XB1# + DW, 0, BG2

    Paste Bob XB2#, 0, BG3
    Paste Bob XB2# + DW, 0, BG3

    Paste Bob XB3#, 0, BG4
    Paste Bob XB3# + DW, 0, BG4

    // Draw Terrain
    For x = 0 to 31
        For y = 0 to 16
            // Layer 1 Main Terrain
            t = Tile Value("view1", x + Int(LEVELX#/64), y)
            // Layer 2 Decoration
            t2 = Tile Value("view2", x + Int(LEVELX#/64), y)
            // Layer 3 Ground Enemies
            t3 = Tile Value("view3", x + Int(LEVELX#/64), y)
            // Layer 4 Enemy Ships
            t4 = Tile Value("view4", x + Int(LEVELX#/64), y)
            // Layer 5 Decoration 2
            t5 = Tile Value("view5", x + Int(LEVELX#/64), y)
            // Layer 6 Commands
            t6 = Tile Value("view6", x + Int(LEVELX#/64), y)

			// Main Terrain
            If t <> 0
                Paste Bob (x * 64) - LEVELX# mod 64, y * 64, t + 509
            End If

			// Distructable - Level 4 and above
			If LEVEL >= 4
            	t7 = Tile Value("view7", x + Int(LEVELX#/64), y)
				If t7 <> 0
	            	Paste Bob (x * 64) - LEVELX# mod 64, y * 64, t7 + 1421
	            End If
			End If

			// Decoration 1
            If t2 <> 0
                Paste Bob (x * 64) - LEVELX# mod 64, y * 64, t2 + 509
            End If

			// Decoration 2
            If t5 <> 0
                Paste Bob (x * 64) - LEVELX# mod 64, y * 64, t5 + 509
            End If

            // Ground enemy
            If t3 <> 0
                // Remove tile from map (held in memory) so we dont add it again
                Set Tile Value "view3", x + Int(LEVELX#/64), y, 0
                ADD_GROUND_ENEMY[t3, x + Int(LEVELX#/64), y]
            End If

            // Enemy ship
            If t4 <> 0
                // Remove tile from map (held in memory) so we dont add it again
                Set Tile Value "view4", x + Int(LEVELX#/64), y, 0
                ADD_SHIP_ENEMY[t4, x + Int(LEVELX#/64), y]
            End If

            // Commands
            If t6 <> 0
                Set Tile Value "view6", x + Int(LEVELX#/64), y, 0
                DO_MAP_COMMAND[t6]
            End If
        Next y
    Next x
Return

Procedure DO_MAP_COMMAND[command]
    // Stop Map (Background continues to scroll)
    If command = 166
        MAP_SPEED# = 0
    Else
        // Start playing the music for the level
        If command = 167
			PLAY_AUDIO_SAMPLE[LEVEL_MUSIC, true, 1]
		Else
			// Stop level music and start boss battle music
	        If command = 178
				STOP_AUDIO_SAMPE[LEVEL_MUSIC]
				PLAY_AUDIO_SAMPLE[BOSS_MUSIC, true, 1]
	        End If
        End If
    End If
End Proc

CHECK_PLAYER_HEALTH:
    If PLAYER_HIT_POINTS# <= 0 AND PLAYER_STATE = 0
        PLAYER_STATE = 1
        PLAYER_HIT = 0
        // Set the start image for explosion animation
        PMF# = BII# + 9
        // Remove the back burner
        Bob Off 2
        // Reduce player health
        Add PLAYER_HEALTH#, -25
        // Play the ship destroyed audio sample
        PLAY_AUDIO_SAMPLE[SAM_PLAYER_SHIP_DESTROYED, false, 1]
    End If

    // Animate player dead
    If PLAYER_STATE = 1
        Add PMF#, 0.3
        If PMF# >= BII# + 19
            If PLAYER_HEALTH# <= 0
                // Game over
                PLAYER_STATE = 2
                Bob Off 1
                Gosub UPDATE_HUD
            Else
                SHOOT_RATE = 14     // Player loses any increased shoot rate
                If PW >= 3
                    SHOOT_RATE = 10
                End If
                Gosub RESET_PLAYER
                Gosub UPDATE_HUD
            End If
        End If
    End If
Return

DRAW_PLAYER:

    // Check if not game over
    If PLAYER_STATE < 2
        Bob 1, PX#, PY#, Int(PMF#)
    End If

    // Animate back burner
    If PLAYER_STATE = 0
        Add PBBF#, PBBFS# * DELTA_TIME#
        If PBBA = 0 // Stopped
            // Bounce the stop back burner image frames
            If Int(PBBF#) >= BII# + 5: PBBF# = BII# + 4: PBBFS# = -20: End If
            If Int(PBBF#) <= BII#: PBBF# = BII# + 1: PBBFS# = 20: End If
            Bob 2, PX# - PBXOFFOFF, PY#, Int(PBBF#)
        else
            // Bounce the boost back burner image frames
            If Int(PBBF#) >= BII# + 9: PBBF# = BII# + 8: PBBFS# = -20: End If
            If Int(PBBF#) <= BII# + 4: PBBF# = BII# + 5: PBBFS# = 20: End If
            Bob 2, PX# - PBXOFFON, PY#, Int(PBBF#)
        End If
    End If

    // Animate player taking damage
    If PLAYER_HIT = 1
        Add PMF#, 60 * DELTA_TIME#
        If PMF# >= BII# + 31
            PMF# = BII#
            PLAYER_HIT = 0
			PLAY_AUDIO_SAMPLE[SAM_PLAYER_TAKE_DAMAGE, false, 1]
        End If
    End If

    // Animate Player shield
    If HAS_SHIELD = 1
        Add PSF#, 0.2
        If PSF# >= 88: PSF# = 80: End If
        // Player shield rotation
        Add PSR#, 30 * DELTA_TIME#
        If PSR# >= 361
			PSR# = 0
		End If

        // PSF is rounded down to nearest integer
        Bob 3, PX#, PY#, Int(PSF#)
        Bob Rotate 3, -PSR#
        // Remove shield when timer expired
        Add SHIELD_TIMER#, 1 * DELTA_TIME#

        If SHIELD_TIMER# > SHIELD_TIME#
            PLAY_AUDIO_SAMPLE[SAM_PLAYER_SHIELD_DOWN, false, 1]
            HAS_SHIELD = 0
            Bob Off 3
        End If
    End If
Return

UPDATE_PLAYER:
    // Check collsion with terrain if player alive
    If HAS_SHIELD = 0 and PLAYER_STATE = 0
        // Check front
        t = Tile Value("view1", Int((PX# + PSFOFF + LEVELX#) / 64), Int(PY# / 64))
        // Check back
        t2 = Tile Value("view1", Int((PX# + PSBOFF + LEVELX#) / 64), Int(PY# / 64))

        If t <> 0 or t2 <> 0
            DAMAGE_AMOUNT# = 1
            Gosub PLAYER_TAKE_DAMAGE
		else
			// Check destructable layer for level 4 and above
			If LEVEL >= 4
				// Check front
		        t = Tile Value("view7", Int((PX# + PSFOFF + LEVELX#) / 64), Int(PY# / 64))
		        // Check back
		        t2 = Tile Value("view7", Int((PX# + PSBOFF + LEVELX#) / 64), Int(PY# / 64))

		        If t <> 0 or t2 <> 0
		            DAMAGE_AMOUNT# = 1
		            Gosub PLAYER_TAKE_DAMAGE
		        End If
			End If
        End If
    End If

    // Default back burner to stopped
    PBBA = 0

    If PLAYER_STATE = 0
        If LEVEL_COMPLETE = 0
            // Left Key
            If Key State(37) or jLeft(0)
                PXT# = PXT# - PSPEED# * DELTA_TIME#
            Else
                // Right Key
                If Key State(39) or jRight(0)
                    PXT# = PXT# + PBSPEED# * DELTA_TIME#
                    // Set back burner to boost
                    PBBA = 1
                End If
            End If

            // Up Key
            If Key State(38) or jUp(0)
                PYT# = PYT# - PSPEED# * DELTA_TIME#
            else
                // Down Key
                If Key State(40) or jDown(0)
                    PYT# = PYT# + PSPEED# * DELTA_TIME#
                End If
            End If

            // Player shoot (space bar)
            If Key State(32) or Fire(0)
                Add SHOOT_TIMER#, 60 * DELTA_TIME#
                If SHOOT_TIMER# >= SHOOT_RATE
                    Gosub PLAYER_SHOOT
                    SHOOT_TIMER# = 0
                End If
            End If
        End If

        // Keep player within screen bounds
        If PXT# >= DW - 42: PXT# = PXT# - PBSPEED# * DELTA_TIME#: End If
        If PXT# <= 42: PXT# = PXT# + PSPEED# * DELTA_TIME#: End If
        If PYT# >= DH - 16: PYT# = PYT# - PSPEED# * DELTA_TIME#: End If
        If PYT# <= 16: PYT# = PYT# + PSPEED# * DELTA_TIME#: End If

        // Smooth out the player movement
        SPEEDX# = (PXT# - PX#) * PMS#
        SPEEDY# = (PYT# - PY#) * PMS#
        PX# = PX# + SPEEDX# * DELTA_TIME#
        PY# = PY# + SPEEDY# * DELTA_TIME#

        // Check collision with enemies
        If HAS_SHIELD = 0 and PLAYER_STATE = 0
            c = Bob Col (1, 450 to 450 + MAX_GROUND_ENEMIES - 1)
            If c = 1
                For e = 0 to MAX_GROUND_ENEMIES - 1
                    If col(e + 450) = true and GE_STATUS(e) = 1 and GE_TYPE(e) <> 9 // Dont include Kamikaze, damage has already been applied
                        DAMAGE_AMOUNT# = 0.8
                        Gosub PLAYER_TAKE_DAMAGE
                    End If
                Next e
            else
                // Enemy ships
                c = Bob Col (1, 350 to 350 + MAX_ENEMY_SHIPS - 1)
                If c = 1
                    For e = 0 to MAX_ENEMY_SHIPS - 1
                        If col(e + 350) = true and ES_STATUS(e) = 1
                            DAMAGE_AMOUNT# = 0.8
                            Gosub PLAYER_TAKE_DAMAGE
                        End If
                    Next e
                End If
            End If
        End If
    End If
Return

Procedure SET_DAMAGED[x, y]
	t = Tile Value("view7", x, y)
	Set Tile Value "view7", x, y, 0

	t1 = Tile Value("view7", x, y - 1)

	// x, y, particle_count, max_life, gravity
	ADD_PARTICLE_SYSTEM[((x * 64) + 32) - LEVELX#, (y + 1) * 64, Rnd(100) + 100, 20, 150]
	// x#, y#, speed#, ex_size, count, xrange, yrange, play_debris, play_explosion, add_particle, bobrotate
	ADD_EXPLOSION[(x * 64) + 32, ((y + 1) * 64), 15, 3, 1, 30, 30, 1, 0, 0]

	t2 = Tile Value("view7", x + 1, y - 1)
	t3 = Tile Value("view7", x + 1, y)
	t4 = Tile Value("view7", x + 1, y + 1)
	t5 = Tile Value("view7", x, y + 1)
	t6 = Tile Value("view7", x - 1, y + 1)
	t7 = Tile Value("view7", x - 1, y)

	If t = 180
		If t1 = 180
		 	Set Tile Value "view7", x, y - 1, 181
		else
			If t1 = 179
				Set Tile Value "view7", x, y - 1, 186
			else
				If t1 = 183
					Set Tile Value "view7", x, y - 1, 186
				else
					If t1 = 182
						Set Tile Value "view7", x, y - 1, 0
						If t2 = 184
							Set Tile Value "view7", x + 1, y - 1, 182
						else
							If t2 = 185
								Set Tile Value "view7", x + 1, y - 1, 180
							End If
						End If
					End If
				End If
			End If
		End If

		If t2 = 179
			Set Tile Value "view7", x + 1, y - 1, 183
		End If

		If t3 = 179
			Set Tile Value "view7", x + 1, y, 180
		else
			If t3 = 187
				Set Tile Value "view7", x + 1, y, 0
				If t4 = 187
					Set Tile Value "view7", x + 1, y + 1, 188
				Else
					Set Tile Value "view7", x + 1, y + 1, 0
				End If

				If t2 = 187
					Set Tile Value "view7", x + 1, y - 1, 189
				Else
					Set Tile Value "view7", x + 1, y - 1, 0
				End If
			End If
		End If

		If t5 = 180
			Set Tile Value "view7", x, y + 1, 182
		Else
			If t5 = 179
				Set Tile Value "view7", x, y + 1, 184
			else
				If t5 = 185
					Set Tile Value "view7", x, y + 1, 184
				else
					If t5 = 181
						Set Tile Value "view7", x, y + 1, 0
						If t4 = 186
							Set Tile Value "view7", x + 1, y + 1, 181
						else
							If t4 = 183
								Set Tile Value "view7", x + 1, y + 1, 180
							End If
						End If
					End If
				End If
			End If
		End If

		If t4 = 179
			Set Tile Value "view7", x + 1, y + 1, 185
		End If
	else
		If t = 182
			If t3 = 184
				Set Tile Value "view7", x + 1, y, 182
			Else
				If t3 = 185
					Set Tile Value "view7", x + 1, y, 180
				Else
					If t3 = 188
						Set Tile Value "view7", x + 1, y, 0
					End If
				End If
			End If

			If t5 = 181
				Set Tile Value "view7", x, y + 1, 0
			Else
				If t5 = 180
					Set Tile Value "view7", x, y + 1, 182
				Else
					If t5 = 185
						Set Tile Value "view7", x, y + 1, 184
					End If
				End If
			End If

			If t4 = 186
				Set Tile Value "view7", x + 1, y + 1, 181
			Else
				If t4 = 179
					Set Tile Value "view7", x + 1, y + 1, 185
				Else
					If t4 = 189
						Set Tile Value "view7", x + 1, y + 1, 0
					Else
						If t4 = 187
							Set Tile Value "view7", x + 1, y + 1, 188
						Else
							If t4 = 183
								Set Tile Value "view7", x + 1, y + 1, 180
							else
								If t4 = 190
									Set Tile Value "view7", x + 1, y + 1, 184
							 	End If
							End If



						End If
					End If
				End If
			End If
		Else
			If t = 181
				If t = 181
					If t3 = 186
						Set Tile Value "view7", x + 1, y, 181
					Else
						If t3 = 183
							Set Tile Value "view7", x + 1, y, 180
						Else
							If t3 = 189
								Set Tile Value "view7", x + 1, y, 0
							End If
						End If
					End If
				End If

				If t1 = 182
					Set Tile Value "view7", x, y - 1, 0
				Else
					If t1 = 180
						Set Tile Value "view7", x, y - 1, 181
					Else
						If t1 = 183
							Set Tile Value "view7", x, y - 1, 186
						End If
					End If
				End If

				If t2 = 179
					Set Tile Value "view7", x + 1, y - 1, 183
				Else
					If t2 = 187
						Set Tile Value "view7", x + 1, y - 1, 189
					Else
						If t2 = 184
							Set Tile Value "view7", x + 1, y - 1, 182
						Else
							If t2 = 185
								Set Tile Value "view7", x + 1, y - 1, 180
							Else
								If t2 = 188
									Set Tile Value "view7", x + 1, y - 1, 0
								End If
							End If
						End If
					End If
				End If
			else
				If t = 184
					If t3 = 184
						Set Tile Value "view7", x + 1, y, 182
					Else
						If t3 = 185
							Set Tile Value "view7", x + 1, y, 180
						Else
							If t3 = 188
								Set Tile Value "view7", x + 1, y, 0
							End If
						End If
					End If

					If t4 = 179
						Set Tile Value "view7", x + 1, y + 1, 185
					else
						If t4 = 186
							Set Tile Value "view7", x + 1, y + 1, 181
						else
							If t4 = 187
								Set Tile Value "view7", x + 1, y + 1, 188
							else
								If t4 = 189
									Set Tile Value "view7", x + 1, y + 1, 0
								Else
									If t4 = 190
										Set Tile Value "view7", x + 1, y + 1, 184
									End if
								End If
							End if
						End If
					End If

					If t5 = 179
						Set Tile Value "view7", x, y + 1, 184
					Else
						If t5 = 186
							Set Tile Value "view7", x, y + 1, 0
						Else
							If t5 = 190
								Set Tile Value "view7", x, y + 1, 184
							End If
						End If
  					End If

					If t6 = 179
						Set Tile Value "view7", x - 1, y + 1, 190
					Else
						If t6 = 186
							Set Tile Value "view7", x - 1, y + 1, 189
						Else
							If t6 = 181
								Set Tile Value "view7", x - 1, y + 1, 0
							Else
								If t6 = 185
									Set Tile Value "view7", x - 1, y + 1, 184
								Else
									If t6 = 180
										Set Tile Value "view7", x - 1, y + 1, 182
									End If
								End If
							End If
						End If
					End If

					If t7 = 184
						Set Tile Value "view7", x - 1, y, 188
					Else
						If t7 = 182
							Set Tile Value "view7", x - 1, y, 0
						Else
							If t7 = 190
								Set Tile Value "view7", x - 1, y, 187
							Else
								If t7 = 185
									Set Tile Value "view7", x - 1, y, 184
								End If
							End if
						End if
					End If
				Else
					If t = 188
						If t5 = 187
							Set Tile Value "view7", x, y + 1, 188
						else
							If t5 = 189
								Set Tile Value "view7", x, y + 1, 0
							Else
								If t5= 190
									Set Tile Value "view7", x, y + 1, 184
								End If
							End If
						End If

						If t6 = 179
							Set Tile Value "view7", x - 1, y + 1, 190
						else
							If t6 = 181
								Set Tile Value "view7", x - 1, y + 1, 0
							Else
								If t6 = 186
									Set Tile Value "view7", x - 1, y + 1, 189
								Else
									If t6 = 180
										Set Tile Value "view7", x - 1, y + 1, 182
									Else
										If t6 = 185
											Set Tile Value "view7", x - 1, y + 1, 184
										End If
									End If
								End If
							End If
						End If

						If t7 = 184
							Set Tile Value "view7", x - 1, y, 188
						Else
							If t7 = 182
								Set Tile Value "view7", x - 1, y, 0
							Else
								If t7 = 190
									Set Tile Value "view7", x - 1, y, 187
								End If
							End If
						End If
					Else
						If t = 185
							Set Tile Value "view7", x, y, 184
							SET_DAMAGED[x, y - 1]
							SET_DAMAGED[x, y]
						End If
					End If
				End If
			End If
		End If
	End If

End Proc

PLAYER_SHOOT:
    For ps = 0 to MAX_BULLETS - 1
        // Find the first available bullet element : 0 = Dead, 1 = Live, 2 = Exploding
        If BULLET_STATUS(ps) = 0
            PLAY_AUDIO_SAMPLE[BWS, false, 0.4]

            BULLET_STATUS(ps) = 1
            BULLETX#(ps) = PX# + WOX + BWOX         // Player X + Weapon X off + Bullet X off
            BULLETY#(ps) = PY# + WOY + BWOY
            BULLET_SPEEDX#(ps) = PWBSX
			BULLET_SPEEDY#(ps) = 0
            BULLET_START_FRAME(ps) = BWII
            BULLET_END_FRAME(ps) = BWII + 4
            BULLET_FRAME(ps) = 0
            BULLET_HIT_POINTS(ps) = BWHP
			BULLET_AGE#(ps) = 0
			BULLET_TYPE(ps) = 0						// 0 = normal
            // Exit loop here
            Exit
        End If
    Next ps

	// Air to ground
	If PWATG = 1
		For ps = 0 to MAX_BULLETS - 1
			If BULLET_STATUS(ps) = 0
				PLAY_AUDIO_SAMPLE[21, false, 0.3]

				BULLET_STATUS(ps) = 1
				BULLETX#(ps) = PX# + WOX + BWOX
				BULLETY#(ps) = PY# + WOY + BWOY + 64
				BULLET_SPEEDX#(ps) = 800
				BULLET_SPEEDY#(ps) = 800
				BULLET_START_FRAME(ps) = 1141
				BULLET_END_FRAME(ps) = 1146
				BULLET_FRAME(ps) = 0
				BULLET_HIT_POINTS(ps) = 5
				BULLET_AGE#(ps) = 0
				BULLET_TYPE(ps) = 1						// 1 = air to ground
				// Exit loop here
				Exit
			End If
		Next ps
	End If
Return

UPDATE_PLAYER_BULLETS:
    // Update player bullets
    For i = 0 to MAX_BULLETS - 1
        // 0 = Dead, 1 = Live, 2 = Exploding
        If BULLET_STATUS(i) > 0

			// Remove if beyond the display width
			If BULLETX#(i) > DW or BULLETY#(i) >= DH
				BULLET_STATUS(i) = 0
				Bob Off i + 50
			End If

			// Increase the age of the bullet
			Add BULLET_AGE#(i), 60 * DELTA_TIME#

            // Check bullet collision with terrain
            If BULLET_STATUS(i) = 1

                t = Tile Value("view1", Int((BULLETX#(i) + LEVELX#) / 64), Int(BULLETY#(i) / 64))
				t7 = 0
				If LEVEL >= 4
					t7 = Tile Value("view7", Int((BULLETX#(i) + LEVELX#) / 64), Int(BULLETY#(i) / 64))
				End If

                If t <> 0 or t7 <> 0
                    BULLET_STATUS(i) = 2
                    BULLET_FRAME(i) = 0
					If BULLET_TYPE(i) = 0
                    	BULLET_START_FRAME(i) = BWII + 5
                    	BULLET_END_FRAME(i) = BWII + 8
					Else
						BULLET_START_FRAME(i) = 1147
						BULLET_END_FRAME(i) = 1169
						PLAY_AUDIO_SAMPLE[SAM_PLAYER_AIR_TO_GROUND, false, 0.3]
					End If
                    BULLETX#(i) = BULLETX#(i) + (LEVELX# mod 32)
                    PLAY_AUDIO_SAMPLE[SAM_PLAYER_HIT_TERRAIN, false, 1]

					If t7 <> 0 and BULLET_AGE#(i) > 4
						hxm = Int((BULLETX#(i) + LEVELX#) / 64)
						hym = Int(BULLETY#(i) / 64)
						SET_DAMAGED[hxm, hym]
					End If
                End if
            End If

            // Check collision with ground enemies
            If BULLET_STATUS(i) = 1
                c = Bob Col (i + 50, 450 to 450 + MAX_GROUND_ENEMIES - 1)
                If c = 1
                    For e = 0 to MAX_GROUND_ENEMIES - 1
                        If col(e + 450) = true and GE_STATUS(e) = 1

                            BULLET_STATUS(i) = 2
                            BULLET_FRAME(i) = 0
							If BULLET_TYPE(i) = 0
		                    	BULLET_START_FRAME(i) = BWII + 5
		                    	BULLET_END_FRAME(i) = BWII + 8
							Else
								BULLET_START_FRAME(i) = 1147
								BULLET_END_FRAME(i) = 1169
								PLAY_AUDIO_SAMPLE[SAM_PLAYER_AIR_TO_GROUND, false, 0.3]
							End If
                            BULLETX#(i) = BULLETX#(i) + (LEVELX# mod 32)
                            PLAY_AUDIO_SAMPLE[GE_HIT_SAM(e), false, 1]
                            GE_ISHIT#(e) = 1

                            // Reduce the enemy hit points with the value for this bullet
                            Add GE_HIT_POINTS(e), -BULLET_HIT_POINTS(i)

                            If GE_HIT_POINTS(e) <= 0
                                // Remove enemy
                                GE_STATUS(e) = 0
                                Bob Off e + 450
                                // Add explosion animation
                                ADD_EXPLOSION[GE_X#(e), GE_Y#(e), 6, -1, 10, 100, 30, 1, 1, 1, 0]

                                ADD_COLLECTABLE[GE_COLLECT_TYPE(e), GE_X#(e), GE_Y#(e)]

								If GE_HAS_SMOKE(e) = 1 and GE_SMOKE_INDEX(e) >= 0
									SMOKE_SYSTEM_STATUS(GE_SMOKE_INDEX(e)) = 2
								End If

								// Update player score
								Add PLAYER_SCORE, GE_SCORE_POINTS(e)
								Add PLAYER_LEVEL_SCORE, GE_SCORE_POINTS(e)

                                // Increase kill count (not bombs or meteor)
                                If GE_TYPE(e) < 5 or GE_TYPE(e) > 6
                                    Add PLAYER_KILL_COUNT, 10
                                End If

								Gosub UPDATE_HUD
                            End If

							// Do we need to add a smoke particle system
							If GE_HAS_SMOKE(e) = 1 and GE_SMOKE_INDEX(e) = -1
								// ADD_SMOKE_SYSTEM[x#, y#, velocity_y#, particle_trigger#, max_particle_age, min_particle_length#, max_particle_length#]
								ADD_SMOKE_SYSTEM[GE_X#(e) + GE_SMOKE_X_OFF(x), GE_Y#(e) + GE_SMOKE_Y_OFF(e), -200, 3, 40, 0.8, 2]
								GE_SMOKE_INDEX(e) = PARAM
							End If

                            // exit loop
                            Exit
                        End If
                    Next e
                Else
                    // Enemy ships
                    c = Bob Col (i + 50, 350 to 350 + MAX_ENEMY_SHIPS - 1)
                    If c = 1
                        For e = 0 to MAX_ENEMY_SHIPS - 1
                            If col(e + 350) = true and ES_STATUS(e) = 1

                                BULLET_STATUS(i) = 2
                                BULLET_FRAME(i) = 0

								If BULLET_TYPE(i) = 0
			                    	BULLET_START_FRAME(i) = BWII + 5
			                    	BULLET_END_FRAME(i) = BWII + 8
								Else
									BULLET_START_FRAME(i) = 1147
									BULLET_END_FRAME(i) = 1169
									PLAY_AUDIO_SAMPLE[SAM_PLAYER_AIR_TO_GROUND, false, 0.3]
								End If

                                BULLETX#(i) = BULLETX#(i) + (LEVELX# mod 32)
								PLAY_AUDIO_SAMPLE[ES_HIT_SAM(e), false, 1]

                                ES_ISHIT#(e) = 1

                                // Reduce the enemy hit points with the value for this bullet
                                Add ES_HIT_POINTS(e), -BULLET_HIT_POINTS(i)

								// Do we need to add a smoke particle system
								If ES_HAS_SMOKE(e) = 1
									For si = 0 to 4
										If ES_SMOKE_INDEX(e, si) = -1
											If Int((ES_HIT_POINTS(e) / ES_KILL_POINTS(e)) * 100) < 20 * (si + 1)
												// Get a random offset for the smoke system
												ES_SMOKE_X_OFF(e, si) = Rnd(80) - 40
												ES_SMOKE_Y_OFF(e, si) = Rnd(20) - 10
												ADD_SMOKE_SYSTEM[ES_X#(e) + ES_SMOKE_X_OFF(e, si) + LEVELX#, ES_Y#(e) + ES_SMOKE_Y_OFF(e, si), -200, Rnd(1) + 1, Rnd(20) + 10, 0.8, 2.5]
												ES_SMOKE_INDEX(e, si) = PARAM
											End If
										End If
									Next si
								End If

                                If ES_HIT_POINTS(e) <= 0
                                    // Remove enemy
                                    ES_STATUS(e) = 0
                                    Bob Off e + 350
                                    Bob Off e + 400
                                    // Add explosion animation
                                    //[x#, y#, speed#, ex_size, count, xrange, yrange, play_debris, play_explosion]
                                    ADD_ES_EXPLOSION[ES_X#(e), ES_Y#(e), 6, ES_EXP_SIZE(e), ES_EXP_COUNT(e), 30, 30, 1, 1]

									// Update player score
									Add PLAYER_SCORE, ES_SCORE_POINTS(e)
									Add PLAYER_LEVEL_SCORE, ES_SCORE_POINTS(e)

                                    // Has player killed the boss
                                    If ES_ISBOSS(e) = 1
										// Remove smoke system if in use
										If ES_HAS_SMOKE(e) = 1
											For si = 0 to 4
												If ES_SMOKE_INDEX(e, si) >= 0
													SMOKE_SYSTEM_STATUS(ES_SMOKE_INDEX(e, si)) = 2
												End If
											Next si
										End If

                                        LEVEL_COMPLETE = 1
                                        PLAY_AUDIO_SAMPLE[SAM_BOSS_SHIP_DESTROYED, false, 1]
                                        Add PLAYER_KILL_COUNT, 20
                                    Else
                                        Inc PLAYER_KILL_COUNT
                                    End IF

                                    Gosub UPDATE_HUD
                                End If
								// Exit loop here
                                Exit
                            End If
                        Next e
                    End If
                End If
            End If

            If BULLET_FRAME(i) = 0
                BULLET_FRAME(i) = BULLET_START_FRAME(i)
            else
                If BULLET_STATUS(i) = 1
                    // Move the bullet once the muzel flash animation had finished
                    If BULLET_FRAME(i) = BULLET_END_FRAME(i)
                        BULLETX#(i) = BULLETX#(i) + BULLET_SPEEDX#(i) * DELTA_TIME#
						If BULLET_TYPE(i) = 1
							BULLETY#(i) = BULLETY#(i) + BULLET_SPEEDY#(i) * DELTA_TIME#
						End If
                    Else
                        // Keep the Muzzel Flash animation in the correct position as the player moves
                        BULLETX#(i) = PX# + WOX + BWOX
						If BULLET_TYPE(i) = 1
							BULLETY#(i) = PY# + WOY + BWOY + 64
						End If
                        Inc BULLET_FRAME(i)
                    End If
                Else
                    // Show bullet explode animation, remove when finished
                    If BULLET_STATUS(i) = 2
                        If BULLET_FRAME(i) = BULLET_END_FRAME(i)
                            BULLET_STATUS(i) = 0
                            Bob Off i + 50
                        Else
                            Inc BULLET_FRAME(i)
                        End If
                    End If
                End If
            End If

        End If
    Next i
Return

DRAW_PLAYER_BULLETS:
    For i = 0 to MAX_BULLETS - 1
        // 0 = Dead, 1 = Live, 2 = Hit
        If BULLET_STATUS(i) > 0
            Bob i + 50, BULLETX#(i), BULLETY#(i), BULLET_FRAME(i)
        End If
    Next i
Return

PLAYER_TAKE_DAMAGE:
    If LEVEL_COMPLETE = 0
        If PLAYER_HIT_POINTS# > 0
            Add PLAYER_HIT_POINTS#, -DAMAGE_AMOUNT#
        End If

        // Set the animation frame for player hit
        If PLAYER_HIT = 0
            PMF# = BII# + 20
            PLAYER_HIT = 1
        End If
    End If

    Gosub UPDATE_HUD
Return

UPGRADE_PLAYER_SHIP:

    If LEVEL = 1 and PLAYER_SHIP = 1
        PLAYER_SHIP = 2
		If MAX_PLAYER_SHIP < PLAYER_SHIP
			MAX_PLAYER_SHIP = PLAYER_SHIP
		End If
        PLAY_AUDIO_SAMPLE[31, false, 1]
		Add PLAYER_SCORE, 10000
		Add PLAYER_LEVEL_SCORE, 10000
        Gosub SET_PLAYER_SHIP
        Gosub SHOW_UPGRADE
        Return
    End If

    If LEVEL = 2 and PLAYER_SHIP <= 2
        PLAYER_SHIP = 3
		If MAX_PLAYER_SHIP < PLAYER_SHIP
			MAX_PLAYER_SHIP = PLAYER_SHIP
		End If
        PLAY_AUDIO_SAMPLE[31, false, 1]
		Add PLAYER_SCORE, 20000
		Add PLAYER_LEVEL_SCORE, 20000
        Gosub SET_PLAYER_SHIP
        Gosub SHOW_UPGRADE
        Return
    End If

    If LEVEL = 3 and PLAYER_SHIP <= 3
        PLAYER_SHIP = 4
		If MAX_PLAYER_SHIP < PLAYER_SHIP
			MAX_PLAYER_SHIP = PLAYER_SHIP
		End If
        PLAY_AUDIO_SAMPLE[31, false, 1]
		Add PLAYER_SCORE, 30000
		Add PLAYER_LEVEL_SCORE, 30000
        Gosub SET_PLAYER_SHIP
        Gosub SHOW_UPGRADE
        Return
    End If

     If LEVEL = 4 and PLAYER_SHIP <= 4
        PLAYER_SHIP = 5
		If MAX_PLAYER_SHIP < PLAYER_SHIP
			MAX_PLAYER_SHIP = PLAYER_SHIP
		End If
        PLAY_AUDIO_SAMPLE[31, false, 1]
		Add PLAYER_SCORE, 40000
		Add PLAYER_LEVEL_SCORE, 40000
        Gosub SET_PLAYER_SHIP
        Gosub SHOW_UPGRADE
        Return
    End If
Return

SET_PLAYER_SHIP:

    If PLAYER_SHIP = 1
        PSPEED# = 420: PBSPEED# = 660               // Player move and boost speed
        WOX = 60: WOY = 0                           // Weapon bullet offset
        PBXOFFON = 64                               // Player boost x offset on
        PBXOFFOFF = 52                              // Player boost x offset off
        BII# = 10                                   // Base images index for level 1 player images
        PMF# = BII#                                 // Current player image
        PBBF# = BII# + 1                            // Back burner frame start
        PW = 1                                      // Player weapon type
		PSFOFF = 14									// Player ship front offset (for map collision)
		PSBOFF = -16								// Player ship back offset (for map collision)
		PWATG = 0									// Enable air to ground weapon
    Else
        If PLAYER_SHIP = 2
            PSPEED# = 480: PBSPEED# = 720: WOX = 60: WOY = 10: PBXOFFON = 64: PBXOFFOFF = 52: BII# = 300: PMF# = BII#: PBBF# = BII# + 1: PW = 2: PSFOFF = 30: PSBOFF = -25: PWATG = 0
        Else
            If PLAYER_SHIP = 3
                PSPEED# = 540: PBSPEED# = 780: WOX = 55: WOY = 15: PBXOFFON = 64: PBXOFFOFF = 52: BII# = 332: PMF# = BII#: PBBF# = BII# + 1: PW = 3: PSFOFF = 30: PSBOFF = -30: PWATG = 0
            Else
                If PLAYER_SHIP = 4
                    PSPEED# = 600: PBSPEED# = 840: WOX = 65: WOY = 15: PBXOFFON = 64: PBXOFFOFF = 52: BII# = 364: PMF# = BII#: PBBF# = BII# + 1: PW = 4: PSFOFF = 37: PSBOFF = -45: PWATG = 0
                Else
                    If PLAYER_SHIP = 5
                        PSPEED# = 660: PBSPEED# = 900: WOX = 65: WOY = 18: PBXOFFON = 74: PBXOFFOFF = 62: BII# = 396: PMF# = BII#: PBBF# = BII# + 1: PW = 4: PSFOFF = 37: PSBOFF = -45: PWATG = 1
                    Else
                        If PLAYER_SHIP = 6
                            PSPEED# = 720: PBSPEED# = 960: WOX = 80: WOY = 18: PBXOFFON = 64: PBXOFFOFF = 52: BII# = 428: PMF# = BII#: PBBF# = BII# + 1: PW = 5: PSFOFF = 37: PSBOFF = -45: PWATG = 1
                        Else
                            If PLAYER_SHIP = 7
                                PSPEED# = 780: PBSPEED# = 1020: WOX = 80: WOY = 15: PBXOFFON = 74: PBXOFFOFF = 62: BII# = 460: PMF# = BII#: PBBF# = BII# + 1: PW = 5: PSFOFF = 37: PSBOFF = -45: PWATG = 1
                            End If
                        End If
                    End If
                End If
            End If
        End If
    End If

    If PW = 1           // Weapon Type
        BWII = 200      // Base image index for the bullet, muzzel flash
        BWHP = 1        // Bullet hit points (amount of damage to enemy)
        BWS = 1         // Shoot audio sample
        BWOX = 0        // Bullet offset x
        BWOY = 0        // Bullet offset y
        PWBSX = 1000     // Bullet speed
        PLAY_AUDIO_SAMPLE[22, false, 0.8]
    Else
        If PW = 2
            BWII = 209: BWHP = 2: BWS = 16: BWOX = 12: BWOY = 0: PWBSX = 1050
            PLAY_AUDIO_SAMPLE[23, false, 0.8]
        Else
            If PW = 3
                BWII = 218: BWHP = 3: BWS = 17: BWOX = 0: BWOY = 0: : PWBSX = 1100
                PLAY_AUDIO_SAMPLE[21, false, 0.8]
            Else
                If PW = 4
                    BWII = 227: BWHP = 4: BWS = 18: BWOX = 0: BWOY = 0: : PWBSX = 1150
                    PLAY_AUDIO_SAMPLE[25, false, 0.8]
                Else
                    If PW = 5
                        BWII = 236: BWHP = 5: BWS = 19: BWOX = 0: BWOY = 0: : PWBSX = 1200
                        PLAY_AUDIO_SAMPLE[24, false, 0.8]
                    End If
                End If
            End If
        End If
    End If
Return

Procedure ADD_SMOKE_SYSTEM[x#, y#, velocity_y#, particle_trigger#, max_particle_age#, min_particle_length#, max_particle_length#]
	For i = 0 to MAX_SMOKE_SYSTEMS - 1
		If SMOKE_SYSTEM_STATUS(i) = 0
			SMOKE_SYSTEM_STATUS(i) = 1
			SMOKE_SYSTEM_X#(i) = x# - LEVELX#
			SMOKE_SYSTEM_Y#(i) = y#
			SMOKE_SYSTEM_VY#(i) = velocity_y#
			SMOKE_SYSTEM_TRIGGER#(i) = particle_trigger#
			SMOKE_SYSTEM_AGE#(i) = 0
			SMOKE_SYSTEM_PARTICLE_MAX_AGE#(i) = max_particle_age#
			SMOKE_SYSTEM_PARTICLE_MAX_LENGTH#(i) = max_particle_length#
			SMOKE_SYSTEM_PARTICLE_MIN_LENGTH#(i) = min_particle_length#
			Exit
		End If
	Next i
End Proc[i]

Procedure REMOVE_SMOKE_SYSTEM[i]
	SMOKE_SYSTEM_STATUS(i) = 0
	For p = 0 to MAX_SMOKE_PARTICLES - 1
		If SMOKE_PARTICLE_STATUS(i, p) = 1
			SMOKE_PARTICLE_STATUS(i, p) = 0
			Bob Off SMOKE_PARTICLE_BOB(i, p)
			BOB_POOL_STATUS(SMOKE_PARTICLE_BOB(i, p) - SMOKE_BOB_OFFSET) = 0
		End If
	Next
End Proc

UPDATE_SMOKE_SYSTEM:
	For i = 0 to MAX_SMOKE_SYSTEMS - 1
		If SMOKE_SYSTEM_STATUS(i) > 0
			Add SMOKE_SYSTEM_AGE#(i), 60 * DELTA_TIME#
			// Add a new particle to the system
			If SMOKE_SYSTEM_AGE#(i) >= SMOKE_SYSTEM_TRIGGER#(i) and SMOKE_SYSTEM_STATUS(i) = 1
				SMOKE_SYSTEM_AGE#(i) = 0
				// Find a free particle array element
				For p = 0 to MAX_SMOKE_PARTICLES - 1
					If SMOKE_PARTICLE_STATUS(i, p) = 0
						SMOKE_PARTICLE_STATUS(i, p) = 1
						SMOKE_PARTICLE_AGE#(i, p) = 0
						SMOKE_PARTICLE_X#(i, p) = SMOKE_SYSTEM_X#(i) + Rnd(16) - 8
						SMOKE_PARTICLE_Y#(i, p) = SMOKE_SYSTEM_Y#(i) + Rnd(16) - 8
						SMOKE_PARTICLE_IMAGE(i, p) = Rnd(3) + 1

						// Get a free bob number
						For b = 0 to MAX_BOB_POOL - 1
							If BOB_POOL_STATUS(b) = 0
								BOB_POOL_STATUS(b) = 1
								SMOKE_PARTICLE_BOB(i, p) = b + SMOKE_BOB_OFFSET
								Exit
							End if
						Next b
						Exit
					End If
				Next p
			End If

			smoke_particle_count = 0
			For p = 0 to MAX_SMOKE_PARTICLES - 1
				If SMOKE_PARTICLE_STATUS(i, p) = 1
					Inc smoke_particle_count
					// Increase age
					Add SMOKE_PARTICLE_AGE#(i, p), 60 * DELTA_TIME#
					// Add Y velocity
					Add SMOKE_PARTICLE_Y#(i, p), SMOKE_SYSTEM_VY#(i) * DELTA_TIME#
					Add SMOKE_PARTICLE_X#(i, p), -(MAP_SPEED# * DELTA_TIME#)
					// Remove expired particles
					If SMOKE_PARTICLE_AGE#(i, p) >= SMOKE_SYSTEM_PARTICLE_MAX_AGE#(i)
						Bob Off SMOKE_PARTICLE_BOB(i, p)
						BOB_POOL_STATUS(SMOKE_PARTICLE_BOB(i, p) - SMOKE_BOB_OFFSET) = 0
						SMOKE_PARTICLE_STATUS(i, p) = 0
					End If
				End If
			Next p

			// If no active partcles and the status is 2, remove system
			If smoke_particle_count = 0 and SMOKE_SYSTEM_STATUS(i) = 2
				REMOVE_SMOKE_SYSTEM[i]
			End If

		End if
	Next i
Return

DRAW_SMOKE_SYSTEM:
	For i = 0 to MAX_SMOKE_SYSTEMS - 1
		If SMOKE_SYSTEM_STATUS(i) > 0
			For p = 0 to MAX_SMOKE_PARTICLES - 1
				If SMOKE_PARTICLE_STATUS(i, p) = 1
					Bob SMOKE_PARTICLE_BOB(i, p), SMOKE_PARTICLE_X#(i, p), SMOKE_PARTICLE_Y#(i, p), SMOKE_PARTICLE_IMAGE(i, p)
					// Set alpha based on age (clamped)
					Bob Alpha SMOKE_PARTICLE_BOB(i, p), Min(0.3, Max(0.01, 1 - SMOKE_PARTICLE_AGE#(i, p) / SMOKE_SYSTEM_PARTICLE_MAX_AGE#(i)))
					// Set scale based on age
					bob_scale# = Min(SMOKE_SYSTEM_PARTICLE_MIN_LENGTH#(i), SMOKE_PARTICLE_AGE#(i, p) / SMOKE_SYSTEM_PARTICLE_MAX_AGE#(i) * SMOKE_SYSTEM_PARTICLE_MAX_LENGTH#(i))
					Bob Scale SMOKE_PARTICLE_BOB(i, p), bob_scale#, bob_scale#
					Bob Rotate SMOKE_PARTICLE_BOB(i, p), -( Rnd(90) - 45 )
				End If
			Next p
		End if
	Next i
Return

UPDATE_HUD:
    Screen 2
    // Draw the empty bar first
    Paste Bob 102, 18, 703

    // "paint" the amount health
    If Int(PLAYER_HEALTH#) > 0
        For ph = 0 to Int(PLAYER_HEALTH#)
            Paste Bob 104 + ph, 19, 704
        Next ph
    End If

    // Draw the empty hit bar
    Paste Bob 102, 30, 706

    // "paint" the amount health
    If Int(PLAYER_HIT_POINTS#) > 0
        For ph = 0 to Int(PLAYER_HIT_POINTS#)
            Paste Bob 104 + ph, 31, 707
        Next ph
    End If

    // Draw empty upgrade bar
    Paste Bob 102, 42, 709

    KILLS_REQUIRED_HUD = Int((PLAYER_KILL_COUNT / KILLS_REQUIRED) * 100)

    If KILLS_REQUIRED_HUD >= 100
        Gosub UPGRADE_PLAYER_SHIP
        KILLS_REQUIRED_HUD = 0
        PLAYER_KILL_COUNT = 0
        Screen 2
    End If

    If KILLS_REQUIRED_HUD > 0
        For ph = 0 to Min(93, KILLS_REQUIRED_HUD)
            Paste Bob 104 + ph, 43, 699
        Next ph
    End If


	Screen 4
	Cls
	Paste Bob 0, 0, 1542
	DisplayValue[30, 5, 6, PLAYER_SCORE, 1]
	DisplayValue[30, 65, 6, PLAYER_LEVEL_SCORE, 0]

    // Back to game screen
    Screen 1
Return

Procedure DisplayValue[x, y, requiredLength, value, useGreen]
	// Draw the "blanks"
	For i = 0 To requiredLength - 1
		Paste Bob x + i * 32, y, 2009
	Next i

	// Draw the digits
	v$ = Str$(value): vLen = Len(v$)

	image_offset = 1962
	If useGreen = 1
		image_offset = 1992
	End If

	For i = 0 To vLen - 1
		s$ = Mid$(v$, i, 1)
		If Asc(s$) >= 48
			Paste Bob x + (requiredLength - vLen + i) * 32, y, (Asc(s$) + image_offset)
		End If
	Next i
End Proc

SAVE_MAX_LEVEL_DATA:
	Player Data itemName$ = "maxUnlockedArea", itemValue$ = Str$(MAX_LEVEL)
Return

SAVE_MAX_PLAYER_SHIP_DATA:
	Player Data itemName$ = "maxPlayerShip", itemValue$ = Str$(MAX_PLAYER_SHIP)
Return

POST_NEW_SCORE:
	Leaderboard Update leaderboardName$ = "Level" + Str$(LEVEL), value = PLAYER_LEVEL_SCORE
	Leaderboard Update leaderboardName$ = "TopScore", value = PLAYER_SCORE
Return

DO_RENAME:
	Screen Hide 3: Screen Show 5: Screen To Front 5: Screen 5: Cls
	Paste Bob 0, 0, 1499
	Paste Bob DW / 2, 100, 1540
	Paste Bob DW / 2, DH / 2, 1539
	Set Font "baloo", 40
	Ink 1: Text DW / 2, 320, "Update Player Name", "#center"

	DISPLAY_NAME$ = ""
	XPOS = (DW / 2) - 200

	UI TextBox "txtDisplayName", x=XPOS, y=350, width=400, class$="form-control", fontName$="baloo", value$=Player Name$()
	UI Button "btnSave", x=XPOS, y=720, width=200, content$="Save", class$="btn btn-success", onClick$="BUTTON_CLICK", fontName$="baloo"
	UI Button "btnBack", x=XPOS + 220, width=200, y=720, content$="Back", class$="btn btn-light", onClick$="BUTTON_CLICK", fontName$="baloo"

DO_RENAME_RETRY:

	BUTTON_CLICK_ID$ = ""
	Repeat
		CURRENT_TIME# = Timer
		DELTA_TIME# = Min(1, CURRENT_TIME# - LAST_TIME#)
		Gosub UPDATE_MOUSE
		Gosub UPDATE_MENU_BACKGROUND
		LAST_TIME# = CURRENT_TIME#
		Wait Vbl
	Until BUTTON_CLICK_ID$ <> ""

	// Back
	If BUTTON_CLICK_ID$ = "btnBack"
		UI Delete "txtDisplayName"
		UI Delete "btnSave"
		UI Delete "btnBack"
		PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
		Screen Hide 5
		LEVEL_SELECT = 1
		Goto GAME_MENU_FROM_INPUT
	End If

	PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
	DISPLAY_NAME$ = Trim$(UI Value$("txtDisplayName"))

	If DISPLAY_NAME$ = ""
		UI Popup "MyPopup", content$="Please enter a player name", placement$="top-center", class$="bg-danger text-light", delay=3000
		Goto DO_RENAME_RETRY
	End If

	Player Update playerName$=DISPLAY_NAME$

	If Player ErrorCode() <> 0
		UI Popup "MyPopup", content$=Player ErrorMessage$(), placement$="top-center", class$="bg-danger text-light", delay=3000
		Goto DO_RENAME_RETRY
	End If

	UI Popup "MyPopup", content$="Player name updated", placement$="top-center", class$="bg-success text-light", delay=3000

	UI Delete "txtDisplayName"
	UI Delete "btnSave"
	UI Delete "btnBack"
	Screen Hide 5
	Goto GAME_MENU_FROM_INPUT

DO_FORGOT_PASSWORD:
	Screen Hide 3: Screen Show 5: Screen To Front 5: Screen 5: Cls

	EMAIL$ = ""
	XPOS = (DW / 2) - 200

	Paste Bob 0, 0, 1499
	Paste Bob DW / 2, 100, 1540
	Paste Bob DW / 2, DH / 2, 1539
	Set Font "baloo", 40
	Ink 1: Text DW / 2, 320, "Send Account Recovery Email", "#center"

	UI TextBox "txtEmail", x=XPOS, y=350, width=400, placeHolder$="Email", class$="form-control", fontName$="baloo"
	UI Button "btnSend", x=XPOS, y=720, width=200, content$="Send", class$="btn btn-success", onClick$="BUTTON_CLICK", fontName$="baloo"
	UI Button "btnBack", x=XPOS + 220, width=200, y=720, content$="Back", class$="btn btn-light", onClick$="BUTTON_CLICK", fontName$="baloo"

DO_FORGOT_PASSWORD_RETRY:

	BUTTON_CLICK_ID$ = ""
	Repeat
		CURRENT_TIME# = Timer
		DELTA_TIME# = Min(1, CURRENT_TIME# - LAST_TIME#)
		Gosub UPDATE_MOUSE
		Gosub UPDATE_MENU_BACKGROUND
		LAST_TIME# = CURRENT_TIME#
		Wait Vbl
	Until BUTTON_CLICK_ID$ <> ""

	// Back
	If BUTTON_CLICK_ID$ = "btnBack"
		UI Delete "txtEmail"
		UI Delete "btnSend"
		UI Delete "btnBack"
		PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
		Goto DO_LOGIN
	End If

	PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
	EMAIL$ = Trim$(UI Value$("txtEmail"))

	If EMAIL$ = ""
		UI Popup "MyPopup", content$="Please enter an email address", placement$="top-center", class$="bg-danger text-light", delay=3000
		Goto DO_FORGOT_PASSWORD_RETRY
	End If

	Player SendAccountRecoveryEmail email$=EMAIL$

	If Player ErrorCode() <> 0
		UI Popup "MyPopup", content$=Player ErrorMessage$(), placement$="top-center", class$="bg-danger text-light", delay=3000
		Goto DO_FORGOT_PASSWORD_RETRY
	End If

	UI Popup "MyPopup", content$="A password recovery email has been sent", placement$="top-center", class$="bg-success text-light", delay=3000

	UI Delete "txtEmail"
	UI Delete "btnSend"
	UI Delete "btnBack"
	Screen Hide 5
	Goto GAME_MENU_FROM_INPUT

Procedure BUTTON_CLICK[ID$]
	BUTTON_CLICK_ID$ = ID$
End Proc

DO_REGISTER:
	Screen Hide 3: Screen Show 5: Screen To Front 5: Screen 5

	DISPLAY_NAME$ = ""
	EMAIL$ = ""
	PASSWORD$ = ""
	XPOS = (DW / 2) - 200

	UI TextBox "txtDisplayName", x=XPOS, y=350, width=400, class$="form-control", fontName$="baloo", placeHolder$="Player Name"
	UI TextBox "txtEmail", x=XPOS, y=450, width=400, class$="form-control", fontName$="baloo", placeHolder$="Email"
	UI TextBox "txtPassword", x=XPOS, y=550, width=400, class$="form-control", fontName$="baloo", type$="password", placeHolder$="Password"
	UI Button "btnRegister", x=XPOS, y=720, width=200, content$="Register", class$="btn btn-success", onClick$="BUTTON_CLICK", fontName$="baloo"
	UI Button "btnBack", x=XPOS + 220, width=200, y=720, content$="Back", class$="btn btn-light", onClick$="BUTTON_CLICK", fontName$="baloo"

	Cls
	Paste Bob 0, 0, 1499
	Paste Bob DW / 2, 100, 1540
	Paste Bob DW / 2, DH / 2, 1539
	Set Font "baloo", 40
	Ink 1: Text DW / 2, 320, "Register", "#center"

DO_REGISTER_RETRY:

	BUTTON_CLICK_ID$ = ""
	Repeat
		CURRENT_TIME# = Timer
		DELTA_TIME# = Min(1, CURRENT_TIME# - LAST_TIME#)
		Gosub UPDATE_MOUSE
		Gosub UPDATE_MENU_BACKGROUND
		LAST_TIME# = CURRENT_TIME#
		Wait Vbl
	Until BUTTON_CLICK_ID$ <> ""

	If BUTTON_CLICK_ID$ = "btnBack"
		UI Delete "txtDisplayName"
		UI Delete "txtEmail"
		UI Delete "txtPassword"
		UI Delete "btnRegister"
		UI Delete "btnBack"
		PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
		Screen Hide 5
		LEVEL_SELECT = 1
		Goto GAME_MENU_FROM_INPUT
	End If

	PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]

	// Get the values from the UI
	DISPLAY_NAME$ = Trim$(UI Value$("txtDisplayName"))
	EMAIL$ = Trim$(UI Value$("txtEmail"))
	PASSWORD$ = UI Value$("txtPassword")

	If DISPLAY_NAME$ = ""
		UI Popup "MyPopup", content$="Please enter a player name", placement$="top-center", class$="bg-danger text-light", delay=3000
		Goto DO_REGISTER_RETRY
	End If

	If EMAIL$ = ""
		UI Popup "MyPopup", content$="Please enter an email address", placement$="top-center", class$="bg-danger text-light", delay=3000
		Goto DO_REGISTER_RETRY
	End If

	If PASSWORD$ = ""
		UI Popup "MyPopup", content$="Please enter a password", placement$="top-center", class$="bg-danger text-light", delay=3000
		Goto DO_REGISTER_RETRY
	End If

	// Registers the current guest account to an email and password
	Player Register email$=EMAIL$, password$=PASSWORD$, playerName$=DISPLAY_NAME$

	If Player ErrorCode() <> 0
		UI Popup "MyPopup", content$=Player ErrorMessage$(), placement$="top-center", class$="bg-danger text-light", delay=3000
		Goto DO_REGISTER_RETRY
	End If

	UI Popup "MyPopup", content$="Player is now registered", placement$="top-center", class$="bg-success text-light", delay=3000

	// Remove UI
	UI Delete "txtDisplayName"
	UI Delete "txtEmail"
	UI Delete "txtPassword"
	UI Delete "btnRegister"
	UI Delete "btnBack"

	Screen Hide 5
	Goto GAME_MENU_FROM_INPUT

DO_LOGIN:
	Screen Hide 3: Screen Show 5: Screen To Front 5: Screen 5

	EMAIL$ = ""
	PASSWORD$ = ""
	XPOS = (DW / 2) - 200

	UI TextBox "txtEmail", x=XPOS, y=350, width=400, class$="form-control", fontName$="baloo", placeHolder$="Email"
	UI TextBox "txtPassword", x=XPOS, y=450, width=400, class$="form-control", fontName$="baloo", type$="password", placeHolder$="Password"
	UI Button "btnLogin", x=XPOS, y=720, width=200, content$="Login", class$="btn btn-success", onClick$="BUTTON_CLICK", fontName$="baloo"
	UI Button "btnBack", x=XPOS + 220, width=200, y=720, content$="Back", class$="btn btn-light", onClick$="BUTTON_CLICK", fontName$="baloo"
	UI Button "btnForgot", x=XPOS - 30, y=570, content$="Forgot Password", width=200, class$="btn btn-link", onClick$="BUTTON_CLICK"

DO_LOGIN_RETRY:
	Cls
	Paste Bob 0, 0, 1499
	Paste Bob DW / 2, 100, 1540
	Paste Bob DW / 2, DH / 2, 1539
	Set Font "baloo", 40
	Ink 1: Text DW / 2, 320, "Login", "#center"
	Set Font "baloo", 25

	BUTTON_CLICK_ID$ = ""
	Repeat
		CURRENT_TIME# = Timer
		DELTA_TIME# = Min(1, CURRENT_TIME# - LAST_TIME#)
		Gosub UPDATE_MOUSE
		Gosub UPDATE_MENU_BACKGROUND
		LAST_TIME# = CURRENT_TIME#
		Wait Vbl
	Until BUTTON_CLICK_ID$ <> ""

	If BUTTON_CLICK_ID$ = "btnBack"
		UI Delete "txtEmail"
		UI Delete "txtPassword"
		UI Delete "btnLogin"
		UI Delete "btnBack"
		UI Delete "btnForgot"
		PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
		Screen Hide 5
		LEVEL_SELECT = 1
		Goto GAME_MENU_FROM_INPUT
	End If

	If BUTTON_CLICK_ID$ = "btnForgot"
		UI Delete "txtEmail"
		UI Delete "txtPassword"
		UI Delete "btnLogin"
		UI Delete "btnBack"
		UI Delete "btnForgot"
		PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]
		Goto DO_FORGOT_PASSWORD
	End If

	PLAY_AUDIO_SAMPLE[MENU_CLICK, false, 1]

	// Get the values from the text input
	EMAIL$ = UI Value$("txtEmail")
	PASSWORD$ = UI Value$("txtPassword")

	If EMAIL$ = ""
		UI Popup "MyPopup", content$="Please enter an email address", placement$="top-center", class$="bg-danger text-light", delay=3000
		Goto DO_LOGIN_RETRY
	End If

	If PASSWORD$ = ""
		UI Popup "MyPopup", content$="Please enter a password", placement$="top-center", class$="bg-danger text-light", delay=3000
		Goto DO_LOGIN_RETRY
	End If

	Player Login email$=EMAIL$, password$=PASSWORD$

	If Player ErrorCode() <> 0
		UI Popup "MyPopup", content$=Player ErrorMessage$(), placement$="top-center", class$="bg-danger text-light", delay=3000
		Goto DO_LOGIN_RETRY
	End If

	MAX_LEVEL = Val(Player Data$("maxUnlockedArea"))
	MAX_PLAYER_SHIP = Val(Player Data$("maxPlayerShip"))

	// Remove the UI
	UI Delete "txtEmail"
	UI Delete "txtPassword"
	UI Delete "btnLogin"
	UI Delete "btnBack"
	UI Delete "btnForgot"

	Screen Hide 5
	LEVEL_SELECT = 1
	Goto GAME_MENU_FROM_INPUT

UPDATE_MOUSE:
	If Mouse Zone > 0: Change Mouse 4: Else: Change Mouse 1: End If
	Return

UPDATE_MENU_BACKGROUND:
	Screen 0
	Add XB#, -10 * DELTA_TIME#
	Add XB1#, -15 * DELTA_TIME#
	Add XB2#, -25 * DELTA_TIME#

	// Reset the x position when end of screen is reached
	If ABS(XB#) >= DW: XB# = 0: End If
	If ABS(XB1#) >= DW: XB1# = 0: End If
	If ABS(XB2#) >= DW: XB2# = 0: End If

	// Draw background images
	Paste Bob XB#, 0, 1497
	Paste Bob XB# + DW, 0, 1497
	Paste Bob XB1#, 0, 1496
	Paste Bob XB1# + DW, 0, 1496
	Paste Bob XB2#, 0, 1495
	Paste Bob XB2# + DW, 0, 1495

	Gosub GAME_MENU_ADD_SHIP
	Gosub UPDATE_ENEMY_SHIPS
	Gosub DRAW_ENEMY_SHIPS
	Screen 5
	Return

INIT_FADE_IN:
	ALPHA# = 1: Screen Show 20: Screen To Front 20
	FADE_COMPLETE = 0
Return

Procedure AnimFadeIn[returnScreen]
	If FADE_COMPLETE = 0
		Screen 20
		If ALPHA# > 0.01
			Add ALPHA#, -0.5 * DELTA_TIME#
			Bob 2000, 0, 0, 2000
			Bob Alpha 2000, Max(0, ALPHA#)
		Else
			ALPHA# = 0
			FADE_COMPLETE = 1
			Screen Hide 20
		End If
		Screen returnScreen
	End If
End Proc
