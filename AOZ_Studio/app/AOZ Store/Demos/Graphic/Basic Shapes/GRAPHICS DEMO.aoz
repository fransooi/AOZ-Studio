//////////////////////////////////////////////////////////////////
//                                                              //
//  GRAPHICS DEMO - A simple demo illustrating what's possible  //
//  with AOZ's basic graphics commands Plot, Draw, Disc and     //
//  Bar. It also shows an example of how javascript can be      //
//  included in AOZ programs, in this case used to fill the     //
//  circles, as at the time of writing, an AOZ alternative was  //
//  not yet available.                                          //
//                                                              //
//  The presets show examples of how the same code can be used  //
//  to create many visually different effects, from simple      //
//  moving lines to fully dynamic backgrounds just by changing  //
//  a few variables.                                            //
//                                                              //
//  By Dave Baldwin - August 2021                               //
//                                                              //
//////////////////////////////////////////////////////////////////


#fps:true					// Show FPS indicator
#speed:"graphics"			// Set the timing loop to FAST
#smoothing:true				// Turn on anti-aliasing
Radian
Curs off					// Turn off cursor
Pen 10						// Set Pen colour for Print instructions
Colour 10,$2e9011			// Change colour 10 to green
SW=Screen Width				// Define variable SW as the Screen Width
SH=Screen Height			// Define variable SH as the Screen Heigh
XC=SW/2						// Define XC as half of Screen Width ( this is the centre point of the screen)
YC=SH/2						// Define YC as half of Screen Height ( this is the centre point of the screen)
ZC=SH/2						// Define ZC as half of Screen Height ( this is the centre point of Z Coordinates)
I$="4"						// I$ carries the key presses recovered from Inkey$. Defining I$ as "2" here simulates the '2' key being pressed.
Gosub Presets				// Call the Presets routine which defines the variables
MP=5000 					// Set the maximum number of points/particles
Range=128 : Bright=80		// Define the colour range and brightness.
PS=1						// Set the default perspective scaling. 1 for ON, -1 for OFF
RED=1 : GREEN=1 : BLUE=1	// Set the default red, green, blue colour options, 1 for ON, -1 for OFF
WHITE=-1					// Set the default white colour option. 1 for ON, -1 for OFF
Dim X(MP),Y(MP),Z(MP)		// Set up arrays for X, Y and Z Coordinates
Dim XR#(MP),YR#(MP),ZR#(MP) // Set up arrays for X, Y and Z Rotation Angles
Dim XS#(MP),YS#(MP),ZS#(MP)	// Set up arrays for X, Y and Z Rotation Steps
Dim CC(MP)					// Set up array for point/particle Colours
Global I$
//Touch On Change "Random_Preset"
// Create Particles
For f=0 to MP				// Define loop for values 0 to value of MP
	X(f)=rnd(SW) : Y(f)=rnd(SH) : Z(f)=rnd(SH)	// Define X,Y and Z coordines for this element of the arrays.
	XR#(f)=300 : YR#(f)=300 : ZR#=300			// Define rotation angles for this element of the arrays.
	XS#(f)=(rnd(200)-100)/1289 : YS#(f)=(rnd(200)-100)/1373 : ZS#(f)=(rnd(200)-100)/1367  // Define rotation steps for this element of the arrays.
							// Random numbers are generated between -100 and 100, then divided by prime numbers 1289,1373 and 1367. Using primes
							// helps prevent apparent synchronisation between the particles and creates a true random effect.
Next f						// Repeat loop
Ink 5						// Set Ink colour. This will be used in all drawing operations

// Random Colour Generator
Colour_Gen:
RE=0 : GE=0 : BE=0							// Reset the colour elements to 0
For f=0 to MP								// Define loop for values 0 to value of MP
	If RED=1 then RE=rnd(Range)+Bright			// Check if RED is ON and if it is, generate a random value using Range and Bright variables
	If GREEN=1 then GE=rnd(Range)+Bright		// Check if GREEN is ON and if it is, generate a random value using Range and Bright variables
	If BLUE=1 then BE=rnd(Range)+Bright			// Check if BLUE is ON and if it is, generate a random value using Range and Bright variables
	If WHITE=1									// Check if WHITE is ON and if it is,
		CC(f)=$ffffff								// set the colour C(f) to white ($ffffff)
	else										// or
		CC(f)=RE*65536+GE*256+BE					// set the colour C(f) to the random colour made up of the RED, GREEN and BLUE elements generated earlier
	End if
Next f										// Repeat loop

// Main Program Loop
do												// Start loop
	Expand#=exp((EX#-EX_START#)/14)/100			// Define Expand# variable, this creates the zooming effect at the start of the program
	for f=1 to P								// Define loop for values 1 to P (number of active points)
		ZX# = cos(ZR#(f)) * (Z(f)-ZC) - sin(ZR#(f)) * (Z(f)-ZC)	// Algorithm for calculation of point display positions
		ZY# = sin(ZR#(f)) * (Z(f)-ZC) + cos(ZR#(f)) * (Z(f)-ZC)	// Algorithm for calculation of point display positions
		XX# = cos(XR#(f)) * (X(f)-XC) - sin(XR#(f)) * (X(f)-XC)	// Algorithm for calculation of point display positions
		XY# = sin(XR#(f)) * (X(f)-XC) + cos(XR#(f)) * (X(f)-XC)	// Algorithm for calculation of point display positions
		YX# = cos(YR#(f)) * (Y(f)-YC) - sin(YR#(f)) * (Y(f)-YC)	// Algorithm for calculation of point display positions
		YY# = sin(YR#(f)) * (Y(f)-YC) + cos(YR#(f)) * (Y(f)-YC)	// Algorithm for calculation of point display positions
		IF PS=1									// Check if Perspective scaling is active (PS) and if it is...
			S#=(Sin(ZR#(f))+1.5 ) * Expand# * 40	// set scale to simulate perspective
		Else									// and if it isn't
			S#=(Sin(ZR#(f))+1.5 ) * 10				// set scale to constant value
		End if
		colour 5,CC(f)							// Set colour 5 (the Ink colour) to the value stored in C(f).
		NX#=(ZX#+XX#+YX#)*Expand#+XC			// Define New X coordinate
		NY#=(ZY#+XY#+YY#)*Expand#+YC			// Define New Y coordinate
		NXS#=NX#+S#/2							// Define Next X
		NYS#=NY#+S#/2							// Define Next Y
		If f=1 then FX#=LX# : FY#=LY#			// Check if it's the first time the loop is executed and if it is, set FX# and FY# (first point) to the value of LX# and LY# (last point)
												// This is used to create a continuous poly-line and joins the start and end points properly
		If l=1									// Check if Line (l) is ON, and if it is...
			If poly=1								// Check if Polyline is ON and if it is...
				Plot LX#,LY#							// Plot a point at coordinates LX#,LY#
			Else									// and if it isn't...
				Plot SW/2,SH/2							// Plot a point at the centre of the screen
			End if
			If f=P								// Check if the loop is on the last iteration and if it is...
				Draw to FX#,FY#						// Draw a line to the First Point coordinates
			else								// and if it isn't
				Draw to NXS#,NYS#					// Draw a line to the next point coordinates
			End if
		End if
		If c=1									// Check if Circle (c) is ON, and if it is
			Disc NXS#,NYS#,S#/1.5					// Draw a circle at coordinates NXS#, NYS# of radius S#/1.5
		else if s=1								// Check if Star (s) is ON, and if it is
			Star NXS#,NYS#,S#,S#/5,5,XR#(f),true	// Draw a star at coordinates NXS#, NYS# of radius S#/1.5
		else if b=1								// check if Box (b) is ON, and if it is
			Shape NXS#,NYS#,S#/1.5,S#/1.5,4,XR#(f),true		// Draw a square box at coordinates NX#, NY# of side S# pixels
		else if t=1								// check if Triangle (t) is ON, and if it is
			Shape NXS#,NYS#,S#/1.5,S#/1.5,3,XR#(f),true		// Draw a square box at coordinates NX#, NY# of side S# pixels
		end if
		LX#=NXS# : LY#=NYS#						// Copy the current coordinates NXS#,NYS# into LX#,LY#
		sp#=Speed#/25							// Define the speed multiplier (for global speed changes)
		Add XR#(f),XS#(f)*sp#					// Increase/decrease the rotation angle XR#(f) by the rotation step XS#(f) and multiply by the speed multiplier
		Add YR#(f),YS#(f)*sp#					// Increase/decrease the rotation angle YR#(f) by the rotation step YS#(f) and multiply by the speed multiplier
		Add ZR#(f),ZS#(f)*sp#					// Increase/decrease the rotation angle ZR#(f) by the rotation step ZS#(f) and multiply by the speed multiplier
	Next f										// Repeat Loop
	If EX_START#>0 then Add EX_START#,-Max(0.01,EX_START#/30) // Check if the 'expand at start' variable is still positive and if it is, decrease it a bit
	Wait vbl										// Make the program wait one frame. This is when the display updates and everything is re-drawn
	I$=Inkey$										// Define I$ as the next character from the keyboard buffer
	If I$="e" and Speed#>1 then add Speed#,-1		// Check if 'e' has been pressed and Speed# is more than 1, and if it is, decrease Speed#
	If I$="r" and Speed#<100 then add Speed#,1		// Check if 'r' has been pressed and Speed# is less than 100, and if it is, increase Speed#
	If I$="d" and EX#>1 then add EX#,-1				// Check if 'd' has been pressed and Expand (EX#) is more than 1, and if it is, decrease EX#
	If I$="f" and EX#<100 then add EX#,1			// Check if 'f' has been pressed and EX# is less than 100, and if it is, increase EX#
	If I$="g" and P>1.5 then add P,Min(-P/100,-1)	// Check if 'g' has been pressed and number of particle (P) is more than 1.5, and if it is, decrease P
	If I$="h" and P<MP then add P,Max(P/100,1)		// Check if 'h' has been pressed and number of particle (P) is less than maximum particles (MP), and if it is, decrease P
	P=Min(P,MP)										// This checks if P has exeeded the maximum number of points and if it has, sets it at MP
	If I$="n" then cl=-cl							// Check if 'n' has been pressed and if it has toggle Cls (cl) ON/OFF
	If I$="l" then l=-l								// Check if 'l' has been pressed and if it has toggle Lines (l) ON/OFF
	If I$="b" then b=-b : c=-1 : s=-1 : t=-1		// Check if 'b' has been pressed and if it has toggle Boxes (b) ON/OFF and turn off Circles & Stars
	If I$="c" then c=-c : b=-1 : s=-1 : t=-1		// Check if 'c' has been pressed and if it has toggle Circles (c) ON/OFF and turn off Boxes & Stars
	if I$="s" then s=-s : b=-1 : c=-1 : t=-1		// Check if 's' has been pressed and if it has toggle Stars (s) ON/OFF and turn off Boxes & Circles
	if I$="t" then t=-t : b=-1 : c=-1 : s=-1		// Check if 's' has been pressed and if it has toggle Stars (s) ON/OFF and turn off Boxes & Circles
	If I$="v" then VIS=-VIS							// Check if 'v' has been pressed and if it has toggle Console (VIS) ON/OFF
	If I$="p" then poly=-poly : l=1					// Check if 'p' has been pressed and if it has toggle Polylines (poly) ON/OFF and turn Lines ON
	If I$="u" then RED=-RED : goto Colour_Gen		// Check if 'u' has been pressed and if it has toggle Red (RED) ON/OFF then call Colour_Gen to remap the colours
	If I$="i" then GREEN=-GREEN : goto Colour_Gen	// Check if 'i' has been pressed and if it has toggle Green (GREEN) ON/OFF then call Colour_Gen to remap the colours
	If I$="o" then BLUE=-BLUE : goto Colour_Gen		// Check if 'o' has been pressed and if it has toggle Blue (BLUE) ON/OFF then call Colour_Gen to remap the colours
	If I$="w" then WHITE=-WHITE : goto Colour_Gen	// Check if 'w' has been pressed and if it has toggle White (WHITE) ON/OFF then call Colour_Gen to remap the colours
	If I$="x" then PS=-PS							// Check if 'x' has been pressed and if it has toggle Scaling (PS) ON/OFF
	If I$="!" then I$="10"							// Check if '!' has been pressed and if it has set I$ to "10" (this is a secret preset!)
	If I$="0" or I$="1" or I$="2"or I$="3"or I$="4"or I$="5" or I$="6" or I$="7" or I$="8" or I$="9" or I$="10" then gosub Presets : TChange=0 : I$="m" // Check if one of the number keys has been pressed and call the Presets routine if it has.
	If cl=1 then cls 0								// Check if Cls is ON and clear screen if it is
	If I$="m" then goto Colour_Gen					// Check if "m" has been pressed and if it has, call the colour generator 'Colour_Gen' to remap the colours
													// Here, we break out of the main program loop, remap the colours and start the main loop again.
 	If VIS=1										// Check if console is ON and if it is
		Locate 0,3: Print "Speed     (e/r)=";Speed#	// Position cursor at 0,3 then Print "Speed     (e/r)=" followed by the Speed# variable value
		Locate 0,4: Print "Expand    (d/f)=";EX#	// Position cursor at 0,4 then Print "Expand    (d/f)=" followed by the EX# variable value
		Locate 0,5: Print "Particles (g/h)=";P		// Position cursor at 0,5 then Print "Particles (g/h)=" followed by the P variable value
		Locate 0,6: Print "Circle      (c)= ";		// Position cursor at 0,6 then Print "Circle      (c)=" followed by
		If c=1										// Check if circles (c) is ON and if it is
			Print "ON "									// Print the word "ON"
		Else										// and if it isn't
			Print "OFF"									// Print the word "OFF"
		End if
		Locate 0,7: Print "Box         (b)= ";		// You get the idea
		If b=1
			Print "ON "
		Else
			Print "OFF"
		End if
		Locate 0,8: Print "Star        (s)= ";
		If s=1
			Print "ON "
		Else
			Print "OFF"
		End if
		Locate 0,8: Print "Triangle    (t)= ";
		If t=1
			Print "ON "
		Else
			Print "OFF"
		End if
		Locate 0,9: Print "Lines       (l)= ";
		If l=1
			Print "ON "
		Else
			Print "OFF"
		End if
		Locate 0,10: Print "Poly Lines  (p)= ";
		If poly=1
			Print "ON "
		Else
			Print "OFF"
		End if
		Locate 0,11: Print "Scaling     (x)= ";
		If PS=1
			Print "ON "
		Else
			Print "OFF"
		End if
		Locate 0,12: Print "Cls         (n)= ";
		If cl=1
			Print "ON "
		Else
			Print "OFF"
		End if
		Locate 0,14: Print "Red         (u)= ";
		If RED=1
			Print "ON "
		Else
			Print "OFF"
		End if
		Locate 0,15: Print "Green       (i)= ";
		If GREEN=1
			Print "ON "
		Else
			Print "OFF"
		End if
		Locate 0,16: Print "Blue        (o)= ";
		If BLUE=1
			Print "ON "
		Else
			Print "OFF"
		End if
		Locate 0,17: Print "White       (w)= ";
		If WHITE=1
			Print "ON "
		Else
			Print "OFF"
		End if

		Locate 0,18: Print "Remap       (m)"				// Position cursor at 0,18 then Print some text
		Locate 0,20: Print "Console     (v)"				// Position cursor at 0,20 then Print some text
		Locate 0,21: Print "Presets  (0 to 9)"				// Position cursor at 0,21 then Print some text

	End if
Loop
// Preset Data
Presets:													// Label that can be called by Gosub
	Cls 0													// Clear screen with colour 0
	Restore Val (I$)										// Restore data point to the line corresponding with the number key pressed (0 to 9)
	Read EX_START#,EX#,Speed#,VIS,cl,c,b,s,t,l,poly,P,RED,GREEN,BLUE,WHITE,PS

	// Read the data from that line into the variables listed
	LX#=XC : LY#=YC													// Set coordinate variables LX# and LY# to screen centre
	0: Data 89, 90, 1,-1, 1,-1, 1,-1,-1,-1,-1,1500, 1, 1,-1,-1, 1	// Data sets for the various presets. Note that spacing the numbers out so they fall
	1: Data 40, 46,15, 1, 1, 1,-1,-1,-1, 1, 1,   8, 1, 1, 1,-1, 1	// into neat rows makes them much easier to read and keep track of what you're doing.
	2: Data 40, 50, 8, 1, 1,-1,-1,-1,-1, 1,-1, 500, 1, 1, 1,-1,-1
	3: Data 40, 50,25, 1, 1,-1, 1,-1,-1,-1,-1, 500,-1,-1, 1,-1, 1
	4: Data 40, 52, 9,-1, 1,-1,-1, 1,-1,-1,-1, 500, 1, 1, 1,-1, 1
	5: Data 55, 65, 1,-1,-1,-1,-1,-1,-1, 1, 1, 120, 1, 1, 1,-1,-1
	6: Data 80,100, 1,-1,-1,-1,-1,-1,-1, 1,-1, 150, 1, 1, 1,-1,-1
	7: Data  0, 59, 1,-1,-1, 1,-1,-1,-1,-1,-1, 500, 1, 1, 1,-1,-1
	8: Data 30, 45, 7, 1,-1,-1,-1,-1,-1, 1,-1, 250, 1,-1, 1,-1,-1
	9: Data  0, 65, 1,-1,-1,-1,-1,-1,-1, 1, 1,  25, 1,-1,-1,-1,-1
   10: Data 99,100,99,-1, 1,-1,-1,-1,-1, 1,-1, 800,-1, 1, 1,-1,-1
Return																// Return to the main program loop.
Procedure Random_Preset
	I$=Str$(rnd(10))-" "
	TChange=1
End Proc
