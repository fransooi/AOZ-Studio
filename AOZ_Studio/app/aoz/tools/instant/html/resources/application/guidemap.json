{"chapters":[{"name":"Animate Actor","id":1639692453750,"descriptions":[{"lang":"en","text":"Direct your sprites like actors on a theater stage. Give them directions, give them movements and they will execute themselves automatically."}],"descriptions_file":[],"author":"","since":"","last":"","deprecated":[],"keywords":[{"lang":"en","text":"graphic,design,image,sprite,character,layout,screen,display,show,actor,bob,draw"}],"pages":[{"name":"Actor","descriptions":[{"lang":"en","text":"Image manipulation on the screen."}],"descriptions_file":[{"lang":"en","text":"<i>instruction: image manipulation on the screen.</i><br><b>Actor</b> number, list<br><b>Actor</b> name$, list<br><br>This command allows you to manipulate the actors in the manner of a director, transforming them into real actors. The Actor command makes it easy to movement (moving, zooming, rotation...), control (keyboard, joystick, mouse) and animation.<br><br>Exemple 1:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Actor 1, Image$=\"ship\"</li></ul>This code displays the Actor 1 at the top left of the screen. This Actor uses the \"ship\" image. <br><br>But Actor allows you to do much more. It is a very complete instruction that allows:<br>- animate an image.<br>- create motion and transformation interpolations.<br>- associate a control (keyboard, mouse or gamepad) to the Actor.<br>- to associate events like mouse click, drag and drop.<br>- associate events to AOZ procedures (collision, end of move...).<br><br>And all this is managed by AOZ in an autonomous way, without slowing down your program.<br><br><b>Interpolations</b><br>An interpolation is the transition made between 2 states of an image. It can be a displacement from one point to another, or a change of shape. Actor manages this interpolation system.<br><br><b>Motion Interpolation</b><br>Let's take our simple example above and modify it:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Actor 1, StartX=0, EndX=1280, Image$=\"ship\"</li></ul>Actor 1 moves very quickly to the right of the screen. The <i>StartX</i> and <i>EndX</i> properties are used to define the X position of the starting point of the motion interpolation, and the X position of the ending point.<br><br>The interpolation is played automatically. However, it is too fast to be appreciated. Let's modify our code again:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Actor 1, StartX=0, EndX=1280, Image$=\"ship\", Duration=5000</li></ul>This time Actor 1 moves more slowly. The Duration property that we added to our code indicates the duration of the interpolation, in milliseconds (here 5000, or 5 seconds).<br>If this duration is not specified, it is set to 1000 (1 sec) by default.<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the Actor"},{"lang":"en","name":"*x","type":"integer","text":"Actor horizontal position on the screen. If not set, 0 by default"},{"lang":"en","name":"*y","type":"integer","text":"Actor vertical position on the screen. if not set, 0 by default"},{"lang":"en","name":"*z","type":"integer","text":"Actor depth position on the screen. if not set, 0 by default"},{"lang":"en","name":"*startx","type":"integer","text":"Actor horizontal start position on the screen for a moving. If not set, the \"x\" position is used."},{"lang":"en","name":"*starty","type":"integer","text":"Actor vertical start position on the screen for a moving. If not set, the \"y\" position is used."},{"lang":"en","name":"*endx","type":"integer","text":"Actor horizontal end position on the screen for a moving. If not set, the \"x\" position is used."},{"lang":"en","name":"*endy","type":"integer","text":"Actor vertical end position on the screen for a moving. If not set, the \"y\" position is used."},{"lang":"en","name":"*image","type":"index","text":"Index of the image of Actor."},{"lang":"en","name":"*duration","type":"integer","text":"Length in milliseconds of the Actor moving. If not set, 1000 by default (1 second)"},{"lang":"en","name":"*onchange$","type":"string","text":"Name of the AOZ procedure to call when the Actor change (position, alpha, scale...)"},{"lang":"en","name":"*transition$","type":"string","text":"Name of the transition when the Actor moves. If not set, \"linear\" is used. Visit https"},{"lang":"en","name":"*scale","type":"float","text":"Modification of the Actor size in height and width. If not set, the last scaling value is used."},{"lang":"en","name":"*startscale","type":"float","text":"Modification of the Actor start size in height and width for a Actor moving. If not set, the last scaling value is used."},{"lang":"en","name":"*endscale","type":"float","text":"Modification of the Actor end size in height and width for a Actor moving. If not set, the last scaling value is used."},{"lang":"en","name":"*scalex","type":"float","text":"Modification of the Actor size in width. If not set, the last horizontal scaling value is used."},{"lang":"en","name":"*startscalex","type":"float","text":"Modification of the Actor start size in width for a Actor moving. If not set, the last horizontal scaling value is used."},{"lang":"en","name":"*endscalex","type":"float","text":"Modification of the Actor end size in width for a Actor moving. If not set, the last horizontal scaling value is used."},{"lang":"en","name":"*angle","type":"float","text":"Modification of the Actor angle of rotation. If not set, the last angle is used."},{"lang":"en","name":"*startangle","type":"float","text":"Modification of the Actor start angle of rotation for a Actor moving. If not set, the last angle value is used."},{"lang":"en","name":"*endangle","type":"float","text":"Modification of the Actor end angle of rotation for a Actor moving. If not set, the last angle value is used."},{"lang":"en","name":"*alpha","type":"float","text":"Modification of the Actor alpha value. If not set, the last alpha value is used."},{"lang":"en","name":"*startalpha","type":"float","text":"Modification of the Actor start alpha value for a Actor moving. If not set, the last alpha value is used."},{"lang":"en","name":"*endalpha","type":"float","text":"Modification of the Actor end alpha value for a Actor moving. If not set, the last alpha is used."},{"lang":"en","name":"*skewx","type":"float","text":"Modification of the Actor horizontal skewing. If not set, the last alpha value is used."},{"lang":"en","name":"*startskewx","type":"float","text":"Modification of the Actor start horizontal skewing for a Actor moving. If not set, the last horizontal skewing value is used."},{"lang":"en","name":"*endskewx","type":"float","text":"Modification of the Actor end horizontal skewing for a Actor moving. If not set, the last horizontal skewing value is used."},{"lang":"en","name":"*skewy","type":"float","text":"Modification of the Actor vertical skewing. If not set, the last alpha value is used."},{"lang":"en","name":"*startskewy","type":"float","text":"Modification of the Actor start vertical skewing for a Actor moving. If not set, the last vertical skewing value is used."},{"lang":"en","name":"*endskewy","type":"float","text":"Modification of the Actor end vetical skewing for a Actor moving. If not set, the last vertical skewing value is used."},{"lang":"en","name":"*visible","type":"bool","text":"Set the Actor visibility. If not set, True by default is used."},{"lang":"en","name":"*Actorsheet$","type":"string","text":"Name of the Actorsheet loaded with the Load Asset instruction to animate the Actor."},{"lang":"en","name":"*anim$","type":"string","text":"Name of the animation provided by the Actorsheet to play."},{"lang":"en","name":"*loopanim","type":"bool","text":"Set if the animation should play to the infinite, or not. If not set, False by default is used."},{"lang":"en","name":"*hotspot$","type":"string","text":"Set the hot spot of the Actor. les valeurs suivantes sont accept√©es "},{"lang":"en","name":"*hotspotx","type":"integer","text":"Set the horizontal hot spot position of the Actor. If not set, 0 is used by default ( left )."},{"lang":"en","name":"*hotspoty","type":"integer","text":"Set the vertical hot spot position of the Actor. If not set, 0 is used by default ( top )."},{"lang":"en","name":"*onanimchange$","type":"string","text":"Name of the AOZ procedure to call when the Actor animation change ( number of frame, state,...)"},{"lang":"en","name":"*oncollision$","type":"string","text":"Name of the AOZ procedure to call when the Actor enter in collision with an other object."},{"lang":"en","name":"*loopmove","type":"bool","text":"Set if the moving should play to the infinite, or not. If not set, False by default is used."},{"lang":"en","name":"*actionmove$","type":"string","text":"Action for the moving. May be \"play\" (by default is not set) or \"pause\"."},{"lang":"en","name":"*control$","type":"string","text":"Set one or more controls that will allow the user to interact with the Actor (keyboard, mouse or joystick)."},{"lang":"en","name":"*oncontrol$","type":"string","text":"Name of the AOZ procedure to call when a control is activated for the Actor (keyboard, mouse or joystick)."},{"lang":"en","name":"*hrev","type":"bool","text":"Set if the horizontal flipping of the Actor. If True, the Actor is flipped horizontaly. If not set, False by default is used."},{"lang":"en","name":"*vrev","type":"bool","text":"Set if the vertical flipping of the Actor. If True, the Actor is flipped verticaly. If not set, False by default is used."},{"lang":"en","name":"*leftlimit","type":"integer","text":"Set the left limitation for the Actor."},{"lang":"en","name":"*toplimit","type":"integer","text":"Set the top limitation for the Actor."},{"lang":"en","name":"*uplimit","type":"integer","text":"Alias of toplimit."},{"lang":"en","name":"*rightlimit","type":"integer","text":"Set the right limitation for the Actor."},{"lang":"en","name":"*bottomlimit","type":"integer","text":"Set the bottom limitation for the Actor."},{"lang":"en","name":"*downlimit","type":"integer","text":"Alias of bottomlimit."},{"lang":"en","name":"*onlimit$","type":"string","text":"Name of the AOZ procedure to call when the Actor touch a limit."},{"lang":"en","name":"*lookat$","type":"string","text":"Name of the object the actor has to look at. This can be the position of the mouse, another actor or a point on the screen."},{"lang":"en","name":"*auto$","type":"string","text":"Defined an automatic movement of the actor. It uses the same parameters as for the Control$ property"},{"lang":"en","name":"*onmouse$","type":"string","text":"Name of the AOZ that will be called at each mouse action on the actor."},{"lang":"en","name":"*enable","type":"bool","text":"Enables or disables an actor. If False, the Actor will still be displayed on the screen, but the controls, animations and mouse actions will be disabled."},{"lang":"en","name":"*Group$","type":"string","text":"Assigns the actor to a custom group. A custom group can be assigned to several Actor. By example"},{"lang":"en","name":"*Physic$","type":"string","text":"Applique un comportement physique √† l'Actor. Le comportement est nomm√© par son nom "},{"lang":"en","name":"*PhysicParam$","type":"string","text":"Param√®tres du comportement physique. Si ces param√®tres sont manquants, ce sont les param√®tres par d√©faut du comportement qui seront pris en compte."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Actor Alpha","descriptions":[{"lang":"en","text":"Returns the value of the Actor's Alpha"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the value of the Actor's Alpha</i><br>value=<b>Actor Alpha</b>(number)<br>value=<b>Actor Alpha</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, alpha=0.5, image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor Alpha( 1 ) )</li></ul>Display \"0.5\" on the screen<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the actor"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"Value of the alpha-blending."}]},{"name":"Actor Angle","descriptions":[{"lang":"en","text":"Returns the value of the Actor's Angle"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the value of the Actor's Angle</i><br>value=<b>Actor Angle</b>(number)<br>value=<b>Actor Angle</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, Angle = 51, Image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor Angle( 1 ) )</li></ul>Display \"51\" on the screen<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"Value of the angle of rotation."}]},{"name":"Actor Anim$","descriptions":[{"lang":"en","text":"Returns the name of the Actor's Animation"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the name of the Actor's Animation</i><br>a$=<b>Actor Anim$</b>( number )<br>a$=<b>Actor Anim$</b>( name$ )<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Load Asset \"hero.sprite\", \"my_hero\"</li><li class=\"ex_code_line\">Actor 1, SpriteSheet$=\"my_hero\", Anim$=\"run\"</li><li class=\"ex_code_line\">Print Actor Anim$( 1 ) // Return \"run\"</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the actor"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"Name of the image."}]},{"name":"Actor Anim Frame","descriptions":[{"lang":"en","text":"Returns the number of the frame of the Actor's Animation"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the number of the frame of the Actor's Animation</i><br>frame=<b>Actor Anim Frame</b>(number)<br>frame=<b>Actor Anim Frame</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Load Asset \"hero.sprite\", \"my_hero\"</li><li class=\"ex_code_line\">Actor 1, SpriteSheet$=\"my_hero\", Anim$=\"run\"</li><li class=\"ex_code_line\">Print Actor Anim Frame( 1 ) // Return \"run\"</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the actor"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Number of the frame."}]},{"name":"Actor Col","descriptions":[{"lang":"en","text":"Tests the collision between 2 actors"}],"descriptions_file":[{"lang":"en","text":"<i>function:tests the collision between 2 actors</i><br>value=<b>Actor Col</b>(actor1, actor2)<br>value=<b>Actor Col</b>(actor1$, actor2)<br>value=<b>Actor Col</b>(actor1, actor2$)<br>value=<b>Actor Col</b>(actor1$, actor2$)<br>value=<b>Actor Col</b>(actor1, image$=name$)<br>value=<b>Actor Col</b>(actor1$, image$=name$)<br>value=<b>Actor Col</b>(actor1$, group$=name$)<br><br>Returns True if the actor1 is in collision with an other actor or an image, else False.<br><br>Example 1:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Actor 1, StartX=0, EndX=1280, Duration=6000, Image$=\"ship.png\"</li><li class=\"ex_code_line\">Actor 2, X=500,Image$=\"ship.png\"</li><li class=\"ex_code_line\">Do</li><li class=\"ex_code_line\">If Actor Col( 1, 2 ) Then Boom : End // End of program on the collision between Actor 1 and Actor 2 </li><li class=\"ex_code_line\">Wait Vbl</li><li class=\"ex_code_line\">Loop</li></ul><br>Example 2:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Actor 1, StartX=0, EndX=1280, Duration=6000, Image$=\"magic.png\"</li><li class=\"ex_code_line\">Actor 2, X=500, Image$=\"ship.png\"</li><li class=\"ex_code_line\">Do</li><li class=\"ex_code_line\">If Actor Col( 1, Image$=\"ship\" ) Then Boom : End // End of program on the collision between Actor 1 and an Actor with the \"ship\" image. </li><li class=\"ex_code_line\">Wait Vbl</li><li class=\"ex_code_line\">Loop</li><br><li class=\"ex_code_line\">Example 3:</li></ul>Actor 1, StartX=0, EndX=1280, Duration=6000, Image$=\"magic.png\"<br>Actor 2, X=500, Image$=\"monster1.png\", Group$=\"badguy\"<br>Actor 3, X=200, Y = 200, Image$=\"monster2.png\", Group$=\"badguy\"<br>Do<br>If Actor Col( 1, Group$=\"badguy\" ) Then Boom : End // End of program on the collision between Actor 1 and an Actor of the \"badguy\" group. <br>Wait Vbl<br>Loop<br><ul class=\"doc_code\">"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the actor 1"},{"lang":"en","name":"index2","type":"index","text":"Index of the actor 2"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"bool","text":"True if a collision exists, else false."}]},{"name":"Actor Del","descriptions":[{"lang":"en","text":""}],"descriptions_file":[{"lang":"en","text":"<i>instruction:delete an actor</i><br><b>Actor Del</b> number<br><b>Actor Del</b> name$<br><b>Actor Del</b> \"*\"<br><br>Example 1:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, x=100, y=50, image$=\"magic\"</li><li class=\"ex_code_line\">Actor Del 1 // Remove the Actor 1</li></ul><br>Example 2:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, x=100, y=50, image$=\"magic\"</li><li class=\"ex_code_line\">Actor \"lucie\", x=200, y=0, image$=\"lucie\"</li><li class=\"ex_code_line\">Actor Del \"*\" // Remove All the actors</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the Actor. If \"*\" is used, all the actors will been removed."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Actor Exists","descriptions":[{"lang":"en","text":"Tests if an actor exists"}],"descriptions_file":[{"lang":"en","text":"<i>function:tests if an actor exists</i><br>value=<b>Actor Exists</b>(number)<br>value=<b>Actor Exists</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, Image$=\"my_image\"</li><li class=\"ex_code_line\">Print Str$( Actor Exists( 1 ) )</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the actor"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"bool","text":"True or False."}]},{"name":"Actor Group$","descriptions":[{"lang":"en","text":"Returns the Group value of the Actor"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the Group value of the Actor</i><br>T$=<b>Actor Group$</b>(number)<br>T$=<b>Actor Group$</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, x=100, y=50, image$=\"magic\", Group$=\"player\"</li><li class=\"ex_code_line\">Print Str$( Actor Group$( 1 ) )</li></ul>Display \"player\" on the screen<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"Value of the group."}]},{"name":"Actor Height","descriptions":[{"lang":"en","text":"Returns the height of the Actor"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the height of the Actor</i><br>value=<b>Actor Height</b>(number)<br>value=<b>Actor Height</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor Height( 1 ) )</li></ul>Display \"211\" on the screen<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the actor"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"Value of the height."}]},{"name":"Actor Image","descriptions":[{"lang":"en","text":"Returns the number of the image used by the actor"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the name of the image used by the actor</i><br>a=<b>Actor Image</b>(number)<br>a=<b>Actor Image</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, image=2</li><li class=\"ex_code_line\">Print Str$( Actor Image( 1 ) )</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the actor"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Value of the image."}]},{"name":"Actor Image$","descriptions":[{"lang":"en","text":"Returns the name of the image used by the actor"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the name of the image used by the actor</i><br>a$=<b>Actor Image$</b>(number)<br>a$=<b>Actor Image$</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, Image$=\"my_image\"</li><li class=\"ex_code_line\">Print Actor Image$( 1 )</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the actor"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"Name of the image."}]},{"name":"Actor IsEnable","descriptions":[{"lang":"en","text":"Tests if an actor is enabled"}],"descriptions_file":[{"lang":"en","text":"<i>function:tests if an actor is enabled</i><br>value=<b>Actor IsEnable</b>(number)<br>value=<b>Actor IsEnable</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, Image$=\"my_image\"</li><li class=\"ex_code_line\">Print Str$( Actor IsEnable( 1 ) )</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the actor"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"bool","text":"True or False."}]},{"name":"Actor IsHRev","descriptions":[{"lang":"en","text":"Tests if an actor is horizontaly reversed"}],"descriptions_file":[{"lang":"en","text":"<i>function:tests if an actor is horizontaly reversed</i><br>value=<b>Actor IsHRev</b>(number)<br>value=<b>Actor IsHRev</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, HRev = True, image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor IsHRev( 1 ) )</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"bool","text":"True if the Actor is flipped horizontaly, else False."}]},{"name":"Actor IsVisible","descriptions":[{"lang":"en","text":"Tests if an actor is visible"}],"descriptions_file":[{"lang":"en","text":"<i>function:tests if an actor is visible</i><br>value=<b>Actor IsVisible</b>(number)<br>value=<b>Actor IsVisible</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, Image$=\"my_image\"</li><li class=\"ex_code_line\">Print Str$( Actor IsVisible( 1 ) )</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the actor"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"bool","text":"True or False."}]},{"name":"Actor IsVRev","descriptions":[{"lang":"en","text":"Tests if an actor is verticaly reversed"}],"descriptions_file":[{"lang":"en","text":"<i>function:tests if an actor is verticaly reversed</i><br>value=<b>Actor IsVRev</b>(number)<br>value=<b>Actor IsVRev</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, VRev = True, image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor IsVRev( 1 ) )</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"bool","text":"True if the Actor is flipped verticaly, else False."}]},{"name":"Actor Reset","descriptions":[{"lang":"en","text":"Reset all properties of one or all the actor"}],"descriptions_file":[{"lang":"en","text":"<i>instruction: Reset all properties of one or all the actors</i><br><b>Actor Reset</b> number<br><b>Actor Reset</b> name$<br><b>Actor Reset</b> \"*\"<br><br>Example 1:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, x=100, y=50, image$=\"magic\"</li><li class=\"ex_code_line\">Actor Reset 1 // Remove the Actor 1</li></ul><br>Example 2:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, x=100, y=50, image$=\"magic\"</li><li class=\"ex_code_line\">Actor \"lucie\", x=200, y=0, image$=\"lucie\"</li><li class=\"ex_code_line\">Actor Reset \"*\" // Remove All the actors</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the Actor. If \"*\" is used, all the actors will been reseted."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Actor ScaleX","descriptions":[{"lang":"en","text":"Returns the factor X of the scaling"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the factor X of the scaling</i><br>value=<b>Actor ScaleX</b>(number)<br>value=<b>Actor ScaleX</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, ScaleX=1.5, ScaleY=1.2, image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor ScaleX( 1 ) )</li></ul>Display \"1.5\" on the screen<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"Value of the horizontal scaling."}]},{"name":"Actor ScaleY","descriptions":[{"lang":"en","text":"Returns the factor Y of the scaling"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the factor Y of the scaling</i><br>value=<b>Actor ScaleY</b>(number)<br>value=<b>Actor ScaleY</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, ScaleX=1.5, ScaleY=1.2, image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor ScaleY( 1 ) )</li></ul>Display \"1.2\" on the screen<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"Value of the vertical scaling."}]},{"name":"Actor SkewX","descriptions":[{"lang":"en","text":"Returns the factor X of the skew"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the factor X of the skew</i><br>value=<b>Actor SkewX</b>(number)<br>value=<b>Actor SkewX</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, skewX=4, skewY=1, image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor SkewX( 1 ) )</li></ul>Display \"4\" on the screen<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"Value of the horizontal distortion."}]},{"name":"Actor SkewY","descriptions":[{"lang":"en","text":"Returns the factor Y of the skew"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the factor Y of the scaling</i><br>value=<b>Actor ScaleY</b>(number)<br>value=<b>Actor ScaleY</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, ScaleX=1.5, ScaleY=1.2, image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor ScaleY( 1 ) )</li></ul>Display \"1.2\" on the screen<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"Value of the vertical distortion."}]},{"name":"Actor Width","descriptions":[{"lang":"en","text":"Returns the width of an actor"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the width of the Actor</i><br>value=<b>Actor Width</b>(number)<br>value=<b>Actor Width</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor Width( 1 ) )</li></ul>Display \"0.5\" on the screen<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the actor"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"Value of the width."}]},{"name":"Actor X","descriptions":[{"lang":"en","text":"Returns the X position of an actor"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the X position of the Actor</i><br>value=<b>Actor X</b>(number)<br>value=<b>Actor X</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, x=100, y=50, image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor X( 1 ) )</li></ul>Display \"100\" on the screen<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the Actor"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Value of the horizontal position."}]},{"name":"Actor Y","descriptions":[{"lang":"en","text":"Returns the Y position of an actor"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the Y position of the Actor</i><br>value=<b>Actor Y</b>(number)<br>value=<b>Actor Y</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, x=100, y=50, image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor Y( 1 ) )</li></ul>Display \"50\" on the screen<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Value of the depth position."}]},{"name":"Actor Z","descriptions":[{"lang":"en","text":"Returns the Z position of an actor"}],"descriptions_file":[{"lang":"en","text":"<i>function:returns the Z position of the Actor</i><br>value=<b>Actor Z</b>(number)<br>value=<b>Actor Z</b>(name$)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, x=100, y=50, z=3, image$=\"magic\"</li><li class=\"ex_code_line\">Print Str$( Actor Z( 1 ) )</li></ul>Display \"3\" on the screen<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Value of the depth position."}]},{"name":"Del Actor","descriptions":[{"lang":"en","text":"Delete an actor"}],"descriptions_file":[{"lang":"en","text":"<i>instruction:Delete an actor</i><br><b>Del Actor</b> number<br><b>Del Actor</b> name$<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, x=100, y=50, image$=\"magic\"</li><li class=\"ex_code_line\">Del Actor 1</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the Actor"}],"exceptions":[],"deprecated":[{"lang":"en","text":"This instruction will disappear in a future version. It is recommended to use the <a href=\"javascript"}],"keywords":[],"since":"","last":"","return":[]},{"name":"Del All Actors","descriptions":[{"lang":"en","text":"Delete all the actors"}],"descriptions_file":[{"lang":"en","text":"<i>instruction:Delete all the actors</i><br><b>Del All Actors</b><br><b>Del All Actors</b><br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, x=100, y=50, image$=\"magic\"</li><li class=\"ex_code_line\">Actor 2, x=150, y=50, image$=\"lucie\"</li><li class=\"ex_code_line\">Del All Actors</li></ul>"}],"parameters":[],"exceptions":[],"deprecated":[{"lang":"en","text":"This instruction will disappear in a future version. It is recommended to use the <a href=\"javascript"}],"keywords":[],"since":"","last":"","return":[]},{"name":"Mouse On Actor","descriptions":[{"lang":"en","text":"Tests if the mouse pointe is on an actor"}],"descriptions_file":[{"lang":"en","text":"<i>function:tests if the mouse pointer is on an actor</i><br>value=<b>Mouse On Actor</b><br>value=<b>Mouse On Actor</b><br><br>True if the mouse cursor is under an Actor, else False.<br>"}],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"bool","text":"True if the mouse cursor is under an Actor, else false."}]},{"name":"Reset Actor","descriptions":[{"lang":"en","text":"Reset all the properties of an Actor"}],"descriptions_file":[{"lang":"en","text":"<i>instruction: reset all the properties of an Actor</i><br><b>Reset Actor</b> number<br><b>Reset Actor</b> name$<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Actor 1, x=100, y=50, image$=\"magic\"</li><li class=\"ex_code_line\">Reset Actor 1</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the Actor"}],"exceptions":[],"deprecated":[{"lang":"en","text":"This instruction will disappear in a future version. It is recommended to use the <a href=\"javascript"}],"keywords":[],"since":"","last":"","return":[]},{"name":"Set Gravity","descriptions":[{"lang":"en","text":"Set the Gravity to apply on all Actors"}],"descriptions_file":[{"lang":"en","text":"<i>instruction: Set the gravity value of the Physic World</i><br>value=<b>Set Gravity</b> X = (float), Y = (float)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Set Gravity Y=0.1</li><li class=\"ex_code_line\">Actor 1, Image$ = \"ground.png\", X = 0, Y = 500, Physic$ = \"platform\"</li><li class=\"ex_code_line\">Actor 2, Image$=\"magicfly.png\", X = 100, Y = 0, Physic$=\"ball\"</li><li class=\"ex_code_line\">Wait Key</li></ul>"}],"parameters":[{"lang":"en","name":"*X","type":"float","text":"Global gravity value in X. 0.0 by default."},{"lang":"en","name":"*Y","type":"float","text":"Global gravity value in Y. 1.0 by default."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Show Physic Bodies","descriptions":[{"lang":"en","text":"Show each physic body on the screen"}],"descriptions_file":[{"lang":"en","text":"<i>instruction: Displays the borders of all the physic bodies</i><br>value=<b>Show Physic Bodies</b>(number)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Show Physic Bodies // Displays the borders of the physical bodies</li><li class=\"ex_code_line\">Actor 1, Image$ = \"ground.png\", X = 0, Y = 500, Physic$ = \"platform\"</li><li class=\"ex_code_line\">Actor 2, Image$=\"magicfly.png\", X = 100, Y = 0, Physic$=\"ball\"</li><li class=\"ex_code_line\">Wait Key</li><li class=\"ex_code_line\">Hide Physic Bodies // Hide the borders of the physic bodies</li></ul>"}],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Hide Physic Bodies","descriptions":[{"lang":"en","text":"Hide each physic body on the screen"}],"descriptions_file":[{"lang":"en","text":"<i>instruction: Displays the borders of all the physic bodies</i><br>value=<b>Show Physic Bodies</b>(number)<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Cls 0</li><li class=\"ex_code_line\">Show Physic Bodies // Displays the borders of the physical bodies</li><li class=\"ex_code_line\">Actor 1, Image$ = \"ground.png\", X = 0, Y = 500, Physic$ = \"platform\"</li><li class=\"ex_code_line\">Actor 2, Image$=\"magicfly.png\", X = 100, Y = 0, Physic$=\"ball\"</li><li class=\"ex_code_line\">Wait Key</li><li class=\"ex_code_line\">Hide Physic Bodies // Hide the borders of the physic bodies</li></ul>"}],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]}]},{"name":"AMOS Animation Language (AMAL)","id":1639692453830,"descriptions":[{"lang":"en","text":"Instructions and functions to animate and move sprites, bobs, screens, rainbows or any other graphical objects"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Amal","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>instruction: call an AMAL program</i><br><b>Amal</b> channel number,\"instruction string\"<br><b>Amal</b> channel number,program number<br><b>Amal</b> channel number,memory bank address<br><b>Amal</b> channel number,\"instruction string\" <b>To</b> address<br><br>The AMAL command is used to assign an AMAL program to an animation channel. This program can be taken from an instruction string, or it may be taken directly from the AMAL memory bank. In either case, the AMAL instruction is followed by the index of the channel to be assigned.<br><br>Each channel can be independently assigned to a Sprite, or a Bob, or a screen.<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the animation channel"},{"lang":"en","name":"string$","type":"string","text":"A string containing the AMAL program to be ran"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Amal Freeze","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>instruction: suspend AMAL programs</i><br><b>Amal Freeze</b><br><b>Amal Freeze</b> number<br><br>Use this command to temporarily freeze one or all AMAL programs from running. These programs may be started again at any time with an AMAL ON command. Please note that AMAL FREEZE should be used to suspend<br>AMAL before a command such as DIR is executed, otherwise timing problems may happen.<br>"}],"parameters":[{"lang":"en","name":"*index","type":"index","text":"Index of the channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos"},{"name":"Amal Off","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>instruction: stop AMAL program</i><br><b>Amal Off</b><br><b>Amal Off</b> number<br><br>AMAL ON is used to activate all AMAL programs.<br><br>If an optional number is given, then only that AMAL routine will be activated. Similarly, AMAL OFF stops all AMAL programs from executing, by erasing them from memory. They can only be re-activated by using the AMAL command again. By specifying an individual AMAL program number, only that program is stopped.<br>"}],"parameters":[{"lang":"en","name":"*index","type":"index","text":"Index of the channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos"},{"name":"Amal On","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>instruction: start AMAL program</i><br><b>Amal On</b><br><b>Amal On</b> number<br><br>AMAL ON is used to activate all AMAL programs.<br><br>If an optional number is given, then only that AMAL routine will be activated. Similarly, AMAL OFF stops all AMAL programs from executing, by erasing them from memory. They can only be re-activated by using the AMAL command again. By specifying an individual AMAL program number, only that program is stopped.<br>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the channel (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"aoz, amos"},{"name":"Amalerr$","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>function: give message of an AMAL error</i><br>a$=<b>Amalerr$</b><br><br>The AMALERR$ function returns the description in the current animation of the last AMAL error. It has been added to AOZ to allow AOZ users to correct AMAL mistakes as quickly as possible. Type the following example exactly as it appears:<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Load \"AMOSPro Tutorial:Objects/Sprites.Abk\" : Get Sprite Palette</li><li class=\"ex_code_line\">Sprite 8,100,100,1</li><li class=\"ex_code_line\">A$=\"L: IF X=300 Jump L; Pause; Let X=X+1; Jump L\"</li><li class=\"ex_code_line\">Amal 8,A$ : Amal On : Direct</li></ul>That example will generate an error, because IF will not be interpreted as an \"If\" structure, but as the two AMAL instructions I and F.<br><br>To find the position in the animation string of this error, type the following line from Direct Mode:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Print AmalErr$</li><li class=\"ex_code_line\">Print Mid$(A$,Amalerr,Amalerr+5)</li></ul>"}],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The text of the error"}],"compatible":" aoz"},{"name":"Amalerr","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>function: give position of an AMAL error</i><br>position=<b>Amalerr</b><br><br>The AMALERR function returns the position in the current animation string where an error has been found. It has been provided to allow the AOZ Studio programmer to locate and correct AMAL mistakes as quickly as possible. Type the following example exactly as it appears:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Load \"AMOSPro Tutorial:Objects/Sprites.Abk\" : Get Sprite Palette</li><li class=\"ex_code_line\">Sprite 8,100,100,1</li><li class=\"ex_code_line\">A$=\"L: IF X=300 Jump L; Pause; Let X=X+1; Jump L\"</li><li class=\"ex_code_line\">Amal 8,A$ : Amal On : Direct</li></ul>That example will generate an error, because IF will not be interpreted as an \"If\" structure, but as the two AMAL instructions I and F. To find the position in the animation string of this error, type the following line from Direct Mode:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Print Mid$(A$,Amalerr,Amalerr+5)</li></ul>"}],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The position of the error in the string"}],"compatible":" aoz, amos"},{"name":"Amreg","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>reserved variable: give value of AMAL register</i><br>register=<b>Amreg</b>(number)<br>register=<b>Amreg</b>(channel,number)<br><b>Amreg</b>(number)=expression<br><b>Amreg</b>(channel,number)=expression<br><br>The AMREG function allows you to gain access to the contents of internal and external AMAL registers, from inside your AOZ Studio program. An AMAL register number must be specified, ranging from 0 to 25, with zero representing external register RA, up to 25 representing register RZ.<br><br>An optional channel parameter can be given, where a specified number from 0 to 9 is used to represent the AMAL internal registers from RU to R9.<br><br>The following example demonstrates how the position of an AMAL Sprite can be returned:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Load \"AMOSPro_Tutorial:Objects/Sprites.abk\" : Get Sprite Palette</li><li class=\"ex_code_line\">Channel 1 To Sprite 8 : Sprite 8,100,100,1</li><li class=\"ex_code_line\">A$=\"Loop : Let RX=X+1 Let X=RX ; Pause ; Jump Loop\"</li><li class=\"ex_code_line\">Amal 1,A$ : Amal On : Curs Off</li><li class=\"ex_code_line\">Do</li><li class=\"ex_code_line\">Locate 0,0</li><li class=\"ex_code_line\">Z=Asc(\"X\")-65</li><li class=\"ex_code_line\">Print Amreg(Asc(\"X\")-65) : Rem Use Asc to get register number</li><li class=\"ex_code_line\">Loop</li></ul>"}],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"Index of the AMAL channel"},{"lang":"en","name":"register","type":"integer","text":"Index of the register"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The value of the register"}],"compatible":" aoz, stos, amos"},{"name":"Chanan","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>function: test a channel for an active animation</i><br>value=<b>Chanan</b>(channel number)<br><br>This simple function is used to check if the specified animation channel is currently engaged. A value of -1 (true) is returned if the animation is active, otherwise a zero (false) is given if the animation is complete. Here is an example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Load \"AMOSPro Tutorial:Objects/Sprites.abk\" : Get Sprite Palette</li><li class=\"ex_code_line\">Sprite 9,150,150,1</li><li class=\"ex_code_line\">M$=\"Anim 12,(1,4)(2,4)\"</li><li class=\"ex_code_line\">Amal 9,M$ : Amal On : Wait Vbl</li><li class=\"ex_code_line\">While Chanan(9)</li><li class=\"ex_code_line\">Wend</li><li class=\"ex_code_line\">Print \"Animation complete!\"</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"string"}],"compatible":"aoz, amos"},{"name":"Chanmv","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>function: test channel for an active Object</i><br>value=<b>Chanmv</b>(channel number)<br><br>The CHANMV function is used to check if the Object assigned to the specified channel is currently moving.<br><br>A value of True is given if the Object is in motion, otherwise False is returned. When used with the Move instruction in AMAL, the CHANMV function can check whether a movement sequence has exhausted its steps. The sequence can then be started again at the new position, with an appropriate movement string.<br><br>For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Load \"AMOSPro Tutorial:Objects/Sprites.abk\" : Get Sprite Palette</li><li class=\"ex_code_line\">Sprite 9,90,30,1</li><li class=\"ex_code_line\">M$=\"Move 300,150,150; Move -300,-150,75\"</li><li class=\"ex_code_line\">Amal 9,M$ : Amal On</li><li class=\"ex_code_line\">While Chanmv(9)</li><li class=\"ex_code_line\">Wend</li><li class=\"ex_code_line\">Print \"Movement complete!\"</li></ul>"}],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the movement is active, false if not"}],"compatible":"aoz, amos"}]},{"name":"Amiga-specific Commands","id":1639692453837,"descriptions":[{"lang":"en","text":"Instructions and functions related specifically to the Amiga."}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Set Hardcol","descriptions":[{"lang":"en","text":"Set hardware register for hardware Sprite collision detection. This instruction has This instruction has effect in AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bitmap1","type":"integer","text":"Enabler"},{"lang":"en","name":"bitmap2","type":"integer","text":"Comparison"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This command is available to experienced Amiga programmers, and it permits Sprite collision detection using the computer's hardware. SET HARDCOL cannot be used with computed Sprites, so only Sprites zero to 7 may be|monitored for collision.||The CLXCON register is set for hardware Sprite collision detection using two parameters. Bitmap1 is an enabler,|that sets bits 12,13,14 and 15 of the CLXON register, and bitmap2 determines the comparison itself, setting bits zero|to 5. Please refer to your hardware manual for a technical explanation of this register.|"},{"name":"Set Hardcol","descriptions":[{"lang":"en","text":"Return collision status after a Set Hardcol instruction. Returns 0 in AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0"}],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This command is available to experienced Amiga programmers, and it permits Sprite collision detection using the computer's hardware. SET HARDCOL cannot be used with computed Sprites, so only Sprites zero to 7 may be|monitored for collision.||The CLXCON register is set for hardware Sprite collision detection using two parameters. Bitmap1 is an enabler,|that sets bits 12,13,14 and 15 of the CLXON register, and bitmap2 determines the comparison itself, setting bits zero|to 5. Please refer to your hardware manual for a technical explanation of this register.||"},{"name":"AReg","descriptions":[{"lang":"en","text":"variable"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"register","type":"integer","text":"Number of the register"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0"}],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||AREG is a special array which is used to pass values to and from any of the 68000 processor's address registers.|Specify the number of the register from 0 to 6, selected from either of the following two groups:|A0, Al, A2. These registers can be read from AMOS Professional Basic, and changed at will. Whenever a machine|code program is run, any new values will be transferred straight into the relevant address register.||For example:|~~~|Areg(0)=Varptr(A$) : Rem Load the address of A$ into A0|Areg(1)=Varptr(B(0,0)) : Rem Load the address of B(0,0) into Al|~~~|A3, A4, A5, A6. These are read-only registers. Any attempt to change their current contents will generate an \"illegal function call\" error message.|"},{"name":"Copper On","descriptions":[{"lang":"en","text":"Re-start automatic copper generation. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"amos","content":"(extracted from the AMOSPro manual)||The COPPER ON command re-starts all standard copper calculations, and returns AOZ Studio back to|normal. The experts (and foolhardy) may now continue.|"},{"name":"Copper Off","descriptions":[{"lang":"en","text":"Stop automatic copper generation. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||If you ignore the warning in the last paragraph and use this instruction, the automatic copper generation that forms|the backbone of the AMOS Professional system is turned off. From now on, you are on your own!||You should now understand that AMOS Professional actually holds two separate copper lists in memory, and the|principle is very similar to the logical and physical screens of the DOUBLE BUFFER system.||The logical copper list is the list being created from AMOS Professional Basic, and it is completely invisible. The|physical list holds the copper instructions that are generating the current TV display. It cannot be accessed from|AMOS Professional at all, as this would corrupt the display completely. As a default, these copper lists are limited|to 12k in length, which is the equivalent to approximately six thousand instructions. This limit may be increased|using an option from the Interpreter set-up dialogue box.||Copper lists can be defined in one of three ways:||- The first method is to enter the copper list using a combination of the COP MOVE and COP WAIT instructions,|from AMOS Professional Basic.|- The second way is to find the address of the logical copper list, using COP LOGIC. This can then be manipulated|directly using DEEK and DOKE, allowing minor modifications to be made to the existing screen without having to|generate a completely new copper list at all. This is perfect for the creation of rainbow effects.|- The third alternative is for assembly language buffs. Copper lists can be generated using machine code, and as|before, the current address is available via the COP LOGIC function. Note that this address will change during the|course of a program, and it must be entered every time the machine code routine is called.||### Recommended Procedures|If you want to create copper lists from beginning to end, you must take personal control over the hardware Sprites,|the display positioning, the location of screens, and their sizes. You must then ensure that the resulting screens have|the correct amount of memory, before loading the appropriate registers with the addresses of the required bitmaps.|This can be achieved with the LOGBASE function.||Additionally, if you intend to use DOUBLE BUFFER, a separate copper list must be produced for both the logical|and physical screens. Here is the procedure:||- Define the copper list for the first screen.|- Switch copper lists using the COP SWAP command.|-Swap between the logical and physical screens with SCREEN SWAP.|- Define a copper list for the second screen.||Providing that all is well, you may access your screens using -all of the normal AMOS Professional drawing|commands, including SCREEN COPY, DRAW, PRINT and PLOT. As well as this, there should be no problems|using Blitter Objects.||However, multiple screens and Sprites are only supported by the standard AMOS Professional copper system, so|you cannot use SCREEN OPEN, SCREEN DISPLAY, RAINBOWS or any of the SPRITE commands. If you need|to generate such effects, you will have to program them for yourself! For those of you who wish to give up now, the|following command may be useful.|"},{"name":"Cop Swap","descriptions":[{"lang":"en","text":"Swap logical and physical copper lists. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"The COP SWAP command switches over the logical and physical copper lists. The new copper list will now be flicked into place, and the results will be shown after the next vertical blank period. For example:|~~~|Cop Swap : Wait Vbl|~~~|"},{"name":"Cop Reset","descriptions":[{"lang":"en","text":"Re-set copper list pointer. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This command is used to add a pair of MOVE commands, forcing the copper list to re-start from the very first instruction. This may be used to generate simple loops.|"},{"name":"Cop Wait","descriptions":[{"lang":"en","text":"Insert a WAIT instruction into copper list. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"amos","content":"(extracted from the AMOSPro manual)||The COP WAIT command enters a WAIT instruction at the current position in the copper list. WAIT forces the copper to stop in its tracks until the screen has been drawn at the specified hardware coordinates x,y. The copper|then continues from the next instruction in the copper list.||WAIT is usually called immediately before a MOVE command, creating a pause until the display reaches a specific|screen line. The MOVE instruction is then used to change the attributes of the screen area below this line. Rainbows|are an excellent example of this technique, with each line of the rainbow generated with a pair of commands like|this:|~~~|Cop Wait 0,Y : Rem Y is starting coordinate of next colour shift|Cop Move $180,$777 : Rem $180 is address of colour 0 and $777 is new colour|~~~|The x-coordinate is a hardware coordinate from 0 to 448. Since the Amiga is only capable of performing this test|every four screen points, this coordinate is rounded to the nearest multiple of four.||The y-coordinate can be any value from 0 to 312. Normally, coordinates from 256 to 312 require special|programming, but AOZ Studio generates the correct instructions automatically, so there is no need for|concern! Here are some examples:|~~~|Cop Wait 0,130: Rem Wait for screen to reach hardware coords 0,100|Cop Wait 0,300: Rem Wait for line 300|Cop Wait 12,10: Rem Wait for coordinates 12,10 to arrive|~~~|The optional xmask and ymask parameters are bit-mask values which allow for a pause until the screen coordinates satisfy a specific combination of bits. The default value is $1FF. For example:|~~~|Cop Wait 0,2,$1FF,%11 : Rem Await next EVEN scan line|~~~||"},{"name":"Cop Movel","descriptions":[{"lang":"en","text":"Write a long MOVE instruction to copper list. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||This is a special option from AOZ Studio Basic, which generates a matched pair of MOVE commands in|the new copper list. These load a 32-bit (long word) value into the selected address, exactly like a normal LOKE|instruction.|"},{"name":"Cop Move","descriptions":[{"lang":"en","text":"Write a MOVE instruction to current copper list. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented"},{"name":"Cop Logic","descriptions":[{"lang":"en","text":"Give address of logical copper list. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0 in this version."}],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||This command returns the absolute address of the logical copper list in memory. It can be used to manipulate the|copper list directly from AOZ Studio Basic. Lists can also be generated by using assembly language.|"},{"name":"Multi Wait","descriptions":[{"lang":"en","text":"Manage multi-tasking on the Amiga. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||The MULTI WAIT instruction should be used in the main loop of an AMOS Professional program. It forces a|multi-task WAIT VBL for situations such as waiting for a menu item to be selected.||This command should not be used to achieve accurate screen synchronisation, as it has been specifically provided|for multi-tasking and may skip several vertical blank periods, depending on the number of tasks being run|simultaneously.|"},{"name":"AMOS To Front","descriptions":[{"lang":"en","text":"Bring AMOS IDE in the front of display. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||This instruction forces AMOS back onto the display, leaving the Workbench environment|hidden.|"},{"name":"AMOS To Back","descriptions":[{"lang":"en","text":"Bring AMOS IDE in the back of display. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||This instruction allows other programs to be accessed, by bringing forward the Workbench display and hiding|AOZ Studio from view.|"},{"name":"AMOS Here","descriptions":[{"lang":"en","text":"Detect if AMOS is running. Emulation returns TRUE"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True"}],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||AMOS HERE is used to provide a simple report. True is returned if AOZ Studio is currently|displayed, otherwise False indicates that the Workbench is in view.||"},{"name":"AMOS Lock","descriptions":[{"lang":"en","text":"Blocks Amiga-A key. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||The AMOS LOCK command disables the facility to toggle between AMOS and the Workbench by|pressing [Amiga]+[A]. This can be used to prevent other users from discovering how your program was written!|"},{"name":"Close Workbench","descriptions":[{"lang":"en","text":"Cclose the Workbench. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This command closes the Workbench screen, saving about 40k of memory, and freeing it for your own programs!|Prove this now, as follows:|~~~|Print Chip Free, Fast free|Close Workbench|Print Chip Free, Fast Free|~~~|CLOSE WORKBENCH can be executed from inside an AOZ Studio program, or from Direct Mode, but it|will not work if there is a CLI window opened. To solve this problem, ensure that AOZ Studio loads using|the following CLI instruction:|~~~|run>nil:AMOSPro|ENDCLI|~~~||"},{"name":"Set Buffer","descriptions":[{"lang":"en","text":"Set the size of the variable area. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||The SET BUFFER command can be used inside a program to set the new size of the variable area. Simply follow the command with the number of kilobytes required, and you are recommended to increase this value by 5k at a|time, until enough space has been reserved in the buffer area. It is important to note that the SET BUFFER|command must be the very first instruction in your program, apart from any REM messages.|"},{"name":"Equ","descriptions":[{"lang":"en","text":"Get an equate. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"string","type":"equate","text":"The name of the equate"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"\"\""}],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||The EQU function returns any standard equate value used by the Amiga system libraries. The equate can represent anything from an offset to a structure, or even the names of various bit- masks. Provided that it is supplied in the standard Amiga include files, it will be available from AOZ Studio immediately. The only exceptions to this|rule are the library offsets, and these should be obtained with the LVO function.||The name of the equate should be specified in brackets, and refers to the name as set out in your reference manuals.|This name is case sensitive, as explained above, so care should be taken. It is also important to remember that the|name string must be a constant, and that expressions are not allowed! In fact, the technique is extremely simple.|This example would send a WRITE command to a device:|~~~|DEV D0(channel,EQU(\"CMD_WRITE\"))|~~~|"},{"name":"Lvo","descriptions":[{"lang":"en","text":"Get the Library Vector Offset. This instruction will not be implemented in AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0"}],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This function returns the Library Vector Offset associated with a specified function. The function name will be|translated automatically when your program is tested for the first time, and it will be placed in a memory bank for|future use. Set up the memory bank with a SET EQUATE BANK command first, otherwise an error message will|be generated. If the function name does not exist, an \"Equate not found error\" will be given from the Editor.||The function name is in standard Commodore format, and should be typed in exactly as it appears in your reference|manuals. This is especially important regarding the way upper case letters are treated differently from their lower|case equivalents. For example, Input, INPUT and input are separate keywords, only the first version will be|accepted, and either of the alternatives will generate an error when the program is tested!\"|Also note that because the function is executed during the testing process, it must be a simple string rather than an|expression. For example, if you need to call the FindTask option from Exec, you would use a line like this:||Also note that because the function is executed during the testing process, it must be a simple string rather than an|expression. For example, if you need to call the FindTask option from Exec, you would use a line like this:\"|~~~|TASK=Execall(Lvo(\"FindTask\"))|~~~||"},{"name":"Set Double Precision","descriptions":[{"lang":"en","text":"Engage double precision accuracy. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||Double precision should be set at the start of your program, and all floating point calculations will be performed|using the more accurate mode. Because the two modes are completely separate, single precision and double|precision modes cannot be mixed in the same program.|"},{"name":"Request WB","descriptions":[{"lang":"en","text":"Use the Workbench system requester. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This command is used to switch to the Workbench system requester.||As soon as one of the options is selected from it, you will be returned to AOZ Studio. Please note that if the Requester Extension is deleted from the|extension list by means of the configuration file, then the standard Workbench requester will be used for displaying|messages. This will give the illusion that AOZ Studio has crashed when a requester appears. If this situation|occurs, simply press [Amiga]+[A] to return to the Workbench, respond to the requester and press [Amiga]+[A] again|to return to AOZ Studio. There should be no need to delete the Requester extension unless memory is very low.|"},{"name":"Request ON","descriptions":[{"lang":"en","text":"Use the AMOS Professional requester routine. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"(extracted from the AMOSPro manual)||This is the default setting, and is used to make AOZ Studio employ its own requester routine.|"},{"name":"Request OFF","descriptions":[{"lang":"en","text":"Used to cancel the requester. This instruction may be implemented in a future version of AOZ."},{"lang":"en","text":"notimplemented"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"(extracted from the AMOSPro manual)||If this instruction is used, AOZ Studio will automatically select the [CANCEL] button of the requester, and the actual requester will not be displayed. This is ideal for error trapping Within a program.|"},{"name":"NTSC","descriptions":[{"lang":"en","text":"Test if the display is emulating a NTSC TV set."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the application is in Amiga mode and the renderer is set to NTSC emulation."}],"compatible":" amos"},{"name":"Load Iff","descriptions":[{"lang":"en","text":"Load an IFF image into a screen (deprecated, use \"Load Image\")"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the image to load"},{"lang":"en","name":"index","type":"index","text":"Index of the screen to create. If ommited the image will be loaded in the current screen"},{"lang":"en","name":"*tags$","type":"string","text":"List of tags indicating how to load the image. \"#left\", \"#center\", \"#right\" aligns the image horizontally, \"#top\", \"#middle\", \"#bottom\" aligns the image vertically, \"fit\" resizes the image to fit the screen, \"paste\" does not resize the image"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"(extracted from the AMOSPro manual)||With the appropriate IFF picture files ready to be loaded on disc, this command is used to load the selected filename to the current screen.||There is an optional screen number parameter, which will open that screen for the picture. If this numbered screen already exists, its contents will be erased and replaced by the IFF data.|","compatible":"amos"},{"name":"Save Iff","descriptions":[{"lang":"en","text":"Save an IFF image out of a screen (deprecated, use \"Save Image\")"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the image to save"},{"lang":"en","name":"index","type":"integer","text":"Index of the screen to save. If ommited the image will be saved from the current screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"(extracted from the AMOSPro manual)||The SAVE IFF command saves the current screen as an IFF picture file with the selected filename onto disc. Certain data is automatically added to this IFF file, which stores the present screen settings, including any SCREEN DISPLAY, SCREEN OFFSET, SCREEN HIDE and SCREEN SHOW. This will be stored and recognised by AOZ Studio whenever this file is loaded again, so that the IFF screen will be displayed exactly as it was|saved. Please note that this data will be ignored by other graphics packages, such as Dpaint 3, also that it is not|possible to save double buffered or dual playfield screens with this command.||An optional parameter can be added after the filename, which selects whether or not the IFF file is to be compacted|before it is saved. A value of 1 specifies that the standard AOZ Studio compression system is to be used,|whereas a zero saves the picture without any compression.|","compatible":"notimplemented"},{"name":"PLoad","descriptions":[{"lang":"en","text":"Load machine code directly into memory. This instruction will not be implemented in AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to file to load"},{"lang":"en","name":"index","type":"integer","text":"Index of the bank to load to."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"(extracted from the AMOSPro manual)||The PLOAD command reserves a memory bank and loads some machine code into it from disc. Specify the|filename that contains the machine code file on disc, followed by the number of a new memory bank to be reserved|for the program. If the bank number is negative, the number will be multiplied by -1, and the bank will be allocated|using Chip memory.||Once machine code is loaded in this way, it is installed as a permanent memory bank, so whenever the current|program is saved, the machine code is stored too. Also note that the machine code file can be saved onto disc as a|standard \".Abk\" file, then loaded directly into AMOS Professional Basic. After PLOAD has performed its work, the|memory bank can be executed immediately! The following factors should be noted:||- This file must consist of a standard piece of machine code, that can be run under CLI.|- The program must be terminated by an RTS instruction.|- Only the first CODE segment of the routine will be installed into memory.||Any attempt to load a commercial program using this technique will probably crash your Amiga|","compatible":"notimplemented"},{"name":"Mask Iff","descriptions":[{"lang":"en","text":"Indicate what sections of an IFF file to load the next time the Load IFF instruction is used"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"mask","type":"integer","text":"Bitmask indicating the load. Example %100"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||The PICTURE function returns the precise format of the mask used by a picture, and it is used like this:|~~~|Mask Iff Picture|Load Iff \"Picture_Name\"|~~~|Here are some typical settings that can be used to load masked data from an IFF file:|~~~|Mask Iff %100 : Rem Load palette of picture only|Mask Iff %10000 : Rem Load bitmaps only|~~~||"},{"name":"Frame Load","descriptions":[{"lang":"en","text":"Load frames of an IFF channel into memory"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"index","text":"The index of the IFF channel"},{"lang":"en","name":"bank","type":"address","text":"The number of a memory bank or it's addres"},{"lang":"en","name":"*length","type":"integer","text":"The number of frames to load"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||Use this function to load one or more IFF frames directly into memory. The parameters in brackets are as follows:||The channel number is the number of an animation file that is currently opened using the OPEN IN command.||Next, specify the memory address or bank number where the frames are to be stored. If an address is specified, the|entire file will be loaded into the chosen memory area, exactly like a BLOAD instruction. If you give a bank|number, a new memory bank will be reserved automatically. It will hold your animation frames and be a permanent|data bank in fast memory, called \"IFF\". Please note that bank numbers can range from 1 to 65535. To avoid|overrunning your memory area and crashing the system, it is vital that enough space is reserved to hold the entire|animation sequence in memory. The actual storage requirements may be calculated with the FRAME LENGTH|function, which is explained later.||Finally, there is an optional parameter that specifies the number of animation frames to be loaded. If this number is|omitted, only Frame 1 will be loaded, but if your request is greater than the total number of available frames, all of|the images will be grabbed in the current file, if memory allows. This can be exploited to load entire sequences no|matter what their length, by setting this optional parameter to an overlarge number, as no error will be generated.||FRAME LOAD returns the number of frames that have been successfully loaded into memory. This value may be|saved into a variable once the animation has been loaded, and made use of when the sequence is to be played. For|example:|~~~|Rem Open animation file for reading|Open In 1,\"AMOSPro_Tutorial:Iff_Anim/AMOS.Anim\"|Rem Load all frames in current file|Rem use overlarge value of 1000 to grab all available images to bank 10|N=Frame Load (1 To 10,1000)|Close|Rem N now holds the number of actual frames|Print \"Number of frames in this file is \";N|~~~||"},{"name":"Frame Play","descriptions":[{"lang":"en","text":"Play IFF frameson screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bank","type":"integer","text":"The number of a memory bank or it's addres"},{"lang":"en","name":"number","type":"integer","text":"The number of frames to play"},{"lang":"en","name":"*screen","type":"index","text":"The index of the screen to play to, or the current screen if not specified"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"(extracted from the AMOSPro manual)||Use this function to display animations on screen at the appropriate points in your programs. Specify the memory address or bank number containing an IFF animation sequence that has already been loaded by FRAME LOAD. Please note that addresses must be even and that the first bytes must be a valid IFF Frame definition. Next specify the number of frames that you want to play.||The optional screen parameter is the identifier of a new screen to be created for the animation, and it can be used to automatically define a screen as the first frame of the animation to be displayed. If this screen number is omitted, an attempt will be made to use the current screen.||Please note that your new screen will not be set up for double buffering, and you should activate this directly from|your program with the DOUBLE BUFFER command, if required. Also, the IFF animation will be displayed on the|logical screen, and when using double buffering SCREEN SWAP must be employed, otherwise the animation will|run invisibly in the background!||Once the FRAME PLAY function has been called, the start address of the next frame in the sequence will be|returned, and this address can be used to display the following frame of the animation.|For example:|~~~|Rem Play the first frame in Bank 10 using screen 0|F=Frame Play(10,1,0)|Double Buffer : Rem activate non automatic double buffer|Rem Display next frame|F=Frame Play(F,1)|~~~|When the end of the animation sequence has been reached, your F variable points to the last frame of the animation.|Because the exact number of frames is returned to the FRAME LOAD function, FRAME PLAY can be enclosed in|a loop for simplicity, like this:|~~~|Open In 1,\"AMOSPro_Tutorialiff_Anim/AMOS.Anim\"|L=Frame Load(1 To 10,1000)|Close|Rem Play first frame from Bank 0 and define new screen 0|Do|P=Frame Play(10,1,0)|Double Buffer|For X=2 To L-1 : Rem Play sequence to the end|P=Frame Play(P,1) : Rem Play next frame|Screen Swap : Rem Make animation visible|Wait Vbl : Wait Vbl : Wait Vbl|Next X|Loop|~~~||"},{"name":"IFF Anim","descriptions":[{"lang":"en","text":"Play IFF frameson screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"The path to the file to play"},{"lang":"en","name":"screen","type":"index","text":"The index of the screen to create to play the file"},{"lang":"en","name":"*nFrames","type":"integer","text":"The number of times to play, once if ommited"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"(extracted from the AMOSPro manual)||This function provides the most straightforward way of displaying a complete IFF animation sequence directly on|screen. The \"filename\" must refer to a valid IFF animation saved in \"compressed\" (Mode 5) format. The screen|number defines the screen to be created for the animation sequence. If the requested screen number already exists, it|will be replaced by the new definition automatically. There is an optional parameter to set the number of times the|animated sequence is to be played. If this number is omitted, the animation will be played once.||Remember that frame number 1 is the background screen that serves as the basis for the entire sequence, so that your|animation will always re-start from frame number 2.||After the animation has been played the requested number of times it will stop. The memory consumed will|automatically be released back to AOZ Studio for re-use.||If you have a disc containing an IFF animation file, place it into any drive and call up the standard file selector, like this:|~~~|Iff Anim Fsel$(\"**\") To 0,10|~~~|When the file is requested, your animation sequence will be loaded into screen 0 and cycled through ten times.||Direct IFF animation|Because the standard AOZ Studio drawing commands may be used with IFF animations, you are provided|with a range of functions for loading and manipulating animated sequences directly in your programs.||"},{"name":"Frame Length","descriptions":[{"lang":"en","text":"Indicates if a file or directory exists on the disc"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"index","text":"The index of the IFF channel"},{"lang":"en","name":"*nFrames","type":"integer","text":"An eventual number of frames to calculate"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The length in bytes of the frames in memory. 0 in this version"}],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This function is used to calculate the precise amount of memory needed to hold the selected frames of an IFF animation file. To find the exact size of the required data area with FRAME||LENGTH, simply give the channel number of the IFF file previously opened with the OPEN IN command.||You may also specify the number of frames to be taken into consideration. If this number is omitted, only the first|frame in the animation with be checked. Alternatively, if an overlarge number is specified, the exact memory|requirements of all the frames in the current file will be returned.||FRAME LENGTH does not change the position of the file pointer, but leaves it at the start of the next animation|frame to be loaded. So it can be used immediately before a FRAME LOAD command to check the memory|requirement of your new animation. For example:|~~~|Open In 1 ,\"AMOSPro_Tutorial:Iff_Anim/AMOS.Anim\"|Rem Load first frame only into memory|L=Frame Length(1)|Rem Reserve space for the frame in Bank 10|Reserve As Work 10,L|N=Frame Load(1 To 10)|Close|Print \"Required memory for frame 1=\";L|~~~|"},{"name":"Frame Skip","descriptions":[{"lang":"en","text":"Skip past an animation frame"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bank","type":"address","text":"The index of a memory bank or an address in one"},{"lang":"en","name":"*nFrames","type":"integer","text":"An eventual number of frames to skip"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The address of the next frame. 0 in this version"}],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This is exactly the same as FRAME PLAY, except that no output is made to the screen. FRAME SKIP omits any selected frames and returns the address of the next frame to be played in the sequence. The bank or address number of a valid IFF animation frame is given, followed by the number of frames to be skipped over.||Use FRAME SKIP carefully, because frames are stored relative to the existing screen background. This means that|the animation will only re-commence when an identical frame is reached to the one currently being displayed.||"},{"name":"Frame Param","descriptions":[{"lang":"en","text":"Return a parameter after playing a frame"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The amount of time needed to successfully display an animation on screen, measured in 50ths of a second.. 0 in this version"}],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This function returns the amount of time needed to successfully display an animation on screen, measured in 50ths|of a second. It is used after FRAME PLAY or FRAME SKIP to delay the program until the screen has been totally|re-drawn.||Deluxe Paint users may need to slow down the speed of AOZ Studio animations by one fiftieth of a second,|in order to harmonise the display, like this:|~~~|Wait Form Param+1|~~~|This has nothing to do with the Deluxe Paint package, but takes into account the extra efficiency of the AMOS|Professional double buffering and copper calculations, when compared to the standard Workbench routines!||"},{"name":"Get Fonts","descriptions":[{"lang":"en","text":"Scan the system for new fonts, will scan both Google and Amiga fonts."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"This instruction has no effect in AOZ and is left for compatibility with AMOS applications.||(extracted from the AMOSPro manual)||The GET FONTS command creates an internal list of all available fonts on the System disc, and it should always be|called at least once before any changes in settings are made. In practice, you will probably want to use this|instruction at the beginning of a program, so that SET FONT may be used freely at any later point.||It is very important to remember that if you are distributing run-only or compiled programs to be used by other|people, and these programs make use of alternative fonts, then the required font files must be included.|~~~|Get Fonts|For F=0 To 10|Set Font F : T$=\"AOZ Studio Font: \"+Str$(F)|Text 0,100,T$|Wait Key : Cls|Next F|~~~||"},{"name":"Get Disc Fonts","descriptions":[{"lang":"en","text":"Scan the system for Amiga fonts."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"This instruction has no effect in AOZ and is left for compatibility with AMOS applications.||(extracted from the AMOSPro manual)||This instruction is exactly the same as the GET FONTS command, except that it triggers a search through the Fonts\" folder of your current disc only. If new fonts are to be used, then they must first be copied into this folder.|"},{"name":"Get Rom Fonts","descriptions":[{"lang":"en","text":"Scan the system for Google fonts."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction has no effect in AOZ and is left for compatibility with AMOS applications.||(extracted from the AMOSPro manual)||As you might expect, this command produces a list of the fonts that are built into the computer's ROM chips. At time of writing, the choice is rather limited:|~~~|Screen Open 0,640,200,16,Hires|Get Rom Fonts|For A=1 To 10|Set Font A : A$=\"Hello, I'm \"+ Font$(A) : Text 0,100,A$|Wait Key : Cls|Next A|~~~|"},{"name":"Get CBlock","descriptions":[{"lang":"en","text":"Captures a portion of the graphics from a screen into a buffer. (deprecated, use Get Block)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the block to create"},{"lang":"en","name":"X1","type":"integer","text":"Horizontal coordinate of the top-left corner of the rectangle to capture"},{"lang":"en","name":"y1","type":"integer","text":"Vertical coordinate of the top-left corner of the rectangle to capture"},{"lang":"en","name":"x2","type":"integer","text":"Horizontal coordinate of the bottom-right corner of the rectangle to capture"},{"lang":"en","name":"y2","type":"integer","text":"Vertical coordinate of the bottom-right corner of the rectangle to capture"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"(extracted from the AMOSPro manual)||The GET CBLOCK command is used to save and compact a rectangular area of graphics from the screen. These|Blocks are often used to grab the area underneath dialogue boxes, so that after the dialogue has been completed, the|screen can be rapidly restored to its original state.||Specify the Block number from 1 to 65535, followed by the x,y-coordinates of its top left-hand corner. Then define|the Block by giving its width and height, in pixels. Note that the x- coordinate, and the width of the Block will be|rounded to the nearest multiple of eight pixels.|"},{"name":"Put CBlock","descriptions":[{"lang":"en","text":"Draw a previously capture block in the current screen. (deprecated, use Put Block)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the block to draw"},{"lang":"en","name":"x","type":"integer","text":"Horizontal coordinate of the top-left corner of the block drawn"},{"lang":"en","name":"y","type":"integer","text":"Vertical coordinate of the top-left corner of of the block drawn"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"(extracted from the AMOSPro manual)||This command places the Block whose number is specified at its original screen coordinates. Optional target|coordinates can be added, in which case the Block will be unpacked and then drawn at the new position. Any new|x-coordinate will also be rounded to the nearest 8-pixel boundary.|"},{"name":"Del CBlock","descriptions":[{"lang":"en","text":"Destroys an existing CBlock and free memory (deprecated, use Del Block)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the block to destroy"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"(extracted from the AMOSPro manual)||The DEL CBLOCK instruction erases all compacted Blocks from memory, unless an individual Block number is|specified, in which case only that Block will be erased.|"},{"name":"Reserve As Chip Work","descriptions":[{"lang":"en","text":"Reserve and allocates memory for a new bank in Amiga chip memory, and add it to the list of banks (deprecated)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Number of the bank to create"},{"lang":"en","name":"length","type":"integer","text":"Length in byte of the new bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Note: this command is equivalent to \"Reserve As Work\" in AOZ.||(extracted from the AMOSPro manual)||This command allocates the selected block of temporary memory using Chip Ram, and it is often used with the DOUBLE BUFFERED sampling system, to play samples directly from hard disc. Here are some typical examples of|the different RESERVE AS commands:|~~~|Reserve As Chip Work 10,10000: Rem 10000 bytes of chip workspace to bank 10|Reserve As Work 11,5000: Rem 5000 bytes of fast workspace to bank 11|Reserve As Chip Data 12,2000 : Rem 2000 bytes of permanent chip data to bank 12|Reserve as Data 13,1000 : Rem 1000 bytes of fast data to bank 13|~~~|"},{"name":"Reserve As Chip Data","descriptions":[{"lang":"en","text":"Reserve and allocates memory for a new bank of \"Data\" type in Amiga chip memory, and add it to the list of banks (deprecated)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Number of the bank to create"},{"lang":"en","name":"length","type":"integer","text":"Length in byte of the new bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Note: this command is equivalent to \"Reserve As Data\" in AOZ.||(extracted from the AMOSPro manual)||Use this variation of the RESERVE AS instruction to allocate a permanent area of memory using Chip Ram. If there is none available, an \"Out of Memory\" error will be reported. You can obtain an instant read-out of the|remaining chip memory by calling the CHIP FREE function, as follows:|~~~|CF=Chip Free|Print \"Remaining Chip memory = \";CF;\" bytes.\"|~~~|Once a bank has been defined by this command, it will be saved automatically, along with your AOZ Studio|Basic program.||"},{"name":"Pack","descriptions":[{"lang":"en","text":"Compress an screen into a memory bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"screen","type":"index","text":"Index of the screen"},{"lang":"en","name":"bank","type":"index","text":"Index of the bank to compress to"},{"lang":"en","name":"x1","type":"integer","text":"Coordinate of top-left corner of rectangle to compress (optional)"},{"lang":"en","name":"y1","type":"integer","text":"Coordinate of top-left corner of rectangle to compress (optional)"},{"lang":"en","name":"x2","type":"integer","text":"Coordinate of bottom-right corner of rectangle to compress (optional)"},{"lang":"en","name":"y2","type":"integer","text":"Coordinate of bottom-right corner of rectangle to compress (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"Note: this instruction will be implemented with ZIP compression in a near future.||(extracted from the AMOSPro manual)||The image must always be unpacked into an existing screen. Also there will be a slight flicker when the image is|unpacked, unless the screens have been double buffered, so it is better to use single buffered screens here. Screen|numbers, memory bank numbers and optional coordinates for smaller sections of the screen to be packed are used in|exactly the same way as with the SPACK command, and x-coordinates are rounded to the nearest 8 pixel boundary|too.||SPACK is fully compatible with the standard AUTOBACK system explained in Chapter 7.2, so it is easy to|combine compacted images with moving screens. Images can even be unpacked behind existing Bobs, so it is|possible to exploit this command together with SCREEN OFFSET to create superb scrolling backgrounds.|"},{"name":"SPack","descriptions":[{"lang":"en","text":"Compress an screen into a memory bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"screen","type":"index","text":"Index of the screen"},{"lang":"en","name":"bank","type":"index","text":"Index of the bank to compress to"},{"lang":"en","name":"x1","type":"integer","text":"Coordinate of top-left corner of rectangle to compress (optional)"},{"lang":"en","name":"y1","type":"integer","text":"Coordinate of top-left corner of rectangle to compress (optional)"},{"lang":"en","name":"x2","type":"integer","text":"Coordinate of bottom-right corner of rectangle to compress (optional)"},{"lang":"en","name":"y2","type":"integer","text":"Coordinate of bottom-right corner of rectangle to compress (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"Note: this instruction will be implemented with ZIP compression in a near future.||(extracted from the AMOSPro manual)||The image must always be unpacked into an existing screen. Also there will be a slight flicker when the image is|unpacked, unless the screens have been double buffered, so it is better to use single buffered screens here. Screen|numbers, memory bank numbers and optional coordinates for smaller sections of the screen to be packed are used in|exactly the same way as with the SPACK command, and x-coordinates are rounded to the nearest 8 pixel boundary|too.||SPACK is fully compatible with the standard AUTOBACK system explained in Chapter 7.2, so it is easy to|combine compacted images with moving screens. Images can even be unpacked behind existing Bobs, so it is|possible to exploit this command together with SCREEN OFFSET to create superb scrolling backgrounds.|"},{"name":"Unpack","descriptions":[{"lang":"en","text":"Unpack a compacted screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bank","type":"index","text":"Index of the screen"},{"lang":"en","name":"*x","type":"integer","text":"Coordinate of top-left corner of rectangle to unpack to"},{"lang":"en","name":"*y","type":"integer","text":"Coordinate of top-left corner of rectangle to unpack to"},{"lang":"en","name":"*screen","type":"index","text":"Index of the screen to unpack the image to"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"Note: this instruction will be implemented with ZIP compression in a near future.||(extracted from the AMOSPro manual)||As you might expect, this is used to unpack crunched images. Using double buffered screens will give smooth|results, otherwise unpacking may get messy, and always make sure that the destination screen is in exactly the same|format as the packed picture or an error will be generated.||To unpack screen data at its original position, state which memory bank is to be unpacked, like this:|~~~|Unpack 15|~~~|To re-draw the packed image starting from new top left-hand corner coordinates, include them|after the bank number. If the new image does not fit into the current screen, the appropriate error message will|appear.||The other form of the UNPACK command is open a screen and unpack the data held in the selected bank to that|screen. For example:||~~~|Unpack 15 To 1|~~~|If the screen you select already exists, its image will be replaced by the newly unpacked picture within one second.|"},{"name":"Set Tempras","descriptions":[{"lang":"en","text":"Set Temporary Raster"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"buffer","type":"address","text":"Address of the buffer"},{"lang":"en","name":"integer","type":"size","text":"Size of the buffer"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This command allows the AOZ programmer to adjust the amount of memory used by the various|graphics operations. You are warned that improper usage can cause your computer to crash! The address and size of|the graphics buffer can be changed as explained below.||The buffer address can be either an address or a memory bank, and the memory reserved for this buffer should|always be Chip RAM. After allocating the buffer area at the start of your program, there is no need to keep on|reserving and restoring it, which means that the execution of your programs can be speeded up by up to 5%!||The buffer size is the number of bytes you want to reserve for the buffer area, ranging from 256 to 65536. To|calculate the amount of memory you need for a particular object, enclose the object in a rectangular box and apply|the following formula:|~~~|Memory area = Width/8*Height|~~~|If you are intending to use the PAINT command, make sure that your shape is closed, otherwise additional memory|may be called for, causing the system to crash.||The buffer area can be restored to its original value by calling SET TEMPRAS with no parameters.||"},{"name":"Icon Base","descriptions":[{"lang":"en","text":"Returns the address of the Icon whose number is specified in brackets. Not implemented in AOZ"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"iconIndex","type":"index","text":"The index of the icon in the bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0 in this version"}],"compatible":" notimplemented","content":"ICON BASE returns the address of the Icon whose number is specified in brackets. The format of this information is exactly the same as for the SPRITE BASE function, explained below.|"},{"name":"Free","descriptions":[{"lang":"en","text":"Return the amount of free memory on the machine."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The amount of free memory"}],"content":"Warning, this instruction might not work on all platforms and maybe deprecated in the future. The original AMOS instruction reported the amount of free memory in the variable buffer area...||For an example of a function in operation, the FREE function checks how many \"bytes\" of memory are currently|available to hold your variables, and it can be used to make a report, like this:|~~~|Print \"The number of bytes available is:;Free|~~~|Now use the FREE function with the SET BUFFER command (which is explained earlier in this Chapter) as follows:|~~~|Set Buffer 13|Print \"The number of bytes now available is:;Free|~~~||"},{"name":"Chip Free","descriptions":[{"lang":"en","text":"Return the amount of free memory on the machine. Warnign, not tested and maybe deprecated in the future./ The original AMOS instruction reported the amount of free chip memory of the machine, which has no meaning tocay"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The amount of free memory"}],"content":"For an example of a function in operation, the FREE function checks how many \"bytes\" of memory are currently|available to hold your variables, and it can be used to make a report, like this:|~~~|Print \"The number of bytes available is:;Free|~~~|Now use the FREE function with the SET BUFFER command (which is explained earlier in this Chapter) as|follows:|~~~|Set Buffer 13|Print \"The number of bytes now available is:;Free|~~~||"},{"name":"Fast Free","descriptions":[{"lang":"en","text":"Return the amount of free memory on the machine. Warnign, not tested and maybe deprecated in the future./ The original AMOS instruction reported the amount of free fast memory of the machine, which has no meaning tocay"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The amount of free memory"}],"content":"For an example of a function in operation, the FREE function checks how many \"bytes\" of memory are currently|available to hold your variables, and it can be used to make a report, like this:|~~~|Print \"The number of bytes available is:;Free|~~~|Now use the FREE function with the SET BUFFER command (which is explained earlier in this Chapter) as|follows:|~~~|Set Buffer 13|Print \"The number of bytes now available is:;Free|~~~||"},{"name":"Set Stack","descriptions":[{"lang":"en","text":"Deprecated, we used to set the stack space on the Amiga"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"space","type":"integer","text":"The length opf the stack"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||When AMOS procedures call themselves, an \"Out of stack space\" error message will be generated|after about fifty loops. Use the SET STACK instruction by specifying the new number of procedure calls that an be|made.||Keeping track of procedures|To help you find the starting positions of procedures in a very long program, there is a simple short-cut that uses just|two keys.||By pressing [Alt] and [Down Arrow] together, the edit cursor automatically jumps to the next procedure definition|in your program. To jump to the previous procedure, press [Alt] and [Up Arrow] together. This shortcut works|equally well with labels and line numbers!||If you are using several procedures on the same line, you can avoid the risk of a procedure being confused with a|label by adding an extra space at the end of each statement. For example:|~~~|HEY: HEY: HEY: Rem Perform HEY procedure three times|HEY: HEY: HEY: Rem Define label HEY and perform HEY procedure twice|~~~||"},{"name":"Set Equate Bank","descriptions":[{"lang":"en","text":"Deprecated, was used on the Amiga"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bank","type":"index","text":"Index of the bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This command allocates a memory bank for use by the automatic equate system. It should be called up before the|first equate in your program, preferably near the beginning. Specify the bank number to be used for your equates,|ranging from 1 to 65535. Any existing bank of the same number will be erased when the equates are installed in|memory, without warning, so take care!||"},{"name":"Call","descriptions":[{"lang":"en","text":"Deprecated, was used on the Amiga"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"Address","type":"integer","text":""},{"lang":"en","name":"parameter","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||The CALL instruction is used to run a machine code program straight from the Amiga's memory. You can specify|either an absolute memory location or the number of a memory bank, previously installed using the PLOAD|command.||On entry to the program, registers D0 to D7 and A0 to A2 will be loaded from values stored in the DREG and|AREG functions. The assembly language program can change any 68000 registers it chooses. At the start of the|routine, register A3 will point to the optional parameter list, which is explained next, and A5 will contain the address|of the AOZ Studio data zone. When the routine has completed its task, you can return to Basic with a RTS.||After the memory location or bank number, a list of optional parameters may be given in the form of a list of|values. These values will be taken from the AOZ Studio Basic program and pushed onto the A3 stack by the|CALL command. They must be removed in reverse order, so the last value in the list will be the first on the stack.|The format of a parameter depends on what type of variable they are, as follows:||Integers. The parameter holds a long word, containing a normal AOZ Studio number. It can be grabbed with|a line such as this:|~~~|Move.l (a3)+,d0|~~~|Single precision numbers. These are stored in Fast Floating Point format, and are held in one long word. To load|such a number into register d0, use the following:|~~~|Move.l (a3)+,d0|~~~|Double precision numbers. These are stored in IEEE double precision format, and are held as two long words. To|load a double precision variable into registers d0 and dl, you could use this:|~~~|Move.l (a3)+,d0 * Top half|Move.l (a3)+,d1 * Bottom half|~~~|Strings. The stack contains the Address of the string in memory. All strings begin with a single word that holds their|length. For example:|~~~||; Grab the string. Each string is stored at an EVEN address,|; starting with the length of the string, and then the string itself|Move.l (a3)+,a2 \t* Address of the string|Move.w (a2)+,d2 \t* Length of the string||~~~||"},{"name":"ExeCall","descriptions":[{"lang":"en","text":"Deprecated, was used on the Amiga"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"offset","type":"integer","text":"Offset of the call in the library"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||The EXECALL function performs a call to the Amiga's EXEC library, with the specified offset value. On entry, D0|to D7 and A0 to A2 must be loaded with the control settings required by the function. A value is returned holding|the contents of D0.||"},{"name":"GfxCall","descriptions":[{"lang":"en","text":"Deprecated, was used on the Amiga"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"offset","type":"integer","text":"Offset of the call in the library"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This executes a function directly from the Graphics library, taking the parameters from the DREG and AREG|arrays. The function offset parameter enters the offset to the function you wish to call, and can also be set using the|LVO function, if required.||"},{"name":"DosCall","descriptions":[{"lang":"en","text":"Deprecated, was used on the Amiga"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"offset","type":"integer","text":"Offset of the call in the library"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||DOSCALL executes a function directly from the DOS library, with the offset to the appropriate function being|specified in brackets. The selected command is executed straight from an AOZ Studio program, without the|need to open the DOS library in your program. This is useful for single calls to an important routine.||The offset value can either be a simple number or a named function using the LVO command. As with LIB CALL,|the control registers first need to be set up carefully. These values should be placed into D0 to D7 and A0 to A3,|with the aid of the AREG and DREG functions. After the command has been executed, the result will be given as|the return value in D0. Please note that the contents of the other registers will not be loaded back into AREG and|DREG.||"},{"name":"IntCall","descriptions":[{"lang":"en","text":"Deprecated, was used on the Amiga"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"offset","type":"integer","text":"Offset of the call in the library"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||The INTCALL function calls a command directly from the Intuition library. Before using this function, it is vital to|load the appropriate control parameters into the registers D0 to D7 and A0 to A3. This can be done with the AREG|and DREG variables from an AOZ Studio program. When the function has been executed, the contents of|D0 will be returned back to your program as the result. Please note that this function is particularly dangerous,|unless you are familiar with the Intuition library.||"},{"name":"Menu Base","descriptions":[{"lang":"en","text":"Move the starting position of a menu. Amiga only, This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"X Position"},{"lang":"en","name":"y","type":"integer","text":"Y Position"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||Use this command to move the starting point of the first level in your menu hierarchy to the absolute screen coordinates at x,y. All subordinate menu items will now be displayed relative to this starting point.|"},{"name":"Set Menu","descriptions":[{"lang":"en","text":"Move a menu item. Amiga only, This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"item","type":"integer","text":"Index if the item"},{"lang":"en","name":"x","type":"integer","text":"New horizontal position"},{"lang":"en","name":"y","type":"integer","text":"new vertical position"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||SET MENU sets the screen position of the top left-hand corner of the menu item whose parameters are given in brackets. These coordinates are measured relative to the previous level, so the starting point for the entire menu can be set by the MENU BASE command. All levels of the menu below this single item will also be moved by your SET MENU command. The coordinates can be negative as well as positive, so you are free to position items|anywhere on screen.||"},{"name":"Menu TLine","descriptions":[{"lang":"en","text":"Display menu items as a total horizontal bar. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"Level of the menu item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||MENU TUNE is used to display a section of your menu as a total line, stretching from the extreme left to the extreme right of the screen. The complete line will be drawn even if the first item is centre screen. Use this instruction in the same way as MENU LINE during your menu definitions.||"},{"name":"Menu Movable","descriptions":[{"lang":"en","text":"Activate automatic menu movement. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"Level of the menu item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||The default condition is that the menu items at a particular level may be moved directly by the user. Any level can be repositioned by moving the mouse pointer over the first item in the menu and holding down the left mouse button. A rectangular box will appear around the selected menu item, and it can be dragged to its new screen position. When the left mouse button is released, the menu is re-drawn at this location, along with all of its|associated items.||Use MENU MOVABLE to set the status of entire menu levels, or selected items in a menu hierarchy, but please|note that this command does not allow you to change the status of any items below the selected level.||"},{"name":"Menu Static","descriptions":[{"lang":"en","text":"Stop automatic menu movement. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"Level of the menu item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||One characteristic of mobile menus is that the amount of memory they use changes during the course of the|program. With large menus or programs that are on the boundary of available memory this can cause real problems.|MENU STATIC can be used to avoid these difficulties by setting the level or item at which the entire menu|becomes immovable by the user.||"},{"name":"Menu Item Static","descriptions":[{"lang":"en","text":"Fix items in static positions. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"Level of the menu item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This command locks one or more menu items into place, and is the default setting.||"},{"name":"Menu Item Movable","descriptions":[{"lang":"en","text":"Move individual menu options. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"Level of the menu item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This is similar to MENU MOVABLE, but it allows the re-arrangement of various options in a particular level. Normally it is not possible to move items outside of the current menu bar, but this can be overcome by the MENU SEPARATE command, which is explained below.||To use MENU ITEM MOVABLE for changing the position of a menu item, the entire menu bar must itself be|movable. So if MENU STATIC has been called, this command will have no effect. The first item in a menu bar can|not be moved, because this would move the entire line. Furthermore, if the last item in a menu bar is moved, the size|of that bar will be permanently reduced.||This problem can be overcome either by setting the last item into place with a MENU ITEM STATIC command, or|by enclosing the whole menu bar with a rectangular box, like this:|~~~|Menu$(1 ,1)=,,,,\"(Bar40,100)(Loc0,0)\"|~~~||"},{"name":"Menu Active","descriptions":[{"lang":"en","text":"Activate a menu item. Will be implemented later."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"Level of the menu item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||MENU ACTIVE reverses the effect of a previous MENU INACTIVE command. An entire level or single item|specified by its parameters can be re-activated and the original appearance of their title strings will be re-displayed.||"},{"name":"Menu Separate","descriptions":[{"lang":"en","text":"Separate a list of menu items. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"Level of the menu item."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||level will be deactivated. If you define an individual item in brackets by giving its parameters, only that item will become inactive.||If no inactive string has been defined when you originally set your menu up with MENU$, any menu options that|have been made inactive will be shown in italics. Otherwise the special inactive string will appear.||"},{"name":"Menu Link","descriptions":[{"lang":"en","text":"Link a list of menu items. Will be implemented later."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"LEVEL","type":"integer","text":"Level of the menu item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||This is the exact opposite of MENU SEPARATE, and is used to link one or more items together.||"},{"name":"Menu Called","descriptions":[{"lang":"en","text":"Re-draw a menu item continually. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"Level of the menu item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||MENU CALLED engages the automatic re-drawing process. This command is normally used with a menu|procedure to generate animated menu items, often with spectacular moving graphic effects.||To use this facility, a menu procedure should first be defined, as explained above. Next, add a call to this procedure in the required title strings, using an embedded PRoc command. Finally, activate the updating process with MENU CALLED. When the user selects the chosen item, your procedure is repeatedly accessed by the menu system.|Because menu items are not double buffered, bobs may flicker a little, but the use of computed sprites will present|no such problems.||"},{"name":"Menu Once","descriptions":[{"lang":"en","text":"Turn off automatic re-drawing. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"Level of the menu"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||MENU ONCE turns off the automatic updating system instigated by MENU CALLED. After the command is given, each menu item will only be re-drawn once when the menu is called on the screen. It is used like this:|~~~|Menu Once(1,1)|~~~||"},{"name":"X Menu","descriptions":[{"lang":"en","text":"Return the graphical x-coordinate of a menu item. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"Level of the menu tiem."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The graphical coordinate"},{"lang":"en","type":"integer","text":"The graphical x-coordinate of a menu item. 0 in this version."}],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||The X MENU function allows you to get the position of a menu item, relative to the previous option on screen. This information can be used to set up very powerful menus.||"},{"name":"Y Menu","descriptions":[{"lang":"en","text":"Return the graphical x-coordinate of a menu item. This instruction may be implemented in a future version of AOZ."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"Level of the menu"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The graphical coordinate"},{"lang":"en","type":"integer","text":"The graphical y-coordinate of a menu item. 0 in this version."}],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||Y MENU returns the y-coordinate of a menu option, measured relatively to the previous item on screen. Please refer to the demonstration program above.||"},{"name":"Screen Swap","descriptions":[{"lang":"en","text":"Swaps the physical and logical buffers of a screen. (Deprecated in AOZ, legacy instruction, has no real effect)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"The index of the screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"(extracted from the AMOSPro manual)||This is the command that swaps over the physical and logical screens, so that the displays are instantly switched|between the two of. them. If the DOUBLE BUFFER command has been engaged, this process is automatic.|"},{"name":"Dual Playfield","descriptions":[{"lang":"en","text":"Associate the display of two screens into a parallax display. (Deprecated, use \"Set Transparent\" and \"Screen Offset\" to associate more than two screens together)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"screen","type":"integer","text":"The index of first screen, will be on top"},{"lang":"en","name":"screen2","type":"integer","text":"The index of second screen, will be in the back"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" amos","content":"(extracted from the AMOSPro manual)||The DUAL PLAYFIELD mode is the equivalent of mixing together two images from separate video cameras, and is|achieved by displaying two screens simultaneously at the same x,y- coordinates. Each of the two screens can be|manipulated completely independently from one other, and this can be exploited to produce very smooth parallax|scrolling. Because the sizes of the two screens can be different, a smaller screen can be scrolled against a larger|background screen, creating the parallax effect.||The two components of this dual playfield are treated as any other AOZ Studio screen, and they can even be|double buffered or animated with AMAL.||To create a dual playfield screen, simply give the command, followed by the two numbers of the relevant screens,|which have already been defined using SCREEN OPEN. Both screens must have the same resolution, and there are|some restrictions on the number of colours allowed. Here is a table of the possibilities:|~~~|1st Screen \t2nd Screen \tResolution of both screens|2 colours \t2 colours \tLowres or Hires|4 colours \t2 colours \tLowres or Hires|4 colours \t4 colours \tLowres or Hires|8 colours \t4 colours \tLowres only|8 colours \t8 colours \tLowres only|~~~|The colours of these screens are taken from the palette of the first screen with colour zero being IF treated as|transparent. The first screen makes use of colours zero to 7, while the second screen uses 8 to 15. When you are|drawing to the second screen, AOZ Studio will automatically convert the colour index to the appropriate|number before using it. This means that colours zero to 7 of the second screen's palette will use colours 8 to 15 of|the first screen's palette, in ascending order.||Always make the first screen the current screen when changing the colour settings.||Remember that the automatic conversion process does not apply to assignment statements such as COLOUR or|PALETTE.||When using SCREEN OFFSET to position a dual playfield screen, always specify the first screen, and never set|screen offsets for both dual playfield screens to zero.||"},{"name":"Dual Priority","descriptions":[{"lang":"en","text":"Set the display priority of two screens associate in Dual Playfield. (Deprecated, use \"Set Transparent\" and \"Screen Offset\" to associate more than two screens together, and then \"Screen To Front\" or \"Screen To Back\" to handle the display priority)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"screen1","type":"integer","text":"The index of first screen, will be on top"},{"lang":"en","name":"screen2","type":"integer","text":"The index of first screen, will be in the back"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" amos","content":"(extracted from the AMOSPro manual)||Normally, the first screen of a dual playfield is displayed directly over the second screen. To reverse this order, so|that the second screen appears in front of the first, use the DUAL PRIORITY command. Please note that this|instruction only changes the order of display, and has no effect on the screen organisation at all, so the first screen in|the parameter list is still used for all colour assignments, and with the SCREEN DISPLAY command.||"},{"name":"Phybase","descriptions":[{"lang":"en","text":"Return the address of the first pixel in the bitmap buffer of the current screen (deprecated, there is no difference between logical and physical screen buffers in AOZ)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"A magical number representing the adress of the buffer, to be used later with \"Poke\" / \"Doke\" / \"Loke\" / \"Peek\" / \"Deek\" / \"Leek\" instructions. Not a real address in AOZ"}],"compatible":" notimplented","content":"(extracted from the AMOSPro manual)||PHYBASE returns the address in memory of the specified bit-plane number for the current screen. If this plane does|not exist, a value of zero is given. For example:|~~~|Loke Phybase(0),0 : Rem Poke a thin line directly onto screen|~~~||"},{"name":"Logbase","descriptions":[{"lang":"en","text":"Return the address of the first pixel in the bitmap buffer of the current screen (deprecated, there is no difference between logical and physical screen buffers in AOZ)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"integer","text":"The index of the screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"A magical number representing the adress of the buffer, to be used later with \"Poke\" / \"Doke\" / \"Loke\" / \"Peek\" / \"Deek\" / \"Leek\" instructions. Not a real address in AOZ"}],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||The LOGBASE function allows expert programmers to access the Amiga's screen memory directly. The current|screen is made up of six possible bit-planes, and after LOGBASE has been called, the address of the required plane|is returned, or zero is given if it does not exist.||"},{"name":"Physic","descriptions":[{"lang":"en","text":"Return a magical number representing the physical buffer of the current screen, to be used in \"Screen Copy\" and all Screen instructions that necessitate a Screen Index. (deprecated, no such thing as physical or logic al screen in AOZ)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"A magical number representing the physical buffer of the screen. To be used wherever you need a screen index"}],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||The PHYSIC function returns an identification number for the current physical screen. This number allows you to|access the physical image being displayed by the automatic DOUBLE BUFFER system, and the result of this|function can be substituted for the screen number in ZOOM, APPEAR and SCREEN COPY commands. The|PHYSIC identification number of the current screen will be returned, unless an optional screen number is specified.||"},{"name":"Logic","descriptions":[{"lang":"en","text":"Return a magical number representing the logical buffer of the current screen, to be used in \"Screen Copy\" and all Screen instructions that necessitate a Screen Index. (deprecated, no such thing as physical or logic al screen in AOZ)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"A magical number representing the logical buffer of the screen. To be used wherever you need a screen index"}],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||Use the LOGIC function to get an identification number for the current logical screen, or use an optional screen|number to specify a particular logical screen. The identification number that is returned can now be used with the|ZOOM, APPEAR and SCREEN COPY commands, to change images off screen, without affecting the current|display.||"},{"name":"Autoback","descriptions":[{"lang":"en","text":"Set the autoback background preservation system for graphical instruction (Deprecated, has no effect in AOZ)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the screen"},{"lang":"en","name":"mode","type":"integer","text":"A number from 0 to 2 included representing the mode to use"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" amos","content":"(extracted from the AMOSPro manual)||There are three AUTOBACK modes, and you can toggle between them by setting the mode values as follows:|~~~|Autoback 0|~~~|Manual mode. This mode deactivates the AUTOBACK system completely, so that graphics are drawn directly on|the logical screen, for maximum speed. It is recommended for use with the BOB DRAW and BOB CLEAR|commands.|AUTOBACK 0 is useful when large amounts of graphics are drawn on screens being switched manually with|SCREEN SWAP, because it is much faster than the standard system. But remember that you must take responsibility|for synchronising between the logical and physical screens.|~~~|Autoback 1|~~~|Semi-automatic. In mode 1, AUTOBACK performs all graphical operations on both the logical and physical screens.|Although Bob updates are not taken into account, this is an ideal mode for displaying hi-score tables and control|panels. So as long as your Bobs are kept clear of any new graphics, this mode is perfect.|~~~|Autoback 2|~~~||"},{"name":"Screen Base","descriptions":[{"lang":"en","text":"Not implemented, deprecated, will return 0"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Return 0"}],"compatible":" notimplemented","content":"(extracted from the AMOSPro manual)||This function returns the base address of the internal table that is used to hold the number and position of AOZ Studio STUDIO screens.||"},{"name":"Hires","descriptions":[{"lang":"en","text":"Return a magical number to be used in the \"Screen Open\" instruction, enforce a horizontal compression by half of the pixels"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"1"}],"compatible":" amos","content":"(extracted from the AMOSPro manual)||When the default screen is automatically opened, screen 0 is the equivalent to the following setting:|~~~|Screen Open 0,320,200,16,Lowres|~~~|To open screen number 1 as an oversize high-resolution screen with eight colours, you would use something like|this:|~~~|Screen Open 1,600,400,8,Hires|~~~|This routine opens all eight available screens and brings them into view:|~~~|Curs Off : Cls 13: Paper 13|Print : Centre \"Hello, I'm SCREEN 0\"|For S=1 To 7|Screen Open S,320,20,16,Lowres|Curs Off : Cls S+2 : Paper S+2|Centre \"And I am SCREEN\"+Str$(S)|Screen Display S,,50+S*25,,8|Next S|~~~|Here is a table which lists the different screen options, along with an indication of the amount of memory a standard|size screen will consume.|~~~|Colours \tResolution \tMemory \tNotes|2 \t\t\t320x200 \t8k \tPAPER=0 PEN=1 no FLASH Cursor=1|2 \t\t\t640x200 \t16k \tas above|4 \t\t\t320x200 \t16k \tPAPER=1 PEN=2 FLASH=3 Cursor=3|4 \t\t\t640x200 \t32k \tas above|8 \t\t\t320x200 \t24k \tPAPER=1 PEN=2 FLASH=3 Cursor=3|8 \t\t\t640x200 \t48k \tas above|16 \t\t\t320x200 \t32k \tdefault setting|16 \t\t\t640x200 \t64k|32 \t\t\t320x200 \t40k|64 \t\t\t320x200 \t48k \tExtra Half Bright mode|4096 \t\t320x200 \t48k \tHold And Modify mode|~~~||"},{"name":"Lowres","descriptions":[{"lang":"en","text":"Return a magical number to be used in the \"Screen Open\" instruction, display pixel with their original horizontal ratio"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0"}],"content":"(extracted from the AMOSPro manual)||When the default screen is automatically opened, screen 0 is the equivalent to the following setting:|~~~|Screen Open 0,320,200,16,Lowres|~~~|To open screen number 1 as an oversize high-resolution screen with eight colours, you would use something like|this:|~~~|Screen Open 1,600,400,8,Hires|~~~|This routine opens all eight available screens and brings them into view:|~~~|Curs Off : Cls 13: Paper 13|Print : Centre \"Hello, I'm SCREEN 0\"|For S=1 To 7|Screen Open S,320,20,16,Lowres|Curs Off : Cls S+2 : Paper S+2|Centre \"And I am SCREEN\"+Str$(S)|Screen Display S,,50+S*25,,8|Next S|~~~|Here is a table which lists the different screen options, along with an indication of the amount of memory a standard|size screen will consume.|~~~|Colours \tResolution \tMemory \tNotes|2    \t\t320x200 \t8k \t\tPAPER=0 PEN=1 no FLASH Cursor=1|2 \t    \t640x200 \t16k \tas above|4 \t\t\t320x200 \t16k \tPAPER=1 PEN=2 FLASH=3 Cursor=3|4 \t\t  \t640x200 \t32k \tas above|8 \t\t \t320x200 \t24k \tPAPER=1 PEN=2 FLASH=3 Cursor=3|8 \t\t\t640x200 \t48k \tas above|16 \t\t\t320x200 \t32k \tdefault setting|16 \t\t\t640x200 \t64k|32 \t\t\t320x200 \t40k|64 \t\t\t320x200 \t48k \tExtra Half Bright mode|4096 \t\t320x200 \t48k \tHold And Modify mode|~~~||"},{"name":"Laced","descriptions":[{"lang":"en","text":"Return a magical number to be used in the \"Screen Open\" instruction, enforce a vertical compression by half of the pixels"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"2"}],"compatible":" amos","content":"(extracted from the AMOSPro manual)||LACED is a reserved variable which holds the value of 4. It is used in addition to either the Hires or Lowres|parameters when opening a screen, like this:|~~~|Screen Open 0,320,200,16,Laced+Lowres|~~~|Interlaced screens have double the number of vertical lines, which is excellent for graphic displays. Unfortunately|they take twice as long to update, which is no good at all for fast-action games! Interlaced screens will only give|flicker-free results if a \"multi-sync\" monitor is being used. Also certain TV sets and monitors do not take kindly to|excessive switching between interlaced and normal screens.||All of the usual operations may be used with interlaced screens, such as SCREEN DISPLAY, SCREEN OFFSET,|and so on, but for technical reasons interlacing is not allowed during copper list calculations. As soon as the last|interlaced screen has been closed, the entire display returns to normal mode.||"},{"name":"Halfbright","descriptions":[{"lang":"en","text":"Return a magical number to be used in the \"Screen Open\" instruction, and set the screen in Amiga-compatible Halfbright colour mode"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"4"}],"compatible":" amos"},{"name":"X Hard","descriptions":[{"lang":"en","text":"Converts a horizontal coordinate in a given screen to its equivalent in hardware coordinates taking into account the position, scale and rotation factor of the screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*screen","type":"index","text":"The index of the screen to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The hardware equivalent of the horizontal screen coordinate"}],"compatible":" amos","content":"(extracted from the AMOSPro manual)||These functions convert screen coordinates into hardware coordinates, relative to the current screen. As with X|SCREEN and Y SCREEN, an optional screen number can be given, and coordinates will be returned relative to that|screen.||With all four of the above functions, sensible values can only be returned when the relevant screen has been fully|initialised. Both the SCREEN OPEN and SCREEN DISPLAY commands only come into effect from the next|vertical blank, and the following examples demonstrate that the correct coordinate values (in this case 128,50) are|only returned after a WAIT VBL command.|~~~|Screen Open 0,320,255,16,Lowres|Print X Hard(0,0); Y Hard(0,0)|~~~|Now try the correct version:|~~~|Screen Open 0,320,255,16,Lowres|Wait Vbl|Print X Hard(0,0); Y Hard(0,0)|~~~|The default screen is initially located at hardware coordinates (128,50), and if you find the whole business of|hardware coordinates and screen coordinates tiresome, you can bypass the entire conversion system.||By setting the HOT SPOT of your Sprite images to (-128,-50), the reference point for all position calculations is|removed to the far corner of the display. Once an image has been prepared in this way, it can be assigned to a Sprite|and moved around using normal screen coordinates. For example:|~~~|Hot Spot 1,-128,-50: Rem Set up hot spot|Sprite 8,160,100,1 : Rem Sprite 8 to screen coords 160,100|~~~||"},{"name":"Y Hard","descriptions":[{"lang":"en","text":"Converts a vertical coordinate in the current screen to its equivalent in hardware coordinates taking into account the position, scale and rotation factor of the screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*screen","type":"index","text":"The index of the screen to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The hardware equivalent of the vertical current screen coordinate"}],"compatible":" amos","content":"(extracted from the AMOSPro manual)||These functions convert screen coordinates into hardware coordinates, relative to the current screen. As with X|SCREEN and Y SCREEN, an optional screen number can be given, and coordinates will be returned relative to that|screen.||With all four of the above functions, sensible values can only be returned when the relevant screen has been fully|initialised. Both the SCREEN OPEN and SCREEN DISPLAY commands only come into effect from the next|vertical blank, and the following examples demonstrate that the correct coordinate values (in this case 128,50) are|only returned after a WAIT VBL command.|~~~|Screen Open 0,320,255,16,Lowres|Print X Hard(0,0); Y Hard(0,0)|~~~|Now try the correct version:|~~~|Screen Open 0,320,255,16,Lowres|Wait Vbl|Print X Hard(0,0); Y Hard(0,0)|~~~|The default screen is initially located at hardware coordinates (128,50), and if you find the whole business of|hardware coordinates and screen coordinates tiresome, you can bypass the entire conversion system.||By setting the HOT SPOT of your Sprite images to (-128,-50), the reference point for all position calculations is|removed to the far corner of the display. Once an image has been prepared in this way, it can be assigned to a Sprite|and moved around using normal screen coordinates. For example:|~~~|Hot Spot 1,-128,-50: Rem Set up hot spot|Sprite 8,160,100,1 : Rem Sprite 8 to screen coords 160,100|~~~||"},{"name":"Screen Mode","descriptions":[{"lang":"en","text":"Return the \"mode\" parameter of a screen, as used in the \"Screen Open\" instruction"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"integer"}],"compatible":" amos","content":"(extracted from the AMOSPro manual)||This simple function is used to report the mode of the current screen. If the screen is LACED, 4 or $8004 will be|returned. If the screen is LOWRES, a value of $0 is given. For a HIRES screen, $8000 will be returned.||"},{"name":"Double Buffer","descriptions":[{"lang":"en","text":"Turns the display system into double-buffering. Deprecated"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" amos","content":"(extracted from the AMOSPro manual)||Throughout this Chapter, extensive reference is made to the technique known as \"double buffering\". The DOUBLE|BUFFER command creates an invisible copy of the current screen and stores it as a \"logical screen\". All graphics|operations, including Bob movements, are now performed directly on this logical screen, without disturbing your|existing display at all. This is because the existing display on your television screen is taken straight from the|original screen area, now called the \"physical screen\".||Once the image has been re-drawn, the logical screen and physical screen are swapped over. The old logical screen|is flicked onto the display, and the old physical screen is hidden away to become the new logical screen. The entire|process now cycles continuously, producing a solid, smooth display, even when dozens of Bobs are moving on the|same screen.||Any complexities of this technique are completely automatic, so once DOUBLE BUFFER has been engaged, you|can relax.||"},{"name":"HZone","descriptions":[{"lang":"en","text":"Check if a given hardware coordinate lay inside of a zone. Hardware coordinate are only different from screen coordinate for retro-machine emulation (Amiga, Atari etc.)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"The index of a screen containing the zone"},{"lang":"en","name":"x","type":"integer","text":"Horizontal hardware coordinate to test"},{"lang":"en","name":"y","type":"integer","text":"Vertical hardware coordinate to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"-1 if the coordinate lay outside of every zones, index of the zone if they lay inside of one"}],"compatible":" amos","content":"(extracted from the AMOSPro manual)||The HZONE function is identical to ZONE, except for the fact that the position on screen is measured in hardware|coordinates. This means that this function can be used to detect the presence of a hardware Sprite in one of the|screen zones, in this format:|~~~|N=Hzone(X Sprite(n),Y Sprite(n))|~~~||"},{"name":"Sprite Base","descriptions":[{"lang":"en","text":"Get Sprite table"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"The index of a sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0"}],"compatible":"notimplemented","content":"(extracted from the AMOSPro manual)||SPRITE BASE provides the address of the internal data list for whichever Sprite number is specified in brackets. If|the Sprite does not exist, then the address of the table is returned as zero. Negative values for the Sprite number will|return the address of the optional mask associated with that Sprite, and the number that is returned can contain one|of three possible values, as follows:||- A negative number indicates that there is no mask for this Sprite.|- Zero indicates that the specified Sprite does have a mask, but it is yet to be generated by the system.|- A positive number indicates the address of the mask in memory. The first \"long word\" of this area holds the|length of the mask, and the next gives the actual definition.||"},{"name":"Close Editor","descriptions":[{"lang":"en","text":"Close the AMOS Professional Editor Window"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Set Sprite Buffer","descriptions":[{"lang":"en","text":"Set the height of hardware sprites"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]}]},{"name":"Animation Commands","id":1639692453874,"descriptions":[{"lang":"en","text":"Instructions and functions to animate and move sprites, bobs, screens, rainbows or any other graphical objects, different than AMAL"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Anim","descriptions":[{"lang":"en","text":"Starts a simple animation"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channelIndex","type":"index","text":"Index of the animation channel"},{"lang":"en","name":"definition$","type":"string","text":"Definition of the animation"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"ANIM is used to take an Object through a sequence of different images, creating smooth animation effects.|These animations are performed in the background, so they can be executed simultaneously with|AOZ programs. After the ANIM command, a channel number must be given to specify the|Object to be animated.||Then an animation string is given, with each operation composed of a pair of brackets|holding an image number and a delay time (in 50ths of a second).||For example:|~~~|Load \"AMOSPro_Tutorial:Objects/Sprites.abk\"|Channel 1 To Sprite 8: Sprite 8,200,100,1|Anim 1,\"(1,10)(2,10)(3,10)(4,10)\"|Anim On : Wait Key|~~~|"},{"name":"Anim Off","descriptions":[{"lang":"en","text":"Stops the animations of an animation channel"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channelIndex","type":"index","text":"Index of the animation channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"To activate all animation sequences already created by an ANIM command, use ANIM ON. If ail individual|sequence is specified by number, then only that sequence will be affected. Similarly, sequences started by ANIM ON|may be turned off by the ANIM OFF command.|"},{"name":"Anim On","descriptions":[{"lang":"en","text":"Starts the animations of an animation channel and eventually set the refresh frequency"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channelIndex","type":"index","text":"Index of the animation channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"To activate all animation sequences already created by an ANIM command, use ANIM ON. If ail individual|sequence is specified by number, then only that sequence will be affected. Similarly, sequences started by ANIM ON|may be turned off by the ANIM OFF command.|"},{"name":"Anim Freeze","descriptions":[{"lang":"en","text":"Pause the animations of an animation channel"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channelIndex","type":"index","text":"Index of the animation channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The ANIM FREEZE command suspends all animation sequences on screen, leaving them frozen in place. An|optional number may be given to freeze that specific sequence only. Animations can be started again with a simple|call to ANIM ON.|"},{"name":"Move","descriptions":[{"lang":"en","text":"Starts a simple movement horizontally and vertically. You must use \"Move On\" to actually see the object moving."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"any","text":"Index of the animation channel"},{"lang":"en","name":"definitionX$","type":"string","text":"A string containing the horizontal definition of the movement"},{"lang":"en","name":"definitionY$","type":"string","text":"A string containing the vertical definition of the movement"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"","content":"The instruction has been added to AOZ to allow you to declare movement in just one instruction instead of two, namely \"Move X\" and \"Move Y\".||Each string contains the definition of the movement for it's axe. The syntax of the string is identical to the one used in \"Move X\".|"},{"name":"Move X","descriptions":[{"lang":"en","text":"Starts a simple movement horizontally. You must use \"Move On\" to actually see the object moving."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channelIndex","type":"index","text":"Index of the animation channel"},{"lang":"en","name":"definition$","type":"string","text":"A string containing the horizontal definition of the movement"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The MOVE X command defines a list of horizontal movements to be performed on the animation channel specified|by the given index. This index refers to an animation sequence for an Object already|assigned by the CHANNEL command.||The number is followed by a \"movement string\" containing a series of|instructions which control the speed and direction of the Object. These movement commands are enclosed by|brackets, and are entered as the following three parameters, separated by commas.||The speed parameter sets a delay between each step of the movement, given in 50ths of a second. Speed can vary|from a value of 1 for very fast, all the way to 32767 for incredibly slow. This is followed by a step value, setting the|number of pixels the Object is to be moved during each operation. A positive value moves the Object to the right,|and a negative number to the left. The apparent speed of the Object will depend on the relationship between the|speed and the step values, varying from slow and smooth, to rapid but jerky movements.||A speed value of about 10 (or -10) is recommended. The last parameter is a count value, which determines the number of times the movement|is to be repeated. Values range between 1 and 32767, with the additional value of zero causing an indefinite|repetition.||It is vital to add an L (loop) instruction to the movement string after these parameters, if you want to force a jump to|the start of the string, forcing the entire sequence to be run again.||Here is an example:|~~~|Load \"AMOSPro_Tutorial:Objects/Sprites.Abk\" :Get Sprite Palette|Sprite 1,360,100,1|Move X 1,\"(1,1,60)(1,-5,60)L\"|Move On|Wait Key|~~~|An alternative ending to the movement string is to use the E option, followed by the value of an x-coordinate.||This stops the Object when it reaches the specified coordinate value, which must be less than (or equal to) the|original horizontal target destination. Try changing the third line of the last example to this:|~~~|Move X 1,\"(1,-5,30)E100\"|~~~|"},{"name":"Move Y","descriptions":[{"lang":"en","text":"Starts a simple movement horizontally. You must use \"Move On\" to actually see the object moving."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channelIndex","type":"index","text":"Index of the animation channel"},{"lang":"en","name":"definition$","type":"string","text":"A string containing the definition of the movement"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command operates in the same way as \"MOVE X\", and controls vertical movement. First the number of an|animation sequence is given, ranging from 0 to 15, and this sequence must be Already allocated using the|CHANNEL command. Then the movement string is given, as explained above. Positive values for the step|parameter control downward movements, and a negative value will result in an upward movement.||Here is an example:|~~~|Load \"AMOSPro_Tutorial:Objects/Sprites.abk\"|Channel 1 To Sprite 1: Sprite 1,228,50,1: Wait Vbl|Move Y 1,\"(1,1,180)(1,-1,180)L\" : Rem Loop Sprite|Channel 2 To Screen Display 0: Rem Assign screen position|Move Y 2,\"(1,4,25)(1,-4,25)\" : Rem Bounce screen up and down|Move On : Wait Key|~~~|"},{"name":"Move Off","descriptions":[{"lang":"en","text":"Stops the movement of an animation channel"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*channelIndex","type":"index","text":"Index of the animation channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command suspends the movement of all or the specified Objects on screen. Frozen Objects may be re- animated using the|MOVE ON command. If an optional Object number is given after MOVE FREEZE, then only that Object will be frozen.|"},{"name":"Move On","descriptions":[{"lang":"en","text":"Starts the movement of an animation channel"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*channelIndex","type":"index","text":"Index of the animation channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Before any movement patterns can be executed, they must be activated by a MOVE ON command. All movements|will begin at once unless an optional number is given, in which case only that particular animation sequence will be|activated. MOVE OFF has the opposite effect, halting all animations, or a single sequence specified by its number.|"},{"name":"Move Freeze","descriptions":[{"lang":"en","text":"Pauses the movement of an animation channel"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channelIndex","type":"index","text":"Index of the animation channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This command suspends the movement of all Objects on screen. Frozen Objects may be re- animated using the|MOVE ON command. If an optional Object number is given after MOVE FREEZE, then only that Object will be|frozen.|"},{"name":"Movon","descriptions":[{"lang":"en","text":"Returns True if the animation channel is moving, false if not."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channelIndex","type":"index","text":"Index of the animation channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use the MOVON function to check whether a particular Object is being moved by a MOVE X or MOVE Y|command. A value of True is returned while the Object is in motion, otherwise False is given for static|Objects. Please note that MOVON does not search for patterns generated by AMAL.|"},{"name":"Synchro On","descriptions":[{"lang":"en","text":"Turn ON the automatic execution of the animations and movements"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"All animation and movements programs can be run by a single call to the SYNCHRO command.||Prior to calling SYNCHRO, the automatic movement and animation system must be turned off with a SYNCHRO OFF instruction.|"},{"name":"Synchro Off","descriptions":[{"lang":"en","text":"Turn OFF the automatic execution of the AMAL programs"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"All animation and movements programs can be run by a single call to the SYNCHRO command.||Prior to calling SYNCHRO, the automatic movement and animation system must be turned off with a SYNCHRO OFF instruction.|"},{"name":"Synchro","descriptions":[{"lang":"en","text":"Executes on step of animation of all AMAL channels. \"Synchro Off\" must have been used before calling this instruction"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"All animation and movements programs can be run by a single call to the SYNCHRO command.||Prior to calling SYNCHRO, the automatic movement and animation system must be turned off with a SYNCHRO OFF instruction.|"}]},{"name":"HTML content manipulation with AOZ","id":1639692453901,"descriptions":[{"lang":"en","text":"AOZ Studio allows you to load and display web content in HTML format, for the creation of your websites."},{"lang":"en","text":"The HTML content is loaded with the Load Asset statement, and is stored in memory as a reusable template."},{"lang":"en","text":"It is possible to insert the value of one or more AOZ variables into the HTML content. Here is an example"}],"descriptions_file":[],"author":"","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Show HTML","descriptions":[{"lang":"en","text":"Displays the HTML content loaded with the Load Asset statement."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"Index","type":"index","text":"The number or name of the asset containing the loaded HTML code"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"|~~~|Load Asset \"resources/assets/home.html\", \"home\"|Show HTML \"home\"|~~~|"},{"name":"HTML Element","descriptions":[{"lang":"en","text":"Manipulation of a component of the HTML page"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the HTML component to manipulate. Must exist in the current page."},{"lang":"en","name":"*ClassName$","type":"string","text":"Names of CSS rules to use for this component"},{"lang":"en","name":"*Content$","type":"string","text":"Content of the component. If the component is a container, then Content$ will be the HTML code of its content."},{"lang":"en","name":"*Style$","type":"string","text":"Definition of the component styles."},{"lang":"en","name":"*Focus","type":"bool","text":"If True, the component takes over. The value is True by default."},{"lang":"en","name":"*Visible","type":"bool","text":"If False, the component will not be displayed on the screen. The default value is True."},{"lang":"en","name":"*Enable","type":"bool","text":"If False, the component is disabled. No event or action can be performed on this component. The default value is True."},{"lang":"en","name":"*Value$","type":"string","text":"Defines the value carried by the component, if the component is of type \"input\", \"select\" or \"textarea\"."},{"lang":"en","name":"*OnFocus$","type":"string","text":"Name of the AOZ procedure called when the component takes over ( focus )."},{"lang":"en","name":"*OnBlur$","type":"string","text":"Name of the AOZ procedure called when the component loses the hand( blur )."},{"lang":"en","name":"*OnClick$","type":"string","text":"Name of the AOZ procedure called when the component is clicked."},{"lang":"en","name":"*OnDoubleClick$","type":"string","text":"Name of the AOZ procedure called when the component is double-clicked."},{"lang":"en","name":"*OnMouseDown$","type":"string","text":"Name of the AOZ procedure called when the mouse pointer is on the component and one of the buttons is pressed."},{"lang":"en","name":"*OnMouseUp$","type":"string","text":"Name of the AOZ procedure called when the mouse pointer is on the component and one of the buttons is raised."},{"lang":"en","name":"*OnMouseMove$","type":"string","text":"Name of the AOZ procedure called when the mouse pointer moves over the component."},{"lang":"en","name":"*OnMouseOver$","type":"string","text":"Name of the AOZ procedure called when the mouse pointer is on the component."},{"lang":"en","name":"*OnMouseEnter$","type":"string","text":"Name of the AOZ procedure called when the mouse pointer contacts the component."},{"lang":"en","name":"*OnMouseOut$","type":"string","text":"Name of the AOZ procedure called when the mouse pointer leaves the component."},{"lang":"en","name":"*OnKeyPress$","type":"string","text":"Name of the AOZ procedure called when a key on the keyboard is pressed and raised."},{"lang":"en","name":"*OnKeyDown$","type":"string","text":"Name of the AOZ procedure called when a key on the keyboard is pressed."},{"lang":"en","name":"*OnKeyUp$","type":"string","text":"Name of the AOZ procedure called when a key is raised."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"A few examples:|~~~|~~~|"},{"name":"HTML Code$","descriptions":[{"lang":"en","text":" returns the HTML code of an element"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"Index","type":"index","text":"Id of the element"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The HTML code of the element"}],"content":"~~~|Load Asset \"resources/assets/home.html\", \"home\"|Show HTML \"home\"||Print HTML Code$( \"contact_list\" )|~~~|"},{"name":"Console Log","descriptions":[{"lang":"en","text":" Write a text in the JS Console"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"text$","type":"string","text":"Text to write"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Console Error","descriptions":[{"lang":"en","text":" Write an error text in the JS Console"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"text$","type":"string","text":"Text to write"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Console Warn","descriptions":[{"lang":"en","text":" Write a warn text in the JS Console"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"text$","type":"string","text":"Text to write"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]}]},{"name":"Asset","id":1639692453922,"descriptions":[{"lang":"en","text":"Some commands to simplify the loading of different file formats."}],"descriptions_file":[],"author":"Baptiste Bideaux","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Load Asset Listener","descriptions":[{"lang":"en","text":"D√©finit les proc√©dures AOZ a appeler lors du chargement des Assets"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"onLoad$","type":"string","text":"Nom de la proc√©dure AOZ qui sera appel√©e lorsqu'un Asset a √©t√© charg√© avec succ√®s."},{"lang":"en","name":"onLoad$","type":"string","text":"Nom de la proc√©dure AOZ qui sera appel√©e lorsqu'une erreur s'est produite lors du chargement d'un asset."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Load Asset","descriptions":[{"lang":"en","text":"Load an external file for Image, Audio, video or JSON. If the file is an image, it can be used with the \"Bob\" command."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Name of the file to load."},{"lang":"en","name":"index","type":"index","text":"Index associated at"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|Rem Load an image from the \"resources/assets/images\" folder, and store it in the image bank at 1|Load Asset \"resources/assets/images/hero.png\", 1||Rem Show the loaded image as Bob 1|Bob 1, 100,100, 1|~~~||"},{"name":"Load Asset","descriptions":[{"lang":"en","text":"Load an external file for Image, Audio, video or JSON. If the file is an image, it can be used with the \"Bob\" command."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Name of the file to load."},{"lang":"en","name":"index","type":"idnex","text":"Index associated at"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|Rem Load an image from the \"resources/assets/images\" folder, and store it in the image bank with the name \"hero\"|Load Asset \"resources/assets/images/hero.png\", \"hero\"||Rem Show the loaded image as Bob 1|Bob 1, 100,100, \"hero\"|~~~|"},{"name":"Del Asset","descriptions":[{"lang":"en","text":"Delete an asset from the memory."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"type$","type":"string","text":"Type of asset to delete. Must be \"image\", \"audio\", \"video\" or \"json\"."},{"lang":"en","name":"index","type":"index","text":"Index of asset to delete"}],"exceptions":[{"lang":"en","text":"Asset not exists."}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"|~~~||~~~||"},{"name":"JSON Asset Property","descriptions":[{"lang":"en","text":"Get a numeric value from the JSON file loaded with the \"Load Asset\" command"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the asset"},{"lang":"en","name":"path$","type":"string","text":"Formatted string indicating the path to the property"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"number","text":"The value from the property"}],"content":"|~~~||~~~||"},{"name":"JSON Asset Property$","descriptions":[{"lang":"en","text":"Get a string value from the JSON file loaded with the \"Load Asset\" command"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the asset"},{"lang":"en","name":"path$","type":"string","text":"Formatted string indicating the path to the property"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"number","text":"The string from the property"}],"content":"|~~~||~~~||"},{"name":"Asset Loaded","descriptions":[{"lang":"en","text":"Return True if an asset has been loaded with the \"Load Asset\" command, else False"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the asset"},{"lang":"en","name":"type$","type":"string","text":"Type of asset (may be \"image\", \"module\", \"audio\", \"video\", \"spritesheet\", \"3d\", \"map\")"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"number","text":"The string from the property"}],"content":"|~~~||~~~||"}]},{"name":"Bank Management","id":1639692453935,"descriptions":[{"lang":"en","text":"Functions and instruction to manage memory banks"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Bank Swap","descriptions":[{"lang":"en","text":"Swap two banks in the list of banks"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bank1","type":"index","text":"Index of the first bank to swap"},{"lang":"en","name":"bank2","type":"index","text":"Index of the second bank to swap"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The BANK SWAP command switches over the memory pointers assigned to a pair of selected banks, so that the first bank is assigned to the second bank's memory block and the second bank grabs the locations used by the first.||Note that the items held in these banks are completely unaffected by this operation, and the only thing that changes|is the number and type of the memory bank to which the items are assigned.||BANK SWAP is commonly used in conjunction with Objects, Icons and music banks. For example, it can be used|to instantly flick between the images in an Icon bank and an Object bank, like this:|~~~|Load \"Objects.Abk\"|Load \"Icons.Abk\"|Bank Swap 1,2 : Rem Banks 1 and 2 normally used for Sprites and Icons|~~~|Another possibility is to store several different music banks in memory, and swap them as required.||"},{"name":"Bank Shrink","descriptions":[{"lang":"en","text":"Change the size of a memory bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bannkIndex","type":"index","text":"Index of the bank to resize"},{"lang":"en","name":"length","type":"integer","text":"New size in bytes"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This instruction does not erase a bank at all, but shrinks it! BANK SHRINK will not work with Object or Icon banks, but it is used to reduce the length of a previously reserved memory bank to the specified smaller length. The excess memory will be returned for use by the main program without complications.||This feature is very useful if you create a bank by poking it into memory, and wish to save it with a more suitable|size. For example:|~~~|Reserve As Data 10,1000000: Rem Very large bank|Poke$ Start(10)-8,\"My Bank\" : Rem Rename bank 8 bytes|Poke$ Start(10),\"This is a small bank!\" : Rem Poke some data|Bank Shrink 10 To 100: Rem Shrink bank to 100 bytes|Save \"My_Bank.Abk\",10|~~~|"},{"name":"Start","descriptions":[{"lang":"en","text":"Return the address of the start of a memory bank (composite number, only useable with AOZ mmemory instruction)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bankIndex","type":"index","text":"Index of the bank to resize"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The start of the memory bank"}],"compatible":" aoz, stos, amos","content":"Use the START function to reveal the address of the memory area allocated to a bank, whose number is specified in brackets. The address will usually remain fixed for the duration of a program, but it can be changed by a BANK SWAP command.||If the specified bank number does not exist, AOZ Studio will give a \"Bank not reserved\" error report. This|can be avoided by checking the status of a bank with the LENGTH function, like this:|~~~|If Length( N )>0: Rem give N a suitable bank number|Print \"Address of the bank is \";Start(N)|Else|Print \"This bank does not exist!\"|End If|~~~|"},{"name":"Length","descriptions":[{"lang":"en","text":"Return the length of a memory bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bankIndex","type":"index","text":"Index of the bank to query"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The length of the memory bank"}],"compatible":" aoz, stos, amos","content":"The LENGTH function is used to find the size of the bank whose number is specified in brackets. Normally, this is measured in bytes, but if the bank contains Objects or Icon data, the number of images in that bank will be given.|A value of zero is returned for any bank that has not been defined. For example:|~~~|Load Fsel$(\"*.Abk\",\" \",\"Load an Object bank\") : Rem Bank 1|Print \"There are \";Length(1);\" images available.\"|~~~||"},{"name":"Erase","descriptions":[{"lang":"en","text":"Destroy the content of a memory bank and remove it from the list of banks"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bankIndex","type":"index","text":"Index of the bank to query"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The ERASE command clears the memory space used by the specified bank number, and returns this memory to the main program, for future use. For example:\"|~~~|Reserve as Work 5,1000: Rem Reserve temporary work bank 5|Wait Key|Erase 5|~~~|"},{"name":"Erase All","descriptions":[{"lang":"en","text":"Destroy all memory banks"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command is used to erase all memory banks that are assigned to the current program, quickly and completely!|"},{"name":"Erase Temp","descriptions":[{"lang":"en","text":"Destroy all temporary memory banks (bank marked as \"Work\")"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This instruction is used to erase all of the temporary work banks from the current program. Any permanent data banks used for holding Sprites, music or samples will be completely unaffected. For example:|~~~|Reserve As Data 5,1000: Rem Reserve 1000 bytes of permanent data|Reserve As Work 6,1000: Rem Reserve 1000 bytes of temporary workspace|Reserve As Chip Work 7,2000: Rem Reserve 2000 bytes of chip memory|Erase Temp|List Bank|~~~|"},{"name":"List Bank","descriptions":[{"lang":"en","text":"Displays the list of one or all the memory banks in the current screen, type and length"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*bankIndex","type":"string","text":"Index of the bank to list (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The LIST BANK instruction is used to provide a complete list of all the banks that are available from the current program. Information about the banks is listed in the following order:||- The bank number or index|- A single letter indicating the type of bank|- The name of the bank, held in a string of eight characters. Please note that Object banks are identified with the|letters \"Sprite\", even though the same images can be used equally well for Sprites or Bobs.|- The address of the start of the bank in memory, using hexadecimal notation.|- The length of the bank in normal decimal format. In the case of \"Sprite\" or \"Icon\" banks, the number of|images in the bank will be given instead.||LIST BANK will result in the following sort of report appearing on the screen:|~~~|1- Sprites S:C61298 \tL:0000005|3- Music   S:C60E80 \tL:0001000|6- Work    S:100000 \tL:0010000|~~~||"},{"name":"Reserve As Work","descriptions":[{"lang":"en","text":"Reserve and allocates memory for a new bank of \"Work\" type, and add it to the list of banks"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bankIndex","type":"index","text":"Index of the bank to create"},{"lang":"en","name":"length","type":"integer","text":"Length in byte of the new bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"aoz, stos, amos","content":"This allocates a temporary workspace of the requested length from fast memory, if it is available.||The work data will be erased every time the program is run from the Editor, and it will be discarded when the listing is saved onto disc. A quick check can be made to see if the data area has been successfully assigned to fast memory, using the FAST FREE function, like this:|~~~|Reserve As Work 10,1000|~~~||"},{"name":"Reserve As Data","descriptions":[{"lang":"en","text":"Reserve and allocates memory for a new bank of \"Data\" type, and add it to the list of banks"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bankIndex","type":"index","text":"Number of the bank to create"},{"lang":"en","name":"length","type":"integer","text":"Length in byte of the new bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"aoz, stos, amos","content":"This reserves the selected bank number with the number of bytes specified as its length. Data banks are permanent, and wherever possible, their memory will be allocated from fast memory, so this type of bank should not be used for information such as Objects and samples which need to be accessed directly by the Amiga's hardware chips.||"},{"name":"Image Width","descriptions":[{"lang":"en","text":"Return the width in pixels of an image in the Images bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image in the Images bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The width in pixels of the image"}],"compatible":"aoz"},{"name":"Image Height","descriptions":[{"lang":"en","text":"Return the height in pixels of an image in the Images bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image in the Images bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The height in pixels of the image"}],"compatible":"aoz"},{"name":"Image DataURL$","descriptions":[{"lang":"en","text":"Return a data URI containing a representation of an image in the Images bank. The returned image is in a resolution of 96 dpi."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image in the Images bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The data URI containing a representation of the image"}],"compatible":"aoz"},{"name":"HRev","descriptions":[{"lang":"en","text":"Return a flag of bits to be used in Bob and Sprite instructions that will mirror the image horizontally"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"integer","text":"Index of the image in the Images bank (this function does not work with string indexes)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The given index with the flag indicating to mirror the image horizontally ($8000)"}],"compatible":" aoz, stos, amos","content":"This function reverses an image from left to right, creating a mirror image. Use HREV by specifying the existing image number (in brackets) to be flipped horizontally, in order to create a new identification number for the reversed image. This new image number can be freely used with any of the standard Bob commands.||Here is an example:|~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\" : Rem Load Bob images from disc|Curs Off.: Cls 0 : Rem Set up screen|Flash Off : Get Bob Palette : Rem Grab Bob colours from image bank|For X=360 To -60 Step -4: Rem Move Bob across screen|Bob 1,X,100,2 : Rem Display Bob at a new position|Wait Vbl : Rem Wait for next vertical blank period|Next X|For X=-60 To 400 Step 4: Rem Flip image and move from left to right|Bob 1,X,100,Hrev(2) : Rem Display Bob at new position|Wait Vbl : Rem Wait 50th of second for Vbl|Next X|~~~|There is a hexadecimal version of this function, and the value returned by the HREV function is in the following format:|~~~|$800+n|~~~|Where $8000 is a \"flag\" telling AOZ Studio to reverse the Bob whenever it is displayed on screen, and|where n is the number of your image. This technique can be used to flip images directly from an AMAL animation|sequence.||Supposing your original sequence was created with this:|~~~|\"Anim 0,(1,2)(2,2)(3,2)(4,2)\"|~~~|To reverse these images, either of the following two lines could be used:|~~~|\"Anim 0,($8000+1,2)($8000+2,2)($8000+3,2)($8000+4,2)\"|\"Anim 0,($8001,2)($8002,2)($8003,2)($8004,2)\"|~~~|When an image is reversed like this, the location of the hot spot is reversed horizontally too. So if the hot spot was originally in the top left-hand corner, the hot spot of the HREV image will be in the top right-hand corner:|Depending on the image involved, this can have a great effect on the way your image is displayed on screen. Be|careful to position your hot spots sensibly, or avoid any risks by setting them centrally, using the appropriate HOT|SPOT command.||"},{"name":"VRev","descriptions":[{"lang":"en","text":"Return a flag of bits to be used in Bob and Sprite instructions that will mirror the image vertically"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"integer","text":"Index of the image in the Images bank, can only a number for this function,."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"the index with a flag indicating to mirror the image vertically ($4000)"}],"compatible":" aoz, stos, amos","content":"VREV is identical to HREV, except that it takes the specified image and turns it upside down before displaying it on the screen. This is best used for animated objects that move vertically, although comic effects can be achieved with cartoon characters.|As with HREV, there is an equivalent hexadecimal version of the VREV function, which can be used with AMAL|animation strings. The format is:|~~~|$4000+n|~~~|WWhere $4000 acts as the reversal flag, and n is the image number. Here are two typical AMAL string of reversed|animation:|~~~|\"Anim 0,($4000+1,2)($4000+2,2)($4000+3,2)($4000+4,2)\"|\"Anim 0,($4001,2)($4002,2)($4003,2)($4004,2)\"|~~~||"},{"name":"Rev","descriptions":[{"lang":"en","text":"Return a flag of bits to be used in Bob and Sprite instructions that will mirror the image horizontally and vertically"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"integer","text":"Index of the image in the Images bank, can only be a number for this function"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The given index with a flag indicating to mirror the image horizontally and vertically (C000)"}],"compatible":" aoz, stos, amos","content":"REV combines HREV and VREV into a single function. It takes the image whose number is held in brackets, reverses it from left to right and then performs another reversal from top to bottom. For example:|~~~|Load \"AMOSPro Tutorial:Objects/Bobs.abk\"|Curs Off : Cls 0|Flash Off : Get Bob Palette|For Y=200 To -40 Step -1|Bob 1,Y*2,Y,1|Wait Vbl|Next Y|For Y=-40 To 200|Bob 1,Y*2,Y,Rev(1)|Wait Vbl|Next Y|~~~|"},{"name":"Ins Image","descriptions":[{"lang":"en","text":"Inserts an empty image in the Images bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"position","type":"integer","text":"Position to insert at"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"INS IMAGE inserts a blank image at the numbered position in the current Image Bank.|All of the images after this numbered position will then be moved down one place in the numerical order. The second version of this command|allows you to create several spaces in a single operation, by giving the range of new gaps between the first and last|image numbers that you specify.||Any of these new image spaces are completely empty, and so cannot be allocated to a Bob or displayed directly on|screen while they are still blank. An actual image must first be grabbed into the Object Bank, using a GET IMAGE|command. If this is not done, the appropriate error message will be given as soon as you try to access|the empty image.|"},{"name":"Ins Image","descriptions":[{"lang":"en","text":"Inserts a number of empty images in the Images bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"start","type":"integer","text":"Position of insersion"},{"lang":"en","name":"end","type":"integer","text":"End position of insertion"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This version of the INS IMAGE instruction works like the version with only one parameter but inserts a series of blank image after the numbered position in the current image Bank and not only one.|All of the images after this numbered position will then be moved down one place in the numerical order.|"},{"name":"Del Image","descriptions":[{"lang":"en","text":"Delete an image in the Images bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image to delete"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"The DEL IMAGE command permanently deletes one or more images from the Images Bank. To erase a single image, simply give the image number to be deleted, like this:|~~~|Del Sprite 2|~~~|Whenever an image is deleted, all the subsequent images in the Bank are moved up one place in the numerical order IF and only if they have a numerical index.|Images with a string index are not affected.||For instance, if the Bank originally contained four images, the above example would remove image number 2 from memory, leaving a gap between images 1 and 3. This gap would be filled immediately, as the old image numbers 3 and 4 were shunted up one place, to become the new image numbers 2 and 3.||"},{"name":"Del Image","descriptions":[{"lang":"en","text":"Delete a range of images from the image bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"start","type":"integer","text":"Position of deletion"},{"lang":"en","name":"end","type":"integer","text":"End position of deletion"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"use this version of the DEL IMAGE instruction to delete more than one image from the Images Bank. The following example would delete Sprite images 4,5,6 and 7:|~~~|Del Image 4 To 7|~~~|After the last image has been deleted from the Image Bank, the entire Bank is erased automatically.|"},{"name":"Get Image","descriptions":[{"lang":"en","text":"Captures a portion of the current screen, create a transparency mask out of true black (RGB #000000) and add the image to the Images bank."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*screenIndex","type":"index","text":"Index of the screen to grab the image from"},{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image to insert in the Images bank"},{"lang":"en","name":"x1","type":"integer","text":"Horizontal coordinate of the top-left corner of the capture area"},{"lang":"en","name":"y1","type":"integer","text":"Vertical coordinate of the top-left corner of the capture area"},{"lang":"en","name":"x2","type":"integer","text":"Horizontal coordinate of the bottom-right corner of the capture area"},{"lang":"en","name":"y2","type":"integer","text":"Vertical coordinate of the bottom-right corner of the capture area"},{"lang":"en","name":"*tags$","type":"string","text":"Unused for the moment"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Make Mask","descriptions":[{"lang":"en","text":"Create a transparency mask out of the full black color of an image in the Images bank (RGB = $000000)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image work on"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command creates a mask around every one of the images in the Object Bank, and may take|a little time, depending on the number of objects involved. If an optional number is given, then a mask is created for that specified image only.||Please ntoe that there is no need to use this command with AOZ banks that contain PNG images. You may want to use it for JPG as they do not contain transparency information.|"},{"name":"No Mask","descriptions":[{"lang":"en","text":"Removes the transparency mask of an image in the Images bank, turning the image full opaque"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image work on"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"A \"mask\" means that the background colour (colour zero) around a Bob is made transparent, so t hat the screen graphics show through. The mask is also used by certain collision detection routines. A mask is automatically set up for every Bob, and the NO MASK command takes away this mask, so that the entire Bob image is drawn on the screen, including its original background colour and any other graphics in colour zero. To remove a mask, simply use this command followed by the number of the Bob image you are interested in.|"},{"name":"Hot Spot","descriptions":[{"lang":"en","text":"Set the hot-spot of an image in the Images bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image in the Images bank"},{"lang":"en","name":"x","type":"integer","text":"Horizontal coordinate of the hot-spot"},{"lang":"en","name":"y","type":"integer","text":"Vertical coordinate of the hot-spot"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The HOT SPOT command sets the hot spot of an image stored in the current Object Bank. The hot spot x,y-offset is measured from the top left-hand corner of the image, and is added to those coordinates before use, as illustrated in the following diagram:||![example1](help:img/bank_commands/bank_com_ex1.png)|It is perfectly legal to position the hot spot outside of the current screen display. This can be used for automatic conversion of all screen coordinates, as explained above, or to set up a games sequence with Sprites appearing from off-screen.||There is another version of this instruction, allowing automatic positioning of the hot spot to any one of nine pre-set positions. These positions are shown in the following diagram, with the central point of the image|represented by the value $11. The value for a pre-set hot spot at the top right-hand corner of the image is $20, for|the bottom left-hand corner $02, and so on.|![example2](help:img/bank_commands/bank_com_ex2.png)||"},{"name":"Hot Spot","descriptions":[{"lang":"en","text":"Calculates the hot-spot of an image in the Images bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image in the Images bank"},{"lang":"en","name":"flags","type":"integer","text":"Flag of bits indicating the horizontal and vertical position of the hot-spot, 0"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This version of the Hot Spot allows an automatic positioning of the hot spot to any one of nine pre-set positions. These positions are shown in the following diagram, with the central point of the Object image|represented by the value $11. The value for a pre-set hot spot at the top right-hand corner of the image is $20, for|the bottom left-hand corner $02, and so on.|![example2](help:img/bank_commands/bank_com_ex2.png)|"},{"name":"Hot Spot","descriptions":[{"lang":"en","text":"Returns the coordinate of the hot-spot of an image in the Images bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image in the Images bank"},{"lang":"en","name":"direction$","type":"string","text":"Use \"x\" to get the horizontal position or \"y\" to get the vertical position"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The horizontal or vertical position of the hot-spot"}],"compatible":" aoz, stos, amos","content":"~~~|Hot Spot 1, 16, 24|Print Hot Spot( 1, \"x\" )\t\t// Will print 16|Print Hot Spot( 1, \"y\" )\t\t// Will print 24|"},{"name":"BGrab","descriptions":[{"lang":"en","text":"Grab a memory bank used by the previous program"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the bank to grab"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"BSend","descriptions":[{"lang":"en","text":"Transfer a memory bank from the current program to the previous program"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the bank to grab"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"=BStart","descriptions":[{"lang":"en","text":"Return the address of a memory bank from a previous program"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the bank to grab"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]}]},{"name":"Animate Bob","id":1639692453947,"descriptions":[{"lang":"en","text":"Instructions and functions to display moveable objects inside AOZ screens (Bitmap Objects)"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Bob","descriptions":[{"lang":"en","text":"Changes the image of a bob"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob in the list of bobs"},{"lang":"en","name":"x","type":"integer","text":"Horizontal position of the bob in the screen"},{"lang":"en","name":"y","type":"integer","text":"Vertical position of the bob in the screen"},{"lang":"en","name":"image","type":"integer","text":"Index of the image in the \"Images\" bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Each Bob must be given an identification index. As all indexes in AOZ, it can either be a string or a number.|The is no limit to the number of Bobs that can be displayed at the same time in a screen, but the speed of the machine.||As Bobs are part of a screen, you can turn this screen into a transparent \"layer\" with the Set Transparent instruction...||If the coordinates lie outside of the existing screen area, the Bob will not be (or partly) displayed. So objects can be initialised|off screen, ready to be moved into place during the course of your program.||Once a Bob has been positioned on screen, the coordinate values become optional. The values of any coordinate|parameters that are omitted will be remembered from the last time they were set. This technique is valuable for animating Bobs, because it allows objects to be moved effortlessly,|without disturbing any existing animation sequences. It is vital to include all commas in their normal positions if|coordinate values are omitted, or a syntax error will be reported. For example:||~~~|Bob 1,160,100,1 : Rem Position Bob 1 at 160,100 using image1|Bob 1,,150,1 : Rem Move Bob 1 down 50 pixels|Bob 1,110,,1 : Rem Move Bob 1 50 pixels left|Bob 1,,,2 : Rem Display new image 2 at Bob 1 current position|~~~|"},{"name":"Bob Camera","descriptions":[{"lang":"en","text":"Creates or sets the point of view on a bob"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the create or modify"},{"lang":"en","name":"x","type":"integer","text":"Horizontal position of the camera in the screen"},{"lang":"en","name":"y","type":"integer","text":"Vertical position of the camera in the screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction simulates a \"camera\" that offsets the position of the bob in the screen.||Before it is used, the Bob will be displayed at it's exact position. Using it adds an offset to both horizontal and vertical coordinates of the bob on screen.|~~~|Bob \"mybob\", 200, 200, 1|Print \"Please press a key\"|Print \"and watch the bob move 20 pixels to the right and 20 pixels to the top\"|Wait Key|Bob Camera \"mybob\", 180, 220|"},{"name":"Bob Off","descriptions":[{"lang":"en","text":"Destroys all or one bob"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob to destroy. If absent, will destroy all the bobs in the current screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Use this command to remove all Bobs from the screen simultaneously. If the index of a Bob is specified, only that Bob will be extinguished. For example:|~~~|Bob Off 1: \t\t\t// Remove Bob 1 only|Bob Off \"mybob\" \t// remove Bob \"mybob\" only|Bob Off \t\t\t// Remove all Bobs from screen|~~~|The BOB OFF instruction also turns off any animation or collision routines associated with these Bobs.||"},{"name":"Bob Update Off","descriptions":[{"lang":"en","text":"Turns off the automatic bob coordinate update system. After it, all \"Bob\" instruction will no longer have a visible effect until an \"Bob Update\" instruction is useD"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The BOB UPDATE family of commands provide total control of Sprite movements. Normally, when a Sprite is|moved its position is updated automatically during the next vertical blank period. Please see WAIT VBL if this|needs explaining. However, when many bobs are moved with the BOB command, updates will happen before|all of the Sprites have been successfully repositioned, which can result in jerky patterns of movement. In these|circumstances, the automatic updating system can be turned off with a BOB UPDATE OFF command.||When the Sprites have been moved successfully, a call to BOB UPDATE will reposition any Sprites that have|been moved since the last update. Alternatively, BOB UPDATE ON returns to the default status of automatic|updating.|"},{"name":"Bob Update On","descriptions":[{"lang":"en","text":"Turns on the automatic bob coordinate update system. After it, the effect of all \"Bob\" instructions will be visible on display without intervention on yoru part."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The BOB UPDATE family of commands provide total control of Sprite movements. Normally, when a Sprite is|moved its position is updated automatically during the next vertical blank period. Please see WAIT VBL if this|needs explaining. However, when many bobs are moved with the BOB command, updates will happen before|all of the Sprites have been successfully repositioned, which can result in jerky patterns of movement. In these|circumstances, the automatic updating system can be turned off with a BOB UPDATE OFF command.||When the Sprites have been moved successfully, a call to BOB UPDATE will reposition any Sprites that have|been moved since the last update. Alternatively, BOB UPDATE ON returns to the default status of automatic|updating.||"},{"name":"Bob Update","descriptions":[{"lang":"en","text":"Performs one step of animation of all the bobs in all the screen and displays the result"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"BOB UPDATE performs all Bob movements in a single, mighty burst, so all objects are moved at the same instant in your program.|The resulting movement effects are now incredibly smooth, even with dozens of objects on screen at once. BOB UPDATE is extremely easy to use, as the following technique explains.|- First, turn off the automatic system with BOB UPDATE OFF|- Execute your main loop as normal.|- Now call a BOB UPDATE command at the point when objects are to be moved and drawn on screen.|- Finally, wait for the updates to be completed, by using WAIT VBL.||BOB UPDATE is now used as the standard technique in the vast majority of AOZ arcade games.||If you need to restore the re-drawing system to its default status, BOB UPDATE ON sets the situation back to|normal.|"},{"name":"Limit Bob","descriptions":[{"lang":"en","text":"Clip the position (but not the display) of all bobs to a limited area in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"X1","type":"integer","text":"Horizontal coordinate of the top-left corner of the bounding box"},{"lang":"en","name":"Y1","type":"integer","text":"Vertical coordinate of the top-left corner of the bounding box"},{"lang":"en","name":"X2","type":"integer","text":"Horizontal coordinate of the bottom-right corner of the bounding box"},{"lang":"en","name":"Y2","type":"integer","text":"Vertical coordinate of the bottom-right corner of the bounding box"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This command keeps all Bobs restricted to moving inside an invisible rectangular area of the screen, whose coordinates are set by the usual top left to bottom right-hand corner coordinates.|If LIMIT BOB is followed with a Bob number, then only that Bob becomes restricted by the boundaries of the rectangle.||To keep Bob number 1 trapped inside an area, you would use|something like this:|~~~|Limit Bob 1,10,0 To 320,100|~~~|Remember that a Bob must be called up with the BOB command before LIMIT BOB is used, otherwise the|limitation will have no effect. To restore a Bob's freedom to move around the whole screen, use the command|without any coordinates, like this:|~~~|Limit Bob|~~~||"},{"name":"Paste Bob","descriptions":[{"lang":"en","text":"Draws an image from the image bank in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"Horizontal coordinate of the paste"},{"lang":"en","name":"y","type":"integer","text":"vertical coordinate of the paste"},{"lang":"en","name":"image","type":"integer","text":"Index of the image in the \"Images\" bank"},{"lang":"en","name":"*scaleX#","type":"float","text":"Horizontal scaling, identical to the bob Scale parameter"},{"lang":"en","name":"*scaleY#","type":"float","text":"Angle of rotation of the image around it's hot-spot"},{"lang":"en","name":"width","type":"integer","text":"Width of the pasted image (if scale is not specified)"},{"lang":"en","name":"height","type":"integer","text":"Height of the pasted image (if scale is not specified)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"PASTE BOB takes an image held in the Image Bank, and draws it straight onto the current screen. Unlike the PUT BOB command, the image is drawn immediately, so there is no need to add the WAIT VBL commands before|proceeding.||It is important to note that the coordinates for the given image number are measured from the top left-hand corner of the image, and take no account of the current hot spot setting!\"||PASTE BOB can be used to generate a range of extremely fast graphical operations, and it is also useful for mapping complex displays in|scrolling arcade games. Here is an example:|~~~|Cls 0|Rem The following Palette values go on one line|For C=1 To 15|Ink C : Circle 16,16,15 : Paint 16,16|Image C,0,0 To 32,32|Next C|Do|Rem Choose a random circle and choose its position|N=Rnd(14)+1 : X=Rnd(320) : Y=Rnd(200)|Rem Paste image on screen at new coordinates|Paste Bob X,Y,N|Loop|~~~||"},{"name":"Bob Alpha","descriptions":[{"lang":"en","text":"Set the global transparency of a bob, also called \"Alpha\""}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob in the list of active bobs"},{"lang":"en","name":"alpha#","type":"float","text":"Value of Alpha, from 1 (fully opaque) to 0 (fully transparent)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction allows you to turn any opaque bob into a semi-transparent image. The bob will completely disappear from display with an Alpha value of 0, but will remain active (like a ghost object which can be useful for collision detection)...||The next example displays a bob on the screen and slowly fades it away...|~~~|Curs Off : Cls 0 \t\t\t\t\t// Set up screen|Bob 1, 670,450, \"gameover.png\" \t\t// Display Bob at coordinates on screen.|do|For A# = 1 To 0 Step -0.01 \t\t// Define alpha fade from 1 to 0 in 100 steps|Bob Alpha 1, A#\t\t\t\t// Set new alpha level|Wait Vbl\t\t\t\t\t// Wait, and re-draw Bob with new alpha level.|Next A#|loop|~~~|"},{"name":"Bob Show","descriptions":[{"lang":"en","text":"Make a bob visible on screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob in the list of active bobs"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Bob Hide","descriptions":[{"lang":"en","text":"Make a bob invisible"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob in the list of active bobs"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Please note that even if it is hidden, a Bob remains active in the collision detection process...|"},{"name":"Bob Scale","descriptions":[{"lang":"en","text":"Changes the scale (zoom) of a bob"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"idnex","type":"integer","text":"Index of the bob in the list of active bobs"},{"lang":"en","name":"scaleX#","type":"float","text":"Horizontal scale, 1 displays the bob at original size, 0.5 reduces it by half, 2 multiplies by two etc. Negative values will mirror the bob horizontally"},{"lang":"en","name":"scaleY#","type":"float","text":"Vertical scale, 1 displays the bob at original size, 0.5 reduces it by half, 2 multiplies by two etc. Negative values will mirror the bob vertically"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction allows you to zoom any bob instantly and adapt the size of it's image to your game.|the scale also affects collision detect6ion, and the collisions will only be generated on the new surface.||Bob Scale also worjks with negative value... in case of a negative scale value, the bob will be mirrored in this direction. Hot Spot are also affected by this instruction.||The next example displays a bob on the screen and zooms it until it is bigger than the screen...|~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\" \t// Load Bob images from disc|Cls 0 \t\t\t\t\t\t\t\t\t\t// Set up screen|Bob 1, 100, 100, 2 \t\t// Display Bob at position||For S# = 1 To 100|Bob Scale 1, S#, S#|Wait Vbl|Next|~~~|"},{"name":"Bob Rotate","descriptions":[{"lang":"en","text":"Rotates a bob around it's hot-spot"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob in the list of active bobs"},{"lang":"en","name":"angle#","type":"float","text":"Angle to rotate with, either in degrees or radian depending on the use of the \"Degree\" or \"Radian\" instruction. AOZ use radians by default"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction allows you to rotate any bob instantly...||A positive angle rotates the bob clockwise and a negative angle will rotate it counter-clockwise.|The rotation also affects collision detection, and the collisions will only be generated on the rotated object.||The next example displays a bob on the screen and rotates it slowly..|~~~|Degree\t\t\t\t\t\t\t// Switch to degrees|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\" \t// Load Bob images from disc|Cls 0 \t\t\t\t\t\t\t\t\t\t// Set up screen|Bob 1, 100, 100, 2 \t\t// Display Bob at position||For A = 0 To 360|Bob Rotate 1, A|Wait Vbl|Next|~~~|"},{"name":"Bob Skew","descriptions":[{"lang":"en","text":"Distorts a bob horizontally or vertically"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob in the list of active bobs"},{"lang":"en","name":"skewX#","type":"float","text":"Horizontal skew, values should be experimented. 0 displays the bob in original proportions"},{"lang":"en","name":"skewY#","type":"float","text":"Vertical skew, values should be experimented. 0 displays the bob in original proportions"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction allows you to generate interesting distortion effects.||The next example displays a bob on the screen and demonstrates the effect with random values...|~~~|Degree\t\t\t\t\t\t\t// Switch to degrees|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\" \t// Load Bob images from disc|Cls 0 \t\t\t\t\t\t\t\t\t\t// Set up screen|Bob 1, 100, 100, 2 \t\t// Display Bob at position||Do|Bob Skew 1, Rnd() * 2, Rnd() * 2|Wait Vbl|Next|~~~|"},{"name":"Put Bob","descriptions":[{"lang":"en","text":"Draws the bob in in the current screen as a stamp, at its current position with it's current scale, rotation and skew"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob in the list of active bobs"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The PUT BOB command takes the Bob whose number is given and fixes a permanent copy of its image on the screen, at the current position.|Note that after the image has been copied, the original Bob can be animated and moved with no ill effects.|"},{"name":"Bob Shadow","descriptions":[{"lang":"en","text":"Display a shadow beneath the bob."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob in the list of active bobs."},{"lang":"en","name":"offsetX","type":"float","text":"A float specifying the distance that shadows will be offset horizontally. Positive values are to the right, and negative to the left."},{"lang":"en","name":"offsetY","type":"float","text":"A float specifying the distance that shadows will be offset vertically. Positive values are down, and negative up from the image."},{"lang":"en","name":"blur","type":"float","text":"A non-negative float specifying the level of shadow blur, where 0 represents no blur and larger numbers represent increasingly more blur. This value doesn't correspond to a number of pixels,"},{"lang":"en","name":"rgba","type":"The RGBA colour value for the shadow. eg","text":" $FF000077 would be Red with 50% opacity."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction allows you to add a shadow to any bob image. With a bit of imagination, shadow can be used to create other effects, such as add a glow to an image. See second example below.|Note, if the offsetX and offsetY are both zero, no shadow will be displayed.||The next example displays a series of images on the screen and applies a semi transparent shadow to them...|~~~|Curs Off : Cls 6 \t\t\t\t\t\t\t\t\t// Set up screen, blue background|For f=1 to 10|Bob f,f*170,450-f*5, \"ship.png\" \t\t\t\t// Display bob at a new position|Bob Shadow f,10+f*2,40+f*5,10+f*2,$000000aa\t\t// Define shadow with increasing offset and shadow blur.|Wait 0.3|Next f|End|~~~|This example show how Bob Shadow can be used to add a 'Glow' to a bob, and also how to turn off shadows.|~~~|Curs Off : Cls 0\t\t\t\t\t\t\t// Set up screen, black background|For f=1 to 10|Bob f,f*170,450, \"ship.png\" \t\t\t// Display bob at a new position|Bob Shadow f,0,0.01,f*4,$00ffffff\t\t// Define shadow 'glow' with increasing shadow blur, which increases the 'glow'.|Wait 0.2|Next f|Print \"Press Any Key to Turn Off Shadows\"\t// Display a message|Wait Key\t\t\t\t\t\t\t\t\t// Wait for key press|For f=1 to 10|Bob Shadow f,0,0\t\t\t\t\t\t// Set shadow offsets to zero|Wait 0.5|Next f|End|~~~|"},{"name":"Bob Shadow Off","descriptions":[{"lang":"en","text":"Turns off one or all bob shadows by setting the offsets to zero."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob in the list of active bobs (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction removes the shadow from one (specified by index) or all of the bobs (if index in omitted).|The blur and colour of each indivual shadow is remembered, so the shadow can be switched back on by just changing one or both of the offset values.||This example show how Bob Shadow Off can be used to turn off individual bob shadows or all bob shadows at once.|~~~|Curs Off : Cls 1\t\t\t\t\t\t\t\t// Set up screen, black background|For f=1 to 10|Bob f,f*170,450, \"ship.png\" \t\t\t\t// Display bob at a new position|Bob Shadow f,0,f*3,f*4,$000000ff\t\t// Define shadow with increasing shadow blur'.|Wait 0.2|Next f|Print \"Press Any Key to Turn Off FIRST 5 Shadows individually\"\t// Display a message|Wait Key\t\t\t\t\t\t\t\t\t\t// Wait for key press|For f=1 to 5|Bob Shadow Off f\t\t\t\t\t\t\t// Turn off shadow of bob number f|Wait 0.5|Next f|Cls 1|Print \"Press Any Key to Turn Off ALL REMAINING Shadows\"\t// Display a message|Wait Key\t\t\t\t\t\t\t\t\t\t// Wait for key press|Bob Shadow Off\t\t\t\t\t\t\t\t// Turn off shadow of all bobs|End|~~~|"},{"name":"Priority On","descriptions":[{"lang":"en","text":"Turns on automatic sorting of the Z-order of the bobs in the current screen"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"When PRIORITY ON is used, Bobs with the highest y-coordinates take priority on the screen.|It is usually best to set hot spots at the bottom of Bobs to exploit this priority, and some superb perspective effects can be created.||All that is needed to re-set the original Bob number priorities is to use the PRIORITY OFF command.|"},{"name":"Priority Off","descriptions":[{"lang":"en","text":"Turns off automatic sorting of the Z-order of the bobs in the current screen"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"When PRIORITY ON is used, Bobs with the highest y-coordinates take priority on the screen.|It is usually best to set hot spots at the bottom of Bobs to exploit this priority, and some superb perspective effects can be created.||All that is needed to re-set the original Bob number priorities is to use the PRIORITY OFF command.||"},{"name":"Priority Reverse On","descriptions":[{"lang":"en","text":"Inverts the Z-Order of the bobs in the current screen if Priority is activated. After this instruction, bobs with the highest Y coordinate will be displayed in the back of others"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The PRIORITY REVERSE ON command changes around the entire priority table based on Bob numbers. Not only does it give a lower Bob number priority over a higher Bob number, when used with PRIORITY ON it also gives|priority to a Bob with the lowest y-coordinate. As you would expect, PRIORITY REVERSE OFF sets the priority|system back to normal.||"},{"name":"Priority Reverse Off","descriptions":[{"lang":"en","text":"Stops the inversion of the Z-Order of the bobs in the current screen if Priority is activated. After this instruction, bobs with the lowest Y coordinate will be displayed in the back of others"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The PRIORITY REVERSE ON command changes around the entire priority table based on Bob numbers. Not only does it give a lower Bob number priority over a higher Bob number, when used with PRIORITY ON it also gives|priority to a Bob with the lowest y-coordinate. As you would expect, PRIORITY REVERSE OFF sets the priority|system back to normal.||"},{"name":"BobPriority","descriptions":[{"lang":"en","text":"Turns on or off automatic sorting of the Z-order of the bobs"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"onOff","type":"boolean","text":"True to turn priority sorting on, False to stop it"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"When SPRITE PRIORITY ON is used, Bobs with the highest y-coordinates take priority on the screen.|It is usually best to set hot spots at the bottom of the Sprite to exploit this priority, and some superb perspective effects can be created.||All that is needed to re-set the original sprite number priorities is to use the SPRITE PRIORITY OFF command.|"},{"name":"X Bob","descriptions":[{"lang":"en","text":"Returns the horizontal coordinate of the bob"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Horizontal coordinate"}],"content":"It is not difficult to keep track of Bobs under normal circumstances, but if Bobs are moved with movements objects or even AMAL, their coordinates can vary unpredictably.|In which case, the X BOB and Y BOB functions may be used to get a snapshot of their current position, by returning the screen coordinates of your selected Bob.|Specify the index of the chosen Bob on screen, and the appropriate coordinate will be returned, as measured from the top left-hand corner of the screen to the hot spot of the current image. For example:|~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\"|Cls 0\t\t// Set up screen|Do|// Move Bob1 with mouse|Bob 1, X Screen( X Mouse ), Y Screen( Y Mouse ),1||// Print new location on screen|Locate 0,0 : Print X Bob(1);\" \";Y Bob(1);\" \";|Loop|~~~|"},{"name":"Y Bob","descriptions":[{"lang":"en","text":"Returns vertical coordinate of the bob"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Vertical coordinate"}],"content":"It is not difficult to keep track of Bobs under normal circumstances, but if Bobs are moved with movements objects or even AMAL, their coordinates can vary unpredictably.|In which case, the X BOB and Y BOB functions may be used to get a snapshot of their current position, by returning the screen coordinates of your selected Bob.|Specify the index of the chosen Bob on screen, and the appropriate coordinate will be returned, as measured from the top left-hand corner of the screen to the hot spot of the current image. For example:|~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\"|Cls 0\t\t// Set up screen|Do|// Move Bob1 with mouse|Bob 1, X Screen( X Mouse ), Y Screen( Y Mouse ),1||// Print new location on screen|Locate 0,0 : Print X Bob(1);\" \";Y Bob(1);\" \";|Loop|~~~|"},{"name":"I Bob","descriptions":[{"lang":"en","text":"Returns the index of the current image displayed by the bob"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Index of the image in the \"image\" bank"}],"content":"I BOB returns the number of the image currently assigned to the specified Bob number.|If the Bob number you want to examine does not exist, an illegal function error will be given, so it is vital to define the Bob correctly before calling I BOB.|Here is an example:|~~~|Load \"AMOSPro Tutorial:Objects/Bobs.abk\"|Bob 1,160,100,1 \t\t// Display Bob 1 at centre of screen|Do|For IMAGE=1 To Length(1)|// Move Bob 1 with the mouse|Bob 1,X Screen(X Mouse),Y Screen(Y Mouse),IMAGE|For W=0 To 3 : Wait Vbl : Next W|// Display image number on screen|Locate 0,0 : Print \"Image \";I Bob(1);\" \";|Next IMAGE|Loop|~~~|"},{"name":"I Bob$","descriptions":[{"lang":"en","text":" Returns the name of the current image displayed by the bob as a string"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Index of the image in the \"image\" bank"}],"content":"~~~|As image indexes can either be numbers or strings, I BOB$ returns the index of the image currently displayed in the form of a string so that you can name your images.|If the index is a number, then the returned value will be the string version of the number.|~~~|"},{"name":"IsBob","descriptions":[{"lang":"en","text":"Checks if a bob is defined without generating an error"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"true if the bob exists, false if not."}],"content":"Use this function if you are not sure a bob exists and want to avoid \"Bob not defined\" errors...|~~~|Bob 1, 100, 100, 1|If IsBob( 1 )|Print \"Bob 1 exists!\"|End If|If IsBob( 2 )|Print \"Bob 2 does not exist, this will will never be printed!\"|End If|~~~||"},{"name":"Get Bob","descriptions":[{"lang":"en","text":"Captures a portion of the current screen, create a transparency mask out of true black (RGB #000000) and add the image to the Images bank. (Deprecated, use \"Get Image\")"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*screenIndex","type":"index","text":"Index of the screen to grab the image from"},{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image to insert in the Images bank"},{"lang":"en","name":"x1","type":"integer","text":"Horizontal coordinate of the top-left corner of the capture area"},{"lang":"en","name":"y1","type":"integer","text":"Vertical coordinate of the top-left corner of the capture area"},{"lang":"en","name":"x2","type":"integer","text":"Horizontal coordinate of the bottom-right corner of the capture area"},{"lang":"en","name":"y2","type":"integer","text":"Vertical coordinate of the bottom-right corner of the capture area"},{"lang":"en","name":"*tags$","type":"string","text":"Unused for the moment"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Ins Bob","descriptions":[{"lang":"en","text":"Inserts an empty image in the Images bank (deprecated, use \"Ins Image\")"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"position","type":"integer","text":"Position to insert at"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"INS BOB inserts a blank image at the numbered position in the current Object Bank. All of the images after this|numbered position will then be moved down one place in the numerical order. The second version of this command|allows you to create several spaces in a single operation, by giving the range of new gaps between the first and last|image numbers that you specify.||Any of these new image spaces are completely empty, and so cannot be allocated to a Bob or displayed directly on|screen while they are still blank. An actual image must first be grabbed into the Object Bank, using a GET SPRITE|or GET BOB command. If this is not done, the appropriate error message will be given as soon as you try to access|the empty image.||Both DEL BOB and INS BOB are provided to be used with the GET BOB and GET SPRITE commands. They|allow you to modify and adjust your Bob images from inside AOZ Studio programs, with complete|freedom. They may be used to create numerous special effects such as interactive screen animations and animated|brushes.||"},{"name":"Ins Bob","descriptions":[{"lang":"en","text":"Inserts a number of empty images in the Images bank (deprecated, use \"Ins Image\")"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"start","type":"integer","text":"Position of insersion"},{"lang":"en","name":"end","type":"integer","text":"End position of insertion"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This version of the INS BOB instruction works like the version with only one parameter but inserts a series of blank image after the numbered position in the current Object Bank and not only one.|All of the images after this numbered position will then be moved down one place in the numerical order.|"},{"name":"Del Bob","descriptions":[{"lang":"en","text":"Delete an image in the Images bank (deprecated, use \"Del Image\")"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image to delete"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The DEL BOB command permanently deletes one or more Bob images from the Object Bank. To erase a single image, simply give the image number to be deleted, like this:|~~~|Del Bob 2|~~~|Whenever an image is deleted, all the subsequent images in the Bank with a numerical index are moved up one place in the numerical order.|For instance, if the Bank originally contained four images, the above example would remove image number 2 from|memory, leaving a gap between images 1 and 3. This gap would be filled immediately, as the old image numbers 3|and 4 were shunted up one place, to become the new image numbers 2 and 3.||"},{"name":"Bob Move","descriptions":[{"lang":"en","text":"Defines the movement of a bob horizontally and vertically."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob"},{"lang":"en","name":"movementX$","type":"string","text":"Horizontal movement definition string"},{"lang":"en","name":"movementY$","type":"string","text":"Vertical movement definition string"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"The instruction has been added to AOZ to allow you to declare movement in just one instruction instead of two, namely \"Move X\" and \"Move Y\".||Each string contains the definition of the movement for it's axe. The syntax of the string is identical to the one used in \"Move X\" and \"Move Y\".|"},{"name":"Bob Move X","descriptions":[{"lang":"en","text":"Defines the horizontal movement of a bob. The bob starts to move immediately. For finer control please use the \"Channel\" and \"MoveX\" instructions."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob"},{"lang":"en","name":"movement$","type":"string","text":"Movement definition string"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"The BOB MOVE X command defines a list of horizontal movements to be performed on the bob specified by the given index.||The number is followed by a \"movement string\" containing a series of|instructions which control the speed and direction of the Object. These movement commands are enclosed by|brackets, and are entered as the following three parameters, separated by commas.||The speed parameter sets a delay between each step of the movement, given in 50ths of a second. Speed can vary|from a value of 1 for very fast, all the way to 32767 for incredibly slow. This is followed by a step value, setting the|number of pixels the Object is to be moved during each operation. A positive value moves the Object to the right,|and a negative number to the left. The apparent speed of the Object will depend on the relationship between the|speed and the step values, varying from slow and smooth, to rapid but jerky movements.||A speed value of about 10 (or -10) is recommended. The last parameter is a count value, which determines the number of times the movement|is to be repeated. Values range between 1 and 32767, with the additional value of zero causing an indefinite|repetition.||It is vital to add an L (loop) instruction to the movement string after these parameters, if you want to force a jump to|the start of the string, forcing the entire sequence to be run again.||Here is an example:|~~~|Load \"AMOSPro_Tutorial:Objects/Sprites.Abk\" :Get Sprite Palette|Bob 1,360,100,1|Bob Move X 1,\"(1,1,60)(1,-5,60)L\"|Bob Move On|Wait Key|~~~|An alternative ending to the movement string is to use the E option, followed by the value of an x-coordinate.||This stops the Object when it reaches the specified coordinate value, which must be less than (or equal to) the|original horizontal target destination. Try changing the third line of the last example to this:|~~~|Bob Move X 1,\"(1,-5,30)E100\"|~~~|"},{"name":"Bob Move Y","descriptions":[{"lang":"en","text":"Defines the horizontal movement of a bob. The bob starts to move immediately. For finer control please use the \"Channel\" and \"Move Y\" instructions."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob"},{"lang":"en","name":"movement$","type":"string","text":"Vertical movement definition string"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This command operates in the same way as \"BOB MOVE X\", and controls vertical movement.|Positive values for the step parameter control downward movements, and a negative value will result in an upward movement.||Here is an example:|~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\"|Bob 1,228,50,1|Bob Move Y 1,\"(1,1,180)(1,-1,180)L\" : Rem Loop Sprite|Bob Move On : Wait Key|~~~|"},{"name":"Bob Move Off","descriptions":[{"lang":"en","text":"Stops the movement of one or all the bobs."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This command suspends the movement of all or the specified Bobs on screen. Frozen Objects may be re- animated using the|\"BOB MOVE ON\" command.|"},{"name":"Bob Move On","descriptions":[{"lang":"en","text":"Start the movement of one or all the bobs."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"Before any movement patterns can be executed, they must be activated by a BOB MOVE ON command. All movements|will begin at once unless an optional number is given, in which case only that particular animation sequence will be|activated. BOB MOVE OFF has the opposite effect, halting all animations, or a single sequence specified by its number.|"},{"name":"Bob Move Freeze","descriptions":[{"lang":"en","text":"Pause the movement of one or all the bobs."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This command suspends the movement of all Objects on screen. Frozen Objects may be re- animated using the|\"BOB MOVE ON\" command. If an optional Object number is given after \"BOB MOVE FREEZE\", then only that bob will be frozen.|"},{"name":"Bob Moveon","descriptions":[{"lang":"en","text":"Indicates if the movement of one bob is completed or not."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"string"}],"compatible":" aoz","content":"Use the BOB MOVON function to check whether a particular Object is being moved by a \"BOB MOVE X\" or \"BOB MOVE Y\"|command. A value of True is returned while the bob is in motion, otherwise False is given for static|bobs. Please note that BOB MOVON does not search for patterns generated by AMAL.|"}]},{"name":"Collisions","id":1639692453965,"descriptions":[{"lang":"en","text":"Functions to test collisions between graphical moveable objects, bobs and sprites"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Bob Col","descriptions":[{"lang":"en","text":"Test if two bobs are in collision"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob to test"},{"lang":"en","name":"index","type":"index","text":"Index of the bob to test the collision with"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the two bobs are colliding, False if not"}],"content":"The BOB COL function checks the screen for collisions between Blitter Objects. It is invaluable in the type of arcade games that rely on hitting or avoiding moving objects.|To test for a collision with BOB COL, simply specify the number of the Bob you are interested in (in brackets) and a value of -1 (true) will be returned if a collision occurs. Otherwise zero (false) is generated||Note that the AOZ collision system uses \"masks\", and so it is sensitive to the physical shape of your|objects. This means that when different objects have extremely varied appearances, the collision will only be|detected when the objects happen to overlap on screen.||Normally, BOB COL will check for collisions between the specified Bob and any other Bitmap Object, but you can|also monitor the movements of a particular range of Bobs using this As optional parameters, after the specified Bob|number, you may set the range of Bobs to be checked for collision from the first to the last in your Bob list||"},{"name":"Bob Col","descriptions":[{"lang":"en","text":"Test if one bob is colliding with a set of bobs"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob to test"},{"lang":"en","name":"start","type":"integer","text":"Index of the first bob to test with"},{"lang":"en","name":"end","type":"integer","text":"Index of the last bob to test with"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the first bob is colliding with one of the other bobs, False if not"}],"content":"The BOB COL function checks the screen for collisions between Blitter Objects. It is invaluable in the type of arcade games that rely on hitting or avoiding moving objects. To test for a collision with BOB COL, simply specify the number of the Bob you are interested in (in brackets) and a value of -1 (true) will be returned if a collision occurs. Otherwise zero (false) is generated||Note that the AOZ collision system uses \"masks\", and so it is sensitive to the physical shape of your|objects. This means that when different objects have extremely varied appearances, the collision will only be|detected when the objects happen to overlap on screen.'||Normally, BOB COL will check for collisions between the specified Bob and any other Bitmap Object, but you can|also monitor the movements of a particular range of Bobs using this As optional parameters, after the specified Bob|number, you may set the range of Bobs to be checked for collision from the first to the last in your Bob list||"},{"name":"BobSprite Col","descriptions":[{"lang":"en","text":"Test if a bob is colliding with a sprite"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob to test"},{"lang":"en","name":"index","type":"index","text":"Index of the sprite to test the collision with"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the bob and sprite are colliding, False if not"}],"content":"This function checks for a collision between the single Bob whose number you specify, and all active Sprites on screen.|The result will be True is a collision is detected, or False if the object remains untouched.|To narrow the range of Sprites to be monitored, simply include the first to the last number in that range. As with SPRITEBOB COL, this function should only be used in low resolution||"},{"name":"BobSprite Col","descriptions":[{"lang":"en","text":"Test if one bob is colliding with a set of sprites"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob to test"},{"lang":"en","name":"start","type":"integer","text":"Index of the first sprite to test with"},{"lang":"en","name":"end","type":"integer","text":"Index of the last sprite to test with"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if bob is colliding with one of the sprites, False if not"}],"content":"This function checks for a collision between the single Bob whose number you specify, and all active Sprites on screen.|The result will be True if a collision is detected, or False if the object remains untouched.|To narrow the range of Sprites to be monitored, simply include the first to the last number in that range. As with SPRITEBOB COL, this function should only be used in low resolution||"},{"name":"Sprite Col","descriptions":[{"lang":"en","text":"Test if two sprites are in collision"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite to test"},{"lang":"en","name":"start","type":"integer","text":"Index of the first sprite to test with"},{"lang":"en","name":"end","type":"integer","text":"Index of the last sprite to test with"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the two sprites are colliding, False if not"}],"content":"SPRITE COL provides an easy method of checking to see if two or more Sprites have collided on display.|If the test is successful, SPRITE COL returns a value of True, and if not False is returned instead.|As you would expect, the brackets contain the number of any active Sprite on display.||If you want to check for a selected group of Sprites, include the optional first to last parameters to set the range of the Sprite numbers you are interested in..||"},{"name":"SpriteBob Col","descriptions":[{"lang":"en","text":"Test if a bob is colliding with a sprite"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob to test"},{"lang":"en","name":"start","type":"integer","text":"Index of the first bob to test with"},{"lang":"en","name":"end","type":"integer","text":"Index of the last bob to test with"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the sprite and bob are colliding, False if not"}],"content":"As its name suggests, this function checks for a collision between the Sprite whose number you specify, and one or more Bitmap Objects.|If the Sprite collides with a Bob, a value of True is returned, otherwise False is given||This function will test for collisions with all Bobs on screen, but the checking process can be restricted with the|optional setting of the range of Bobs to be monitored, from the first Bob number to the last in the range.|If you need to test for collisions between several Sprites and Bobs, the command should be enclosed in a loop, like this|~~~|For FIRSTSPRITE=1 To LASTSPRITE|If Spritebob Col(FIRSTSPRITE,FIRSTBOB To LASTBOB) Then Boom|Next FIRSTSPRITE|~~~|Remember that all specified Sprites must be assigned to a masked image, before collision detection can work. You|are also warned that this function will only work with low resolution screens, and attempts to use it in high|resolution will lead to unpredictable results. This is because your Sprites and Bobs are likely to have different sized screen points||"},{"name":"Col","descriptions":[{"lang":"en","text":"Test the status of an object after collision detection"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the object (sprite or bob) to test."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the object is colliding with one of the other objects, False if not"},{"lang":"en","type":"integer","text":"The index of the object colliding (bob or sprite) if you used -1 as parameter"}],"content":"One obvious problem with all of the previous detection functions is that they only report on whether an individual object has been hit.|To discover information about any other objects involved in a collision, the COL function is used. This means that each object can be tested on its own, to see if it has collided with the source object \"\"|Give the index of the object you wish to test, either a Bob or a Sprite, depending on the circumstances, and its status will be reported with a value of True if it has collided, or False if it remains untouched||Note that this function has been extended in AOZ, if you use -1 for this parameter, it will return the INDEX of the object in collision, to avoid having to perform a loop|"},{"name":"Bob Collide With","descriptions":[{"lang":"en","text":"Indicate the category of bobs or sprites a bob collides with"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob"},{"lang":"en","name":"list","type":"list of strings","text":"A list of strings indicating the names of the categories this bob collides with"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction, allied with the \"Bob Collide\" instruction allows you accelerate the collision detection process.||Bob Collide With set a list of the categories of bob with which this bob will collide. If no categories are defined the the bob will generate collission with all the other objects.|~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\"||Bob \"hero\", 100, 100, 1|Bob Collide \"hero\", \"good\"||Bob \"side-kick\", 100, 100, 2|Bob Collide \"side-kick\", \"good\"||Bob \"ennemy\", 100, 100, 3|Bob Collide \"ennemy\", \"bad\"||Bob \"box\", 100, 100, 4||Bob Collide With \"hero\", \"bad\", \"box\"|Bob Collide With \"ennemy\", \"good\"||Print Bob Col( \"hero\" )\t\t\t// Will print true, bobs colliding: \"box\"|Print Bob Col( \"ennemy\" )\t\t// Will print true, bobs colliding: \"hero\", \"side-kick\"|Print Bob Col( \"box\" )\t\t\t// Will print false: \"box\" has no category whereas other have...|~~~|"},{"name":"Bob Collide","descriptions":[{"lang":"en","text":"Sets the collision categories of a bob"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob"},{"lang":"en","name":"with","type":"list of strings","text":"Various categories the bob is going to collide with"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction, allied with the \"Bob Collide With\" instruction allows you accelerate the collision detection process.||Bob Collide With set a list of the categories of bob with which this bob will collide. If no categories are defined the the bob will generate collission with all the other objects.|~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\"||Bob \"hero\", 100, 100, 1|Bob Collide \"hero\", \"good\"||Bob \"side-kick\", 100, 100, 2|Bob Collide \"side-kick\", \"good\"||Bob \"ennemy\", 100, 100, 3|Bob Collide \"ennemy\", \"bad\"||Bob \"box\", 100, 100, 4||Bob Collide With \"hero\", \"bad\", \"box\"|Bob Collide With \"ennemy\", \"good\"||Print Bob Col( \"hero\" )\t\t\t// Will print true, bobs colliding: \"box\"|Print Bob Col( \"ennemy\" )\t\t// Will print true, bobs colliding: \"hero\", \"side-kick\"|Print Bob Col( \"box\" )\t\t\t// Will print false: \"box\" has no category whereas other have...|"},{"name":"Bob Point","descriptions":[{"lang":"en","text":"Test if a point lays inside of a bob"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob to test"},{"lang":"en","name":"x","type":"integer","text":"Horizontal coordinate of the point to test"},{"lang":"en","name":"y","type":"integer","text":"Vertical coordinate of the point to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the point lays over the bob"}],"content":"This function checks for a point object the given bob. It will return True if the point|is within the collision mask of the bob, and false if not.|~~~|Bob 1, 100, 100, 1|Repeat|If Bob Point( 1, X Mouse, Y Mouse )|Print \"The mouse pointer is over the bob!\"|End IF|Until Inkey$ != \"\"|~~~|"},{"name":"Sprite Point","descriptions":[{"lang":"en","text":"Test if a point lays over a sprite"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite to test"},{"lang":"en","name":"x","type":"integer","text":"Horizontal coordinate of the point to test"},{"lang":"en","name":"y","type":"integer","text":"Vertical coordinate of the point to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the point lays over the sprite"}],"content":"This function checks for a point object the given sprite. It will return True if the point|is within the collision mask of the sprite, and false if not.|~~~|Sprite 1, 100, 100, 1|Repeat|If Sprite Point( 1, X Mouse, Y Mouse )|Print \"The mouse pointer is over the sprite!\"|End IF|Until Inkey$ != \"\"|~~~|"}]},{"name":"Colour Palette","id":1639692453978,"descriptions":[{"lang":"en","text":"Instructions and functions to animate and manage colours"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Get Palette","descriptions":[{"lang":"en","text":"Grab the palette of another screen in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the source screen"},{"lang":"en","name":"mask","type":"integer","text":"A mask of bits in which bits set to one will enforce the copy of the colour and 0 will ignore the color. Only for the first 32 colours (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This instruction only has an effect if the screen has been opened in paletted mode, and may invoke a remapping process of all the pixels of the screen that might induce a delay.||It copies the colours from a specified screen, and loads them into the current screen. This is useful|when data is being moved from one screen to another with a SCREEN COPY command, and the same colour|settings need to be shared for both screens. An optional mask can be added after the screen number, allowing only|selected colours to be loaded.|"},{"name":"Get Images Palette","descriptions":[{"lang":"en","text":"Copy the colour palette from the Images bank to the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"mask","type":"integer","text":"Mask of bits where each bit set to 1 represent a colour to copy and 0 a colour to ignore, up to 32 (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This instruction only has an effect if the screen has been opened in paletted mode, and will invoke a remapping process of all the pixels of the screen that might induce a delay.|"},{"name":"Colour Back","descriptions":[{"lang":"en","text":"Assign a colour to the screen background"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number of the colour in the palette if between brackets or a RGRGGBB hexadecimal value"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command is used to assign your choice of RGB components for the screen's background colour, which fills|unused areas at the top and bottom of the visible screen. Such area usually appear when a fixed proportion image is displayed in a windowed browser and the proportions of the browser's window do not match the one of the application.|they are usually called \"black bars\".||Alternatively, existing colours may also be specified when enclosed in brackets.|"},{"name":"Colour","descriptions":[{"lang":"en","text":"Set the RGB value of a colour in the palette the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number of the colour in the palette"},{"lang":"en","name":"rgb","type":"rgb","text":"The RGB value of the new colour (example"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Used as an instruction, COLOUR allows you to assign the RGB components of a colour to an entry in the screen palette.|For example, if you wanted to load colour number 1 with a subtle shade of pig's feet, you would use this:|~~~|Cls : Colour 1,$AA7744|~~~|"},{"name":"Color","descriptions":[{"lang":"en","text":"Set the RGB value of a colour in the palette the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number of the color in the palette"},{"lang":"en","name":"rgb","type":"rgb","text":"The RGB value of the new color (example"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"Used as an instruction, COLOR allows you to assign the RGB components of a colour to an entry in the screen palette.|For example, if you wanted to load colour number 1 with a subtle shade of pig's feet, you would use this:|~~~|Cls : Color 1,$AA7744|~~~|"},{"name":"Colour","descriptions":[{"lang":"en","text":"Return the RGB value of a colour from the palette of the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number of the colour in the palette"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"rgb","text":"The RGB value of the new colour (example"}],"compatible":" aoz, stos, amos","content":"It is not difficult to find which colours are occupying the colour index, and analyse how much Red, Green and Blue is used to make up each shade.|The COLOUR function can take an index number from 0 to 31, and returns the colour value assigned to that number. Hex$ is used for this purpose, as follows|~~~|For C=0 To 15: Ink C|Print Hex$(Colour(C),3)|Circle 160,75,(C+1)*4|Next C|~~~||"},{"name":"Color","descriptions":[{"lang":"en","text":"Return the RGB value of a colour from the palette of the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"index","text":"The index of the color in the palette"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"rgb","text":"The RGB value of the new color (example"}],"compatible":" aoz, stos, amos","content":"It is not difficult to find which colours are occupying the colour index, and analyse how much Red, Green and Blue is used to make up each shade.|The COLOR function can take an index number from 0 to 31, and returns the colour value assigned to that number. Hex$ is used for this purpose, as follows|~~~|For C=0 To 15: Ink C|Print Hex$(Color(C),3)|Circle 160,75,(C+1)*4|Next C|~~~|"},{"name":"RGB$","descriptions":[{"lang":"en","text":"Return a string with the given RGB colors"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"red","type":"integer","text":"The value of the red component, from 0 to 255"},{"lang":"en","name":"green","type":"integer","text":"The value of the green component, from 0 to 255"},{"lang":"en","name":"blue","type":"integer","text":"The value of the blue component, from 0 to 255"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The RGB string in the form"}],"compatible":" aoz","content":"~~~|Print RGB$( 28, 127, 89 )|> 1C7F59|~~~||You can also use a string with the name of one of the colors defined in the Javascript standard. For example:|~~~|Print RGB$( \"AntiqueWhite\" )\t\t// Will print \"$FAEBD7\"|~~~|"},{"name":"RGB$","descriptions":[{"lang":"en","text":"Return a string with the RGB values of a Javascript color"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"color$","type":"string","text":"The exact name of a Javascript color"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The RGB string in the form"}],"compatible":" aoz","content":"~~~|Print RGB$( \"AntiqueWhite\" )\t\t// Will print \"$FAEBD7\"|~~~||List of supported colors and their values:||- aliceblue: \"F0F8FF\",|- antiquewhite: \"FAEBD7\",|- aqua: \"00FFFF\",|- aquamarine: \"7FFFD4\",|- azure: \"F0FFFF\",|- beige: \"F5F5DC\",|- bisque: \"FFE4C4\",|- black: \"000000\",|- blanchedalmond: \"FFEBCD\",|- blue: \"0000FF\",|- blueviolet: \"8A2BE2\",|- brown: \"A52A2A\",|- burlywood: \"DEB887\",|- cadetblue: \"5F9EA0\",|- chartreuse: \"7FFF00\",|- chocolate: \"D2691E\",|- coral: \"FF7F50\",|- cornflowerblue: \"6495ED\",|- cornsilk: \"FFF8DC\",|- crimson: \"DC143C\",|- cyan: \"00FFFF\",|- darkblue: \"00008B\",|- darkcyan: \"008B8B\",|- darkgoldenrod: \"B8860B\",|- darkgray: \"A9A9A9\",|- darkgrey: \"A9A9A9\",|- darkgreen: \"006400\",|- darkkhaki: \"BDB76B\",|- darkmagenta: \"8B008B\",|- darkolivegreen: \"556B2F\",|- darkorange: \"FF8C00\",|- darkorchid: \"9932CC\",|- darkred: \"8B0000\",|- darksalmon: \"E9967A\",|- darkseagreen: \"8FBC8F\",|- darkslateblue: \"483D8B\",|- darkslategray: \"2F4F4F\",|- darkslategrey: \"2F4F4F\",|- darkturquoise: \"00CED1\",|- darkviolet: \"9400D3\",|- deeppink: \"FF1493\",|- deepskyblue: \"00BFFF\",|- dimgray: \"696969\",|- dimgrey: \"696969\",|- dodgerblue: \"1E90FF\",|- firebrick: \"B22222\",|- floralwhite: \"FFFAF0\",|- forestgreen: \"228B22\",|- fuchsia: \"FF00FF\",|- gainsboro: \"DCDCDC\",|- ghostwhite: \"F8F8FF\",|- gold: \"FFD700\",|- goldenrod: \"DAA520\",|- gray: \"808080\",|- grey: \"808080\",|- green: \"008000\",|- greenyellow: \"ADFF2F\",|- honeydew: \"F0FFF0\",|- hotpink: \"FF69B4\",|- indianred: \"CD5C5C\",|- indigo: \"4B0082\",|- ivory: \"FFFFF0\",|- khaki: \"F0E68C\",|- lavender: \"E6E6FA\",|- lavenderblush: \"FFF0F5\",|- lawngreen: \"7CFC00\",|- lemonchiffon: \"FFFACD\",|- lightblue: \"ADD8E6\",|- lightcoral: \"F08080\",|- lightcyan: \"E0FFFF\",|- lightgoldenrodyellow: \"FAFAD2\",|- lightgray: \"D3D3D3\",|- lightgrey: \"D3D3D3\",|- lightgreen: \"90EE90\",|- lightpink: \"FFB6C1\",|- lightsalmon: \"FFA07A\",|- lightseagreen: \"20B2AA\",|- lightskyblue: \"87CEFA\",|- lightslategray: \"778899\",|- lightslategrey: \"778899\",|- lightsteelblue: \"B0C4DE\",|- lightyellow: \"FFFFE0\",|- lime: \"00FF00\",|- limegreen: \"32CD32\",|- linen: \"FAF0E6\",|- magenta: \"FF00FF\",|- maroon: \"800000\",|- mediumaquamarine: \"66CDAA\",|- mediumblue: \"0000CD\",|- mediumorchid: \"BA55D3\",|- mediumpurple: \"9370DB\",|- mediumseagreen: \"3CB371\",|- mediumslateblue: \"7B68EE\",|- mediumspringGreen: \"00FA9A\",|- mediumturquoise: \"48D1CC\",|- mediumvioletRed: \"C71585\",|- midnightblue: \"191970\",|- mintcream: \"F5FFFA\",|- mistyrose: \"FFE4E1\",|- moccasin: \"FFE4B5\",|- navajowhite: \"FFDEAD\",|- navy: \"000080\",|- oldlace: \"FDF5E6\",|- olive: \"808000\",|- olivedrab: \"6B8E23\",|- orange: \"FFA500\",|- orangered: \"FF4500\",|- orchid: \"DA70D6\",|- palegoldenrod: \"EEE8AA\",|- palegreen: \"98FB98\",|- paleturquoise: \"AFEEEE\",|- palevioletred: \"DB7093\",|- papayawhip: \"FFEFD5\",|- peachpuff: \"FFDAB9\",|- peru: \"CD853F\",|- pink: \"FFC0CB\",|- plum: \"DDA0DD\",|- powderblue: \"B0E0E6\",|- purple: \"800080\",|- rebeccapurple: \"663399\",|- red: \"FF0000\",|- rosybrown: \"BC8F8F\",|- royalblue: \"4169E1\",|- saddlebrown: \"8B4513\",|- salmon: \"FA8072\",|- sandybrown: \"F4A460\",|- seagreen: \"2E8B57\",|- seashell: \"FFF5EE\",|- sienna: \"A0522D\",|- silver: \"C0C0C0\",|- skyblue: \"87CEEB\",|- slateblue: \"6A5ACD\",|- slategray: \"708090\",|- slategrey: \"708090\",|- snow: \"FFFAFA\",|- springgreen: \"00FF7F\",|- steelblue: \"4682B4\",|- tan: \"D2B48C\",|- teal: \"008080\",|- thistle: \"D8BFD8\",|- tomato: \"FF6347\",|- turquoise: \"40E0D0\",|- violet: \"EE82EE\",|- wheat: \"F5DEB3\",|- white: \"FFFFFF\",|- whitesmoke: \"F5F5F5\",|- yellow: \"FFFF00\",|- yellowgreen: \"9ACD32\"|"},{"name":"RGB","descriptions":[{"lang":"en","text":"Return a number with the RGB value encoded"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"res","type":"integer","text":"The value of the red component, from 0 to 255"},{"lang":"en","name":"green","type":"integer","text":"The value of the green component, from 0 to 255"},{"lang":"en","name":"blue","type":"integer","text":"The value of the blue component, from 0 to 255"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The RGB value to use in Set Color"}],"compatible":" aoz","content":"~~~|Print RGB( 28, 127, 89 )|> 1867609|~~~|"},{"name":"RGBA","descriptions":[{"lang":"en","text":"Return a number with the RGBA value encoded"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"red","type":"integer","text":"The value of the red component, from 0 to 255"},{"lang":"en","name":"green","type":"integer","text":"The value of the green component, from 0 to 255"},{"lang":"en","name":"blue","type":"integer","text":"The value of the blue component, from 0 to 255"},{"lang":"en","name":"alpha","type":"integer","text":"The value of the alpha component, from 0 to 255"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The RGBA value to use in Set Color"}],"compatible":" aoz","content":"~~~|Print RGBA( 28, 127, 89, 128 )|> 1867609|~~~|"},{"name":"RGB","descriptions":[{"lang":"en","text":"Return a number with the RGB value of a Javascript color encoded"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"color$","type":"string","text":"The exact name of a Javascript color"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The RGB value as an integer"}],"compatible":" aoz","content":"~~~|Print Hex$( RGB$( \"AntiqueWhite\" ), 32 )\t\t// Will print \"$FAEBD7\"|~~~||List of supported colors and their values:||- aliceblue: $F0F8FF,|- antiquewhite: $FAEBD7,|- aqua: $00FFFF,|- aquamarine: $7FFFD4,|- azure: $F0FFFF,|- beige: $F5F5DC,|- bisque: $FFE4C4,|- black: $000000,|- blanchedalmond: $FFEBCD,|- blue: $0000FF,|- blueviolet: $8A2BE2,|- brown: $A52A2A,|- burlywood: $DEB887,|- cadetblue: $5F9EA0,|- chartreuse: $7FFF00,|- chocolate: $D2691E,|- coral: $FF7F50,|- cornflowerblue: $6495ED,|- cornsilk: $FFF8DC,|- crimson: $DC143C,|- cyan: $00FFFF,|- darkblue: $00008B,|- darkcyan: $008B8B,|- darkgoldenrod: $B8860B,|- darkgray: $A9A9A9,|- darkgrey: $A9A9A9,|- darkgreen: $006400,|- darkkhaki: $BDB76B,|- darkmagenta: $8B008B,|- darkolivegreen: $556B2F,|- darkorange: $FF8C00,|- darkorchid: $9932CC,|- darkred: $8B0000,|- darksalmon: $E9967A,|- darkseagreen: $8FBC8F,|- darkslateblue: $483D8B,|- darkslategray: $2F4F4F,|- darkslategrey: $2F4F4F,|- darkturquoise: $00CED1,|- darkviolet: $9400D3,|- deeppink: $FF1493,|- deepskyblue: $00BFFF,|- dimgray: $696969,|- dimgrey: $696969,|- dodgerblue: $1E90FF,|- firebrick: $B22222,|- floralwhite: $FFFAF0,|- forestgreen: $228B22,|- fuchsia: $FF00FF,|- gainsboro: $DCDCDC,|- ghostwhite: $F8F8FF,|- gold: $FFD700,|- goldenrod: $DAA520,|- gray: $808080,|- grey: $808080,|- green: $008000,|- greenyellow: $ADFF2F,|- honeydew: $F0FFF0,|- hotpink: $FF69B4,|- indianred: $CD5C5C,|- indigo: $4B0082,|- ivory: $FFFFF0,|- khaki: $F0E68C,|- lavender: $E6E6FA,|- lavenderblush: $FFF0F5,|- lawngreen: $7CFC00,|- lemonchiffon: $FFFACD,|- lightblue: $ADD8E6,|- lightcoral: $F08080,|- lightcyan: $E0FFFF,|- lightgoldenrodyellow: $FAFAD2,|- lightgray: $D3D3D3,|- lightgrey: $D3D3D3,|- lightgreen: $90EE90,|- lightpink: $FFB6C1,|- lightsalmon: $FFA07A,|- lightseagreen: $20B2AA,|- lightskyblue: $87CEFA,|- lightslategray: $778899,|- lightslategrey: $778899,|- lightsteelblue: $B0C4DE,|- lightyellow: $FFFFE0,|- lime: $00FF00,|- limegreen: $32CD32,|- linen: $FAF0E6,|- magenta: $FF00FF,|- maroon: $800000,|- mediumaquamarine: $66CDAA,|- mediumblue: $0000CD,|- mediumorchid: $BA55D3,|- mediumpurple: $9370DB,|- mediumseagreen: $3CB371,|- mediumslateblue: $7B68EE,|- mediumspringGreen: $00FA9A,|- mediumturquoise: $48D1CC,|- mediumvioletRed: $C71585,|- midnightblue: $191970,|- mintcream: $F5FFFA,|- mistyrose: $FFE4E1,|- moccasin: $FFE4B5,|- navajowhite: $FFDEAD,|- navy: $000080,|- oldlace: $FDF5E6,|- olive: $808000,|- olivedrab: $6B8E23,|- orange: $FFA500,|- orangered: $FF4500,|- orchid: $DA70D6,|- palegoldenrod: $EEE8AA,|- palegreen: $98FB98,|- paleturquoise: $AFEEEE,|- palevioletred: $DB7093,|- papayawhip: $FFEFD5,|- peachpuff: $FFDAB9,|- peru: $CD853F,|- pink: $FFC0CB,|- plum: $DDA0DD,|- powderblue: $B0E0E6,|- purple: $800080,|- rebeccapurple: $663399,|- red: $FF0000,|- rosybrown: $BC8F8F,|- royalblue: $4169E1,|- saddlebrown: $8B4513,|- salmon: $FA8072,|- sandybrown: $F4A460,|- seagreen: $2E8B57,|- seashell: $FFF5EE,|- sienna: $A0522D,|- silver: $C0C0C0,|- skyblue: $87CEEB,|- slateblue: $6A5ACD,|- slategray: $708090,|- slategrey: $708090,|- snow: $FFFAFA,|- springgreen: $00FF7F,|- steelblue: $4682B4,|- tan: $D2B48C,|- teal: $008080,|- thistle: $D8BFD8,|- tomato: $FF6347,|- turquoise: $40E0D0,|- violet: $EE82EE,|- wheat: $F5DEB3,|- white: $FFFFFF,|- whitesmoke: $F5F5F5,|- yellow: $FFFF00,|- yellowgreen: $9ACD32|"},{"name":"Flash Off","descriptions":[{"lang":"en","text":"Turns off the flashing colours sequence"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Flash","descriptions":[{"lang":"en","text":"Set the flashing color sequence"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The index of the colour in the current screen palette"},{"lang":"en","name":"definition$","type":"string","text":"The definition of the flashing sequence"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"amos, stos","content":"When FLASH is followed by the index number of any colour, that colour will display animated flashing every time it is used, until FLASH OFF is called.|Up to 16 colours can be cycled to customise your flashing effects, and the rate of delay from one colour change to the next can be individually set. Try this|~~~|Flash 1 ,\"(00AA00,10)(FF00FF,40)\"|~~~|In that example, the colour to be affected is set to index number 1.|After the comma, the set of quotation marks contains pairs of brackets, and each pair of brackets contains the colour that is next on the list to be flashed, and the time it will appear for.|Colour is set in RGB component values. Delay time is set in units of a 50th of a second.|So the last example has the effect of flashing colour number 1 between a green value and a violet value once every second. The next example is more subtle|~~~|Cls : Centre \"SILENT MOVIES\"|Flash 1,\"(111,4)(333,4)(555,4)(777,4)(555,7)(333,7)|Curs Off : Wait 250 : Flash Off|~~~||"},{"name":"Shift Off","descriptions":[{"lang":"en","text":"Turn off all colour shifts for current screen"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" amos, stos","content":"Use this command to terminate all colour rotations previously set by the SHIFT UP and SHIFT DOWN instructions.|"},{"name":"Shift Up","descriptions":[{"lang":"en","text":"Rotate the colour values of the current screen upwards"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"delay","type":"integer","text":"Number of 1/1000th of second between shifts (PC mode) and 1/50th of the second (Amiga and retro machine emulation)"},{"lang":"en","name":"firstColor","type":"integer","text":"Index of the first colour in the palette to shift"},{"lang":"en","name":"lastColor","type":"integer","text":"Index of the last colour in the palette to shift"},{"lang":"en","name":"*rotateLastColor","type":"boolean","text":"Flag indicate whether to copy the last color back to the first color (True) or discard it (false)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" amos, stos","content":"This command takes the values held in the colour registers and shunts them forwards. The delay between colour shifts is set in 50ths of a second, similarly to the FADE command||Next the values of the colours to be affected are set, from the first colour to the last colour in the sequence.|The first colour in the list will be copied to the second, the second to the third, and so on until the last colour in the series is reached.||Finally, a flag is set to either 0 or 1. When this flag is set to zero, the last colour is discarded, and the rotation will cycle for the number of times it takes to replace all colours with the first colour in the list.||Alternatively, if the flag is set to one, the last colour index in the list is copied into the first, causing the colours to rotate continuously on screen.||Each of your screens can have its own set of animated colour rotations, and because they are executed in the background they will not affect the running of your programs...||"},{"name":"Shift Down","descriptions":[{"lang":"en","text":"Rotate the colour values of the current screen downwards"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"delay","type":"integer","text":"Number of 1/1000th of second between shifts (PC mode) and 1/50th of the second (Amiga and retro machine emulation)"},{"lang":"en","name":"firstColor","type":"integer","text":"Index of the first colour in the palette to shift"},{"lang":"en","name":"lastColor","type":"integer","text":"Index of the last colour in the palette to shift"},{"lang":"en","name":"rotateFirstColor","type":"boolean","text":"Flag indicate whether to copy the first color back to the last color (True) or discard it (false)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoms, stos","content":"This command is identical to SHIFT UP, except for the fact that colours are rotated in the opposite direction, so that|the second colour is copied into the first, the third to the second, and so on. With the final flag set to zero, all colours|are eventually replaced with the last colour in the list||"},{"name":"Fade","descriptions":[{"lang":"en","text":"TODO! Blend the colours of the current screen to the values of the palette of another screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"delay","type":"integer","text":"Number of 1/1000th of second between changes (PC mode) and 1/50th of a second for Amiga and retro machine emulation"},{"lang":"en","name":"screenIndex","type":"index","text":"The index of the screen to fade the palette to"},{"lang":"en","name":"mask","type":"integer","text":"A mask of bits indicating which colour to fade, bits set to 1 beign taken into account by their number in the mask"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" amos, stos","content":"The classic fade to black\" movie effect takes the current palette and gradually fades all values to zero. Set the speed of the fade by choosing the number of vertical blank periods between each colour change. Try this|~~~|Flash Off : Curs Off|Centre \"GOOD NIGHT\"|Fade 5|~~~|Fade effects are executed using interrupts, so it is sensible to wait until the fade has ended before going on to the next program instruction. The length of wait required can be calculated with this formula|~~~|wait = fade speed * 15|~~~|So that last example is sure to work with the rest of your program if the third line is changed to this|~~~|Fade 5 : Wait 75|~~~|By adding a list of colour values, the fade effect will generate a new palette directly from your list, and it is used like this|~~~|Flash Off : Curs Off|Centre \"RED SKY AT NIGHT\"|Fade 10,$100,$F00,$300|Wait 150|~~~|Any number of new colours can be set up like this, depending on the maximum number allowed in your current|screen mode. Any settings that are omitted will leave those colours completely unaffected by the fade, as long as you|include the right number of commas. For example|~~~|Fade 5,,$100,,,$200,$300|~~~|There is an even more powerful use of the FADE command, which takes the palette from another screen and fades it|into the colours of the current screen. Set the speed of the fade as usual, then give the number of the screen whose|palette is to be accessed. By using a negative number instead of a screen number, the palette from the sprite bank|will be loaded instead||There is one more parameter that can be added, and this creates a mask that only permits certain colours to be faded|in. Each colour is associated with a single bit in the pattern, numbered from 0 to 15, and any bit that is set to 1 will be affected by a colour change. For example|~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.Abk\"|Screen Open 1,320,90,16,Lowres|Flash Off : Get Object Palette|Paste Bob 100,0,1|Wait 100|Fade 1 To 0,%01111000011001010|Wait 15|~~~||"},{"name":"Fade","descriptions":[{"lang":"en","text":"Blend colours to new values"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"delay","type":"integer","text":"Number of 1/1000th of second between changes (PC mode) and 1/50th of a second for Amiga and retro machine emulation"},{"lang":"en","name":"colorList","type":"integers","text":"A list of RGB values, separated by commmas indicating the new colours to fade to (op[tional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" amos, stos"},{"name":"Default Palette","descriptions":[{"lang":"en","text":"Set the default palette to be used in further \"Screen Open\" instructions"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"colorList","type":"integers","text":"A list of RGB value separated by a comma, defining the colours to use"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"It is often necessary to open several screens using the same palette. To simplify this process, the DEFAULT|PALETTE instruction is used to define a standard palette which will be used by all subsequent screens created by|the SCREEN OPEN command. Colours are set using the $RGB values that are fully explained in the COLOUR|section of Chapter 6.4. Up to 32 colours may be defined, depending on the screen mode, and any colours that are not|re-set must have their appropriate commas in place.||Here is an example line for eight colour screens:|~~~|Default Palette $000000,$111111,$AA6699,,,,,$FFFFFF|~~~|"},{"name":"Palette","descriptions":[{"lang":"en","text":"Set the palette of the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"colorList","type":"integers","text":"A list of RGB value separated by a comma, defining the colours to use"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This is a much more powerful command than COLOUR, and it can be used to set as few or as many colours in your artist's palette as are needed. Your programs always begin using a list of default colour values,|and these values may be changed as in the next example.||Remember that only the colours specifically set with this command will be affected, and any others will retain their|original values.|~~~|Palette $FFFFFF : Rem set colour 0 to white|Palette ,,,,$FF0000,$D00000,$AA0000,$770000,$4400000 // colours 4 to 8 graded reds|Palette $000000,,$000000\t\t// colours 0 and 2 both black|~~~|"},{"name":"Default","descriptions":[{"lang":"en","text":"Restore the display to the state it was when the application start. Close all screen, all windows, detroys all bobs and sprites and open the default screen"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The DEFAULT instruction closes all currently opened screens and restores the display back to the original default settings...||"}]},{"name":"Game Controllers","id":1639692453991,"descriptions":[{"lang":"en","text":"Instructions and functions to get input from game controllers"}],"descriptions_file":[],"author":"Francois Lionet and Brian flanagan","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Joy","descriptions":[{"lang":"en","text":"Return the current state of the joystick"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"joystick","type":"integer","text":"The number of the joystick"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"A binary number representing where each bit represents a direction. Bit 0"}],"compatible":" aoz, stos, amos","content":"This inspects what is happening with the joystick and makes a report. Any kind of joystick is supported, and the keys are mapped as best as possible.|AOZ also emulate joystick entry through the keyboard if no joystick is connected, with a default mapping to the arrow keys for directions and the space bar for fire.|The mappingh is stored in the manifest that is created when you click on \"New Application\" in AOZ.|~~~|Do|J=Joy(1)|Print Bin$(J,5),J|Loop|~~~|When you run that routine, reports are given about the movements of the joystick and the status of the fire-button in|the form of binary numbers. The pattern of ones and zeros in the report can then be inspected. Binary bits shown as|zero indicate that nothing is happening, whereas if any of the bits in the report is shown as a one, it means that the|joystick has been moved in the direction that relates to that bit. Here is a list of those bits along with their meanings.|~~~|Bit number \tMeaning|0 \t\tJoystick has been moved Up|1 \t\tJoystick has been moved Down|2 \t\tJoystick has been moved Left|3 \t\tJoystick has been moved Right|4 \t\tFire-button has been pressed|~~~||"},{"name":"JUp","descriptions":[{"lang":"en","text":"Test for joystick movement up"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"joystick","type":"integer","text":"The number of the joystick"},{"lang":"en","name":"lock","type":"boolean","text":"If true, the function will wait for the button to be released before being true again"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if joystick is positionned up, False if not"}],"compatible":" aoz, stos, amos","content":"This returns a value of True if the joystick connected to the given port number has been pushed up, otherwise a value of False.|These functions can be demonstrated by the following example:|~~~|Do|If Jleft(1) Then Print \"WEST\"|If Jright(1) Then Print \"EAST\"|If Jup(1) Then Print \"NORTH\"|If Jdown(1) Then Print \"SOUTH\"|Loop|~~~||"},{"name":"JDown","descriptions":[{"lang":"en","text":"Test for joystick movement down"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"joystick","type":"integer","text":"The number of the joystick"},{"lang":"en","name":"lock","type":"boolean","text":"If true, the function will wait for the button to be released before being true again"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if joystick is positionned down, False if not"}],"compatible":" aoz, stos, amos","content":"This returns a value of True if the joystick connected to the given port number has been pushed down, otherwise a value of False.|These functions can be demonstrated by the following example:|~~~|Do|If Jleft(1) Then Print \"WEST\"|If Jright(1) Then Print \"EAST\"|If Jup(1) Then Print \"NORTH\"|If Jdown(1) Then Print \"SOUTH\"|Loop|~~~||"},{"name":"JLeft","descriptions":[{"lang":"en","text":"Test for joystick movement left"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"joystick","type":"integer","text":"The number of the joystick"},{"lang":"en","name":"lock","type":"boolean","text":"If true, the function will wait for the button to be released before being true again"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if joystick is positionned left, False if not"}],"compatible":" aoz, stos, amos","content":"This returns True if the joystick connected to the given port number has been pushed to the|left, otherwise False is returned.|These functions can be demonstrated by the following example:|~~~|Do|If Jleft(1) Then Print \"WEST\"|If Jright(1) Then Print \"EAST\"|If Jup(1) Then Print \"NORTH\"|If Jdown(1) Then Print \"SOUTH\"|Loop|~~~||"},{"name":"JRight","descriptions":[{"lang":"en","text":"Test for joystick movement right"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"joystick","type":"integer","text":"The number of the joystick"},{"lang":"en","name":"lock","type":"boolean","text":"If true, the function will wait for the button to be released before being true again"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if joystick is positionned right, False if not"}],"compatible":" aoz","content":"This returns True if the joystick connected to the given port number has been pushed to the|right, otherwise False is returned.|These functions can be demonstrated by the following example:|~~~|Do|If Jleft(1) Then Print \"WEST\"|If Jright(1) Then Print \"EAST\"|If Jup(1) Then Print \"NORTH\"|If Jdown(1) Then Print \"SOUTH\"|Loop|~~~||"},{"name":"JUpLeft","descriptions":[{"lang":"en","text":"Test for joystick movement up and left"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"joystick","type":"integer","text":"The number of the joystick"},{"lang":"en","name":"lock","type":"boolean","text":"If true, the function will wait for the button to be released before being true again"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if joystick is positionned up, False if not"}],"author":" Brian Flanagan","compatible":" aoz","content":"This returns True if the joystick connected to the given port number has been pushed to the|up-left diagonal, otherwise False is returned.|These functions can be demonstrated by the following example:|~~~|Do|If JUpLeft(1) Then Print \"NORTH-WEST\"|If JUpRight(1) Then Print \"NORTH-EAST\"|If JDownLeft(1) Then Print \"SOUTH-WEST\"|If JDownRight(1) Then Print \"SOUTH-EAST\"|Loop|~~~||"},{"name":"JUpRight","descriptions":[{"lang":"en","text":"Test for joystick movement up and right"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"joystick","type":"integer","text":"The number of the joystick"},{"lang":"en","name":"lock","type":"boolean","text":"If true, the function will wait for the button to be released before being true again"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if joystick is positionned up, False if not"}],"author":" Brian Flanagan","compatible":" aoz","content":"This returns True if the joystick connected to the given port number has been pushed to the|up-right diagonal, otherwise False is returned.|These functions can be demonstrated by the following example:|~~~|Do|If JUpLeft(1) Then Print \"NORTH-WEST\"|If JUpRight(1) Then Print \"NORTH-EAST\"|If JDownLeft(1) Then Print \"SOUTH-WEST\"|If JDownRight(1) Then Print \"SOUTH-EAST\"|Loop|~~~|"},{"name":"JDownLeft","descriptions":[{"lang":"en","text":"Test for joystick movement down and left"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"joystick","type":"integer","text":"The number of the joystick"},{"lang":"en","name":"lock","type":"boolean","text":"If true, the function will wait for the button to be released before being true again"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if joystick is positionned up, False if not"}],"author":" Brian Flanagan","compatible":" aoz","content":"This returns True if the joystick connected to the given port number has been pushed to the|down-left diagonal, otherwise False is returned.|These functions can be demonstrated by the following example:|~~~|Do|If JUpLeft(1) Then Print \"NORTH-WEST\"|If JUpRight(1) Then Print \"NORTH-EAST\"|If JDownLeft(1) Then Print \"SOUTH-WEST\"|If JDownRight(1) Then Print \"SOUTH-EAST\"|Loop|~~~||"},{"name":"JDownRight","descriptions":[{"lang":"en","text":"Test for joystick movement down and right"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"joystick","type":"integer","text":"The number of the joystick"},{"lang":"en","name":"lock","type":"boolean","text":"If true, the function will wait for the button to be released before being true again"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if joystick is positionned up, False if not"}],"author":" Brian Flanagan","compatible":" aoz","content":"This returns True if the joystick connected to the given port number has been pushed to the|down-right diagonal, otherwise False is returned.|These functions can be demonstrated by the following example:|~~~|Do|If JUpLeft(1) Then Print \"NORTH-WEST\"|If JUpRight(1) Then Print \"NORTH-EAST\"|If JDownLeft(1) Then Print \"SOUTH-WEST\"|If JDownRight(1) Then Print \"SOUTH-EAST\"|Loop|~~~||"},{"name":"Fire","descriptions":[{"lang":"en","text":"Test for joystick fire button"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"joystick","type":"integer","text":"The number of the joystick"},{"lang":"en","name":"lock","type":"boolean","text":"If true, the function will wait for the button to be released before being true again"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if joystick fire button is pressend, False if it is not"}],"compatible":" aoz, stos, amos","content":"To set up a routine for testing to see if the fire-button has been pressed, use the FIRE function followed by the|joystick port number. A value of True will be given only if the fire-button on the relevant joystick has been pressed.|~~~|Do|F=Fire(1)|If F=-1 Then Centre \"BANG!\": Shoot|Print|Loop|~~~|As a default, the SPACE key is mapped to replace FIRE in case no joystick is connected to the machine.|You can edit this setting in the manifest of the application, or while creating the project.|"},{"name":"JoyKey","descriptions":[{"lang":"en","text":"Associates keystroke with joystick action"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"author":" Brian Flanagan","content":"TODO|~~~||~~~||"},{"name":"Gamepad Threshold","descriptions":[{"lang":"en","text":"Get threshold to trigger up/down/left/right"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float ","text":"number > 0 and <=1, percentage"}],"author":" Brian Flanagan","compatible":" aoz","content":"TOBF|"},{"name":"Gamepad Threshold","descriptions":[{"lang":"en","text":"Set threshold to trigger up/down/left/right"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"THRESHOLD","type":"float","text":"number betwwen 0 and 1, the givenm threshold"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"author":" Brian Flanagan","compatible":" aoz","content":"TOBF|"},{"name":"Gamepad Button","descriptions":[{"lang":"en","text":"Test for a button depressed on a complex gamepad"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"GAMEPAD","type":"integer","text":"The number of the gamepad"},{"lang":"en","name":"BUTTON","type":"integer","text":"The number of the button"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if th ebutton is pressed, False if it is not"}],"compatible":" aoz","content":"TOBF|"},{"name":"Gamepad Buttons","descriptions":[{"lang":"en","text":"Return number of selected gamepads"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"gamepad","type":"integer","text":"The number of the gamepad"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The number of buttons on gamepad[_GAMEPAD]"}],"author":" Brian Flanagan","compatible":" aoz","content":"TOBF|"},{"name":"Gamepad Axes","descriptions":[{"lang":"en","text":"Return number of axes for selected gamepad"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"GAMEPAD","type":"integer","text":"The number of the gamepad"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The number of axes on gamepad[_GAMEPAD]"}],"author":" Brian Flanagan","content":"TODO|~~~||~~~||"},{"name":"Gamepad Axis","descriptions":[{"lang":"en","text":"Return the position of one of the axes of a gamepad"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"GAMEPAD","type":"integer","text":"The number of the gamepad"},{"lang":"en","name":"AXIS","type":"integer","text":"The number of the axis"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The position of the axis, from -1 to 1"}],"compatible":" aoz","content":"TOBF|"},{"name":"Gamepad trigger","descriptions":[{"lang":"en","text":"Return the position of one of the triggers of a gamepad"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"GAMEPAD","type":"integer","text":"The number of the gamepad"},{"lang":"en","name":"TRIGGER","type":"integer","text":"The number of the trigger"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The position of the trigger, from 0 to 1"}],"compatible":" aoz","content":"TOBF|"},{"name":" Gamepad Name$","descriptions":[{"lang":"en","text":" Return the brand name of the gamepad"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"PORT","type":"integer","text":"The number of the gamepad"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":" The name of the gamepad if connected, an empty string is no gamepad is connected"}],"compatible":" aoz","content":"TOBF|"},{"name":" Gamepad Vendor$","descriptions":[{"lang":"en","text":" Return the vendor code for the specified gamepad"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"GAMEPAD","type":"integer","text":"The number of the specified gamepad"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":" The vendor code for the specified gamepad, if connected, an empty string if specified gamepad NOT connected"}],"author":" Brian Flanagan","compatible":" aoz","content":"TOBF|"},{"name":" Gamepad Product$","descriptions":[{"lang":"en","text":" Return the product code for the specified gamepad"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"GAMEPAD","type":"integer","text":"The number of the gamepad"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":" The product code for the specified gamepad if connected, an empty string if specified gamepad NOT connected"}],"author":" Brian Flanagan","compatible":" aoz","content":"TOBF|"},{"name":"Gamepad Connected","descriptions":[{"lang":"en","text":"Test if a gamepad is connected to the computer"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"GAMEPAD","type":"integer","text":"The number of the gamepad"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if a gamepad is connected and working, False if not"}],"compatible":" aoz","content":"TOBF|"},{"name":"Gamepad Map Buttons","descriptions":[{"lang":"en","text":"Define a new mapping for the buttons of non-standard compliant gamepads. Doc to come."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"GAMEPAD","type":"integer","text":"The number of the gamepad"},{"lang":"en","name":"MAPS","type":"integers","text":"A list of numbers separated by commas defining the mapping"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"TOBF|"},{"name":"Gamepad Map Axes","descriptions":[{"lang":"en","text":"Define a new mapping for the axes of non-standard compliant gamepads. Doc to come."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"GAMEPAD","type":"integer","text":"The number of the gamepad"},{"lang":"en","name":"MAPS","type":"integers","text":"A list of numbers separated by commas defining the mapping"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"TOBF|"},{"name":"Gamepad Map Triggers","descriptions":[{"lang":"en","text":"Define a new mapping for the axes of non-standard compliant gamepads. Doc to come."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"GAMEPAD","type":"integer","text":"The number of the gamepad"},{"lang":"en","name":"MAPS","type":"integers","text":"A list of numbers separated by commas defining the mapping"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"TOBF|"}]},{"name":"Database Commands","id":1639692453998,"descriptions":[{"lang":"en","text":"Instructions and functions to manage database."}],"descriptions_file":[],"author":"Baptiste Bideaux","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Set DB Service","descriptions":[{"lang":"en","text":"Set the Database Service configuration"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]}]},{"name":"Dialog Commands","id":1639692454002,"descriptions":[{"lang":"en","text":"Instructions and functions to display and handle dialogs."}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Dialog Box","descriptions":[{"lang":"en","text":"Display dialogue box on screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"interface$","type":"string","text":""},{"lang":"en","name":"value","type":"integer","text":""},{"lang":"en","name":"parameters$","type":"string","text":""},{"lang":"en","name":"x","type":"integer","text":""},{"lang":"en","name":"y","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"To display a requester or dialogue box, the DIALOG BOX function is used to handle your Interface commands from the specified Interface string. This dialogue now waits for either an appropriate button to be selected, or until a specific period of time has elapsed. The system then returns to the AOZ Studio main program, returning the value of the button. The dialogue box can be quit at any time by pressing [Ctrl]+[C]. If this is done, a value of zero will be returned||The Interface$ parameter is a normal AOZ Studio string, containing the Interface program. This may be|followed by various optional parameters||The optional value parameter contains a value that is loaded straight into the internal variable array. It can then be accessed using the VA function, from the dialogue box, or requester||Parameter$ holds an optional string parameter which will be forwarded to the Interface program. It will be saved as|item 1 of the variable array (1 VA)||Finally, the optional coordinates x,y are given, to position the dialogue box on screen. These coordinates may be|overridden by a BAse command inside the Interface program, and this is explained later. Here are some examples|~~~|A$=A$+\"SetVar 1,'The answer is', set variable one to a message\"|A$=A$+\"SetVar0,42; variable zero is loaded with forty two\"|A$,A$+\"PRint 0,100,1 VA,2; print the message\"|A$=A$+\"PRint 0,110,0 VA #,2; print the answer\"|A$=A$+\"EXit; leave the interface program\"|Print Dialog Box(A$)|B$=B$+\"PRint 0,0,1 VA,2; PRint 0,10,0 VA #,2; EXit;\"|D=Dialog Box(B$,42,\"The Answer\")|D=Dialog Box(B$,42,\"The Answer\",100,100)|~~~|Please note that if the Interface program is to wait for user input, a RunUntil command must be included before the|final EXit, otherwise the dialogue box will jump directly to the main AOZ Studio program after the last|Interface program instruction. RunUntil is explained in detail below||The DIALOG BOX facility is only intended for simple requesters. To control the dialogue directly from an AMOS|Professional program, the DIALOG OPEN and DIALOG RUN commands must be used instead. These are fully|explained at the beginning of Chapter 9.3, which is devoted to advanced control panels||Creating a simple requester|If a large requester with a lot of graphics is to be generated, it can be very difficult to keep track of all of the|coordinates. You can simplify things enormously by entering all of the coordinates relative to the top left-hand|corner of the requester box||"},{"name":"Dialog Open","descriptions":[{"lang":"en","text":"Display dialogue box on screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""},{"lang":"en","name":"interface$","type":"string","text":""},{"lang":"en","name":"nVar","type":"integer","text":""},{"lang":"en","name":"buffer","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"The DIALOG OPEN command opens a \"communication channel\" to the new program, and loads it with a list of|Interface commands. If there are any problems, an appropriate error message will appear, and mistakes can be|located using a simple call to the error function EDIALOG, which is explained below||The parameters for a DIALOG OPEN instruction are given as follows: firstly, the number of the channel to be|opened, starting from 1. Providing that there is enough memory, you may open as many channels as you wish. A|string should be specified next, containing one or more Interface programs to be initialised. If this string contains|several programs, each routine should begin with a LAbel instruction and end with an EXit command||Normally AOZ Studio provides enough space to hold up to 17 different values in every Interface channel (0|VA to 16 VA). If more channels are needed, this array can be expanded via an optional nvar parameter, and each|extra variable will take up four bytes of memory. There is a final optional parameter that allocates bytes for an|internal memory buffer used by Interface programs. This array holds all of the information that is required to display dialogue boxes and selectors on screen. As a default, 1k is reserved for each channel that has been defined, but if the requirements are very complex, this value may have to increase. An error message will appear automatically if the current allocation is too small||Note that the DIALOG OPEN command only initialises the communication channel, and it does not start the|program running or generate any graphics on the screen. To accomplish this, the following function is used||"},{"name":"Dialog Close","descriptions":[{"lang":"en","text":"Display dialogue box on screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"This command closes one or more dialogue channels on the screen||"},{"name":"Dialog Run","descriptions":[{"lang":"en","text":"TODO! Display dialogue box on screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""},{"lang":"en","name":"label","type":"integer","text":""},{"lang":"en","name":"x","type":"integer","text":""},{"lang":"en","name":"y","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0 in this version"}],"compatible":" notimplemented","content":"This command closes one or more dialogue channels on the screen||"},{"name":"Dialog","descriptions":[{"lang":"en","text":"Return status of an open dialogue box"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0 in this version"}],"compatible":" notimplemented","content":"This function provides a simple method of testing whether or not an option from a control panel has been selected.|Simply specify the number of the open channel that is to be tested.|After this function has been performed, one of the following values for the tested button will be returned:|- <0 A negative value means that the current channel is inactive, either because it has not been|assigned to a dialogue box, or because the user has left the box via an exit button.|- =0 A value of zero indicates that there has been no user-input since the previous test.|- >0 If a positive value is returned, it indicates the number of the last button that was|selected by|the user. In the case of edit zones, a value will only be returned when the [Return] key is|pressed.||Once the value of the contents held by the DIALOG function has been checked, it will be re-set to zero.|Here is an example of a simple check:|~~~|Do|D=Dialog(1)|Exit If D<0|If D > 0|On D Gosub BUTTON1,BUTTON2|End If|Wait Vbl|Loop|~~~||"},{"name":"VDialog","descriptions":[{"lang":"en","text":"Reserved variable. Assign or read an Interface value"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""},{"lang":"en","name":"variableIndex","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0 in this version"}],"compatible":" notimplemented","content":"This function provides a simple method of testing whether or not an option from a control panel has been selected.|Simply specify the number of the open channel that is to be tested.|After this function has been performed, one of the following values for the tested button will be returned:|- <0 A negative value means that the current channel is inactive, either because it has not been|assigned to a dialogue box, or because the user has left the box via an exit button.|- =0 A value of zero indicates that there has been no user-input since the previous test.|- >0 If a positive value is returned, it indicates the number of the last button that was|selected by|the user. In the case of edit zones, a value will only be returned when the [Return] key is|pressed.||Once the value of the contents held by the DIALOG function has been checked, it will be re-set to zero.|Here is an example of a simple check:|~~~|Do|D=Dialog(1)|Exit If D<0|If   0|On D Gosub BUTTON1,BUTTON2|Wait Vbl|Endif|Loop|~~~||"},{"name":"VDialog$","descriptions":[{"lang":"en","text":"Reserved variable. Assign or read an Interface string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""},{"lang":"en","name":"variableIndex","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"\"\" in this version"}],"compatible":" notimplemented","content":"This function provides a simple method of testing whether or not an option from a control panel has been selected.|Simply specify the number of the open channel that is to be tested.|After this function has been performed, one of the following values for the tested button will be returned:|- <0 A negative value means that the current channel is inactive, either because it has not been|assigned to a dialogue box, or because the user has left the box via an exit button.|- =0 A value of zero indicates that there has been no user-input since the previous test.|- >0 If a positive value is returned, it indicates the number of the last button that was|selected by|the user. In the case of edit zones, a value will only be returned when the [Return] key is|pressed.||Once the value of the contents held by the DIALOG function has been checked, it will be re-set to zero.|Here is an example of a simple check:|~~~|Do|D=Dialog(1)|Exit If D<0|If   0|On D Gosub BUTTON1,BUTTON2|Wait Vbl|Endif|Loop|~~~||"},{"name":"RDialog","descriptions":[{"lang":"en","text":"Read the status of a zone or button"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""},{"lang":"en","name":"button","type":"integer","text":""},{"lang":"en","name":"object","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0 in this version"}],"compatible":" notimplemented","content":"This function is used to read the position of a particular button or selector. Specify the number of an open Interface channel, and then give the number of the button or zone to be tested. There is also an optional parameter which can be specified to check one of several objects that have been assigned to a current zone number. If this object number is omitted, then the status of the first object defined in the current zone number will be returned. Object numbers are arranged according to the order in which they have been defined in the Interface program, so the first button has an object number of zero, the second will be read as 1, and so on||The result returned by the RDIALOG function depends on the type of zone being scrutinised. In the case of a simple|button, its current value will be given, but there are special numerical edit zones (explained later) which will return a|new value entered by the user. If a text zone is checked in this way, a result of zero will given, and the RDIALOG$|function should be used instead. This is explained next||"},{"name":"RDialog$","descriptions":[{"lang":"en","text":"Read the status of a zone or button"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""},{"lang":"en","name":"button","type":"integer","text":""},{"lang":"en","name":"object","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0 in this version"}],"compatible":" notimplemented","content":"Use this function to return a string of text Assigned to a zone. If the selected zone does not contain any text, an empty string will be presented. Please see the Interface EDit command for more details||"},{"name":"EDialog","descriptions":[{"lang":"en","text":"Find an error in an Interface program"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0 in this version"}],"compatible":" notimplemented","content":"Whenever an error occurs in an Interface program, its position can be found with a quick call to the EDIALOG function. The relevant section of the Interface string will be displayed on screen, enabling you to discover what has gone wrong. In practice, the most common mistakes are caused by missing or wrongly-used semi-colon characters!\"||Here is a small error handler that may be useful if included in your own programs|~~~|On ErrOr Goto TRAP: Rem Add this line before a DIALOG OPEN command|...: Rem The rest of your program goes here|TRAP: Print Mid$(DB$,Edialog,80) : Wait Key : End : Rem Error handler|~~~||"},{"name":"Dialog Clr","descriptions":[{"lang":"en","text":"Clear a dialogue box"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"The DIALOG CLR instruction erases all zones and shuts down the dialogue box completely, leaving the specified channel open. The Interface program can now be re-run from the beginning, using a further call to the DIALOG RUN command. As always, if the background area has been saved using the SA option, it will be restored to its|original position||"},{"name":"Dialog Update","descriptions":[{"lang":"en","text":"Update a zone of a dialog box"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""},{"lang":"en","name":"zone1","type":"integer","text":""},{"lang":"en","name":"zone2","type":"integer","text":""},{"lang":"en","name":"zoneXXX","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"This instruction enables AOZ Studio programs to force the Interface to re-draw a zone on the screen. It is especially useful for selectors, which often need to interact directly with the main program. These can include file selectors that need to read a new search path and update the file list, as well as EDit routines that must load a selection window with a new value entered by the user||The DIALOG UPDATE parameters are given in the following order: first the channel number of an active dialogue|channel to be updated. This is followed by the number of the zone to be affected. There are also three parameters|held inside their own set of square brackets, and the effect of these parameters varies, depending on the type of the|zone. Parameter I affects any of the different zone types, whereas Parameters 2 and 3 affect active lists and sliders|only. Here is a table of the possibilities|~~~|Parameter 1|Button \t\tEnters a new status position|Active \t\tList Sets the number of the first string displayed|Slider \t\tMoves the slider|Digit \t\tReplaces the existing number zone|Edit \t\tInserts a new string into the edit zone|~~~|~~~|Parameter 2|Active List \tChanges the currently selected string|Slider \t\tChanges the size of the slider window|~~~|~~~|Parameter 3|Active List \tChooses the last element of the array that can be selected. Normally this parameter is equal to the size of the array, but it can be restricted for certain applications.|Slider \t\tChanges the \"total\" parameter|~~~||"},{"name":"Dialog Freeze","descriptions":[{"lang":"en","text":"Stop dialogue channel input"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"This command is used to freeze all input from one or more active dialogue channels. The number of a single dialogue routine that is to be suspended is specified in square brackets. If this number is omitted all current channels will be frozen||"},{"name":"Dialog Unfreeze","descriptions":[{"lang":"en","text":"Restart dialogue channel input"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"Use this instruction to re-activate one or more dialogue channels from the point at which they were frozen||"},{"name":"Resource Bank","descriptions":[{"lang":"en","text":"Select a bank to be used for resources"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bankIndex","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"This command is used to tell AOZ Studio in which bank the resources to be used by Interface programs are kept. The number parameter holds the number of the memory bank to be allocated. If this bank does not exist, the Editor's internal resource bank will be used as a default. This means that after this command has been called, you can return to the Editor resources by employing a dummy value, such as zero. Here is an example:|~~~|Load \"Resource.Abk\",16 : Rem This can be any filename|Resource Bank 16: Rem Set resources to Bank 16|~~~||"},{"name":"Resource$","descriptions":[{"lang":"en","text":"Read a message from the Resource Bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"messageIndex","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"\"\" in this version"}],"compatible":" notimplemented","content":"The RESOURCE$ function returns one of the messages from the current Resource Bank, to be used by an AOZ Studio program. If the bank has not been defined, the standard Editor messages will be made available from|the Configuration file||Each national grouping is provided with its own set of messages in the appropriate language, and these messages can|be used to generate multi-language programs. The message number parameter enters the number of the message.|Here is an example|~~~|For A=1 To 7|Print Resource$(A)|Next A|~~~|The following list shows the strings related to the various numbers|~~~|Number \t\t\tMessage|>0 \t\t\tString from the Resource bank|0 \t\t\tFull pathname of APSystem folder|<0 \t\t\tConfiguration system strings, as follows:|-1 to -9 \t\tDefault file names|-10 to -36 \t\tAll 26 extensions|38, -38 \t\tCommunication ports|-40 \t\t\tDefault cursor flashing|2001 to -2044 \t\tMiscellaneous strings used by Editor|-2045 to -2049 \t\tEditor system files|~~~||"},{"name":"Resource Screen Open","descriptions":[{"lang":"en","text":"Open a screen using the resource settings"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":""},{"lang":"en","name":"width","type":"integer","text":""},{"lang":"en","name":"height","type":"integer","text":""},{"lang":"en","name":"flash","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"This instruction opens a screen using the settings that are stored in the Resource Bank. These screen settings include|the number of colours, the resolution and the entire colour palette||The parameters are given in the following order: the number of the screen to be defined from zero to 7, the width of|this screen in pixels and the height of the screen in lines. Finally a simple flag is set for the flash feature, with a value of zero to turn off the flash, or any other appropriate value to assign the flash effect to that colour index|number||The new screen will be installed with the colour palette held in the Resource Bank||The following example opens a screen using the settings from the internal Resource Bank, just like the Editor screen, where the flashing colour is index number 2|~~~|Resource Screen Open 0,640,200,2|~~~||"},{"name":"Resource Unpack","descriptions":[{"lang":"en","text":"Unpack an image from the Resource Bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":""},{"lang":"en","name":"x","type":"integer","text":""},{"lang":"en","name":"y","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"This instruction opens a screen using the settings that are stored in the Resource Bank. These screen settings include|the number of colours, the resolution and the entire colour palette||The parameters are given in the following order: the number of the screen to be defined from zero to 7, the width of|this screen in pixels and the height of the screen in lines. Finally a simple flag is set for the flash feature, with a value of zero to turn off the flash, or any other appropriate value to assign the flash effect to that colour index|number||The new screen will be installed with the colour palette held in the Resource Bank||The following example opens a screen using the settings from the internal Resource Bank, just like the Editor screen, where the flashing colour is index number 2|~~~|Resource Screen Open 0,640,200,2|~~~||"},{"name":"ZDialog","descriptions":[{"lang":"en","text":"Return the Z position of a dialog (?)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":""},{"lang":"en","name":"param1","type":"integer","text":""},{"lang":"en","name":"param2","type":"integer","text":""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0 in this version"}],"compatible":" notimplemented","content":"TODO|~~~||~~~||"}]},{"name":"Display and Renderer","id":1639692454021,"descriptions":[{"lang":"en","text":"Instructions and functions to manage the display and the renderer system"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Freeze","descriptions":[{"lang":"en","text":"Prevent the display to be updated while keeping the application running in the back"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"This instruction completely removes the call to the renderer at the end of the loop of your application.|It will continue to run in the back with the display staying what it was when this instruction was called.||"},{"name":"Unfreeze","descriptions":[{"lang":"en","text":"Restore display update after \"Freeze\" has been used."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"restores the redenrer drawing process if it has been freeze previously..|"},{"name":"View","descriptions":[{"lang":"en","text":"If \"Auto View Off\" has been used, update the display immediately"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"When the AUTO VIEW OFF instruction is engaged, VIEW can be used to display any changes that have been made to the current screen settings, and they will be displayed at the next vertical blank period following the VIEW command.||"},{"name":"Auto View Off","descriptions":[{"lang":"en","text":"Toggle viewing mode off"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"When SCREEN OPEN is used to create a new screen, the screen is usually displayed at once. This may be|inconvenient during the initialisation stages of a program, in which case the AUTO VIEW OFF command can be|used to disable this automatic display system. Screens can then be updated at a convenient point, using the VIEW|instruction. To re-activate the automatic screen updating system, use the AUTO VIEW ON command.||"},{"name":"Auto View On","descriptions":[{"lang":"en","text":"Toggle viewing mode on"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"When SCREEN OPEN is used to create a new screen, the screen is usually displayed at once. This may be|inconvenient during the initialisation stages of a program, in which case the AUTO VIEW OFF command can be|used to disable this automatic display system. Screens can then be updated at a convenient point, using the VIEW|instruction. To re-activate the automatic screen updating system, use the AUTO VIEW ON command.||"},{"name":"Update Off","descriptions":[{"lang":"en","text":"Turn off the automatic Object re-drawing system"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"UPDATE OFF turns off the automatic re-drawing system, so that any Bob or Sprite commands will appear to be completely ignored. In actual fact, they are still going on invisibly, in the background.|Any other graphical command (like drawing in the screens, moving or rotating them) will be preserved: Update Off only affects graphical objects.||"},{"name":"Update On","descriptions":[{"lang":"en","text":"Turn on the automatic Object re-drawing system"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"UPDATE ON returns the updating system back to the original automatic setting after Update Off has been used. Sprites and Bobs will move again on the screen.||"},{"name":"Update Every","descriptions":[{"lang":"en","text":"Fix the rate of the automatic update system"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"delay","type":"integer","text":"Time, in 1/1000th of second (PC mode) and 1/50th of seconds (Amiga / retro emulations) between the update of the display"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"amos","content":"The UPDATE EVERY command slows down the updating process, so that even the largest Object can be re-drawn during a single screen update.|The animation system is regulated by this process, once again providing smooth movement. After the UPDATE EVERY command, simply specify the number of vertical blank periods between|each screen update, in 50ths of a second. Begin your timing changes with a value of two, and increase the value by|one unit at a time until the animation becomes smooth.||One useful effect of using UPDATE EVERY is to reserve more time for AOZ to execute the main|program. In fact, with careful use of this instruction, it is possible to speed up programs by as much as one third,|and still maintain excellent animation.|"},{"name":"Update","descriptions":[{"lang":"en","text":"Force an update of the display. Will only work in \"Auto Mode Off\" mode."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The UPDATE commands are a combination of the BOB UPDATE and SPRITE UPDATE families, and they are|used to re-draw all objects on the screen in a single operation.||UPDATE displays any objects which have moved since the last update. You are recommended to add a WAIT VBL|instruction to ensure a smooth effect.||"},{"name":"Display Width","descriptions":[{"lang":"en","text":"Return the width of the display canvas in PC mode"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"The width of the display is defined in the manifest of the application. You can also use the #displayWidth tag at the beginning of your application to set the size of the canvas without editing the manifest.|"},{"name":"Display Height","descriptions":[{"lang":"en","text":"Return the width of the display canvas in PC mode"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The height of the display is defined in the manifest of the application. You can also use the #displayHeight tag at the beginning of your application to set the size of the canvas without editing the manifest.|"}]},{"name":"Meta Audio Video","id":1639692454028,"descriptions":[{"lang":"en","text":"Some commands to simplify the coding."}],"descriptions_file":[],"author":"Baptiste Bideaux","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Set Display","descriptions":[{"lang":"en","text":"Set the resolution of the display in pixels."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"width","type":"integer","text":"Width of the display in pixel."},{"lang":"en","name":"height","type":"integer","text":"Height of the display in pixel."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Draw Image","descriptions":[{"lang":"en","text":"Draw an image loaded with \"Load Asset\" command, in the current screen, with a specific size"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"image","type":"index","text":"Index of Image."},{"lang":"en","name":"x","type":"integer","text":"Position X on the current Screen in pixel."},{"lang":"en","name":"y","type":"integer","text":"Position Y on the current Screen in pixel."},{"lang":"en","name":"width","type":"integer","text":"Width on the current Screen in pixel."},{"lang":"en","name":"height","type":"integer","text":"Height on the current Screen in pixel."}],"exceptions":[{"lang":"en","text":"Image not loaded"}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Audio Loop On","descriptions":[{"lang":"en","text":"Repeat the playing at the end of audio."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"audio","type":"index","text":"Index of audio."}],"exceptions":[{"lang":"en","text":"Audio not loaded."}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Audio Loop Off","descriptions":[{"lang":"en","text":"Stop the repeat the playing at the end of audio."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"audio","type":"index","text":"Index of audio."}],"exceptions":[{"lang":"en","text":" Audio not loaded."}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Play Audio","descriptions":[{"lang":"en","text":"Play an audio file loaded with the \"Load Asset\" command."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"audio","type":"index","text":"Index of audio."}],"exceptions":[{"lang":"en","text":"Audio not loaded."}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Stop Audio","descriptions":[{"lang":"en","text":"Stop an audio loaded with the \"Load Asset\" command."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"audio","type":"index","text":"Index of audio."}],"exceptions":[{"lang":"en","text":"Audio not loaded."}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Pause Audio","descriptions":[{"lang":"en","text":"Pause an audio loaded with the \"Load Asset\" command."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"audio","type":"index","text":"Index of audio."}],"exceptions":[{"lang":"en","text":"Audio not loaded."}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Volume Audio","descriptions":[{"lang":"en","text":"Set the volume of an audio loaded with the \"Load Asset\" command."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"audio","type":"index","text":"Index of audio."},{"lang":"en","name":"volume","type":"integer","text":"Value of the volume between 0(mute)-100(full)"}],"exceptions":[{"lang":"en","text":"Audio not loaded."}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Time Audio","descriptions":[{"lang":"en","text":"Set the position of an audio loaded with the \"Load Asset\" command."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"audio","type":"index","text":"Index of audio."},{"lang":"en","name":"time","type":"integer","text":"Value of the timer in seconds"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Time Audio","descriptions":[{"lang":"en","text":"Return the position of audio"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"audio","type":"index","text":"Index of audio."}],"exceptions":[{"lang":"en","text":"Audio not loaded."}],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"number","text":"The position of audio in seconds."}],"compatible":" aoz"},{"name":"Video Loop On","descriptions":[{"lang":"en","text":"Repeat the playing at the end of video loaded with the \"Load Asset\" command."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"video","type":"index","text":"Index of video."}],"exceptions":[{"lang":"en","text":"Video not loaded"}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Video Loop Off","descriptions":[{"lang":"en","text":"Stop Repeat the playing at the end of video"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"video","type":"index","text":"Index of video."}],"exceptions":[{"lang":"en","text":"Video not loaded"}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Play Video","descriptions":[{"lang":"en","text":"Play a video loaded with the \"Load Asset\" command"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"video","type":"index","text":"Index of video."}],"exceptions":[{"lang":"en","text":"Video not loaded"}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Stop Video","descriptions":[{"lang":"en","text":"Stop a video loaded by the \"Load Asset\" command."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"video","type":"index","text":"Index of video."}],"exceptions":[{"lang":"en","text":"Video not loaded"}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Pause Video","descriptions":[{"lang":"en","text":"Pause a video loaded with the \"Load Asset\" command."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"video","type":"index","text":"Index of video."}],"exceptions":[{"lang":"en","text":"Video not loaded"}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Volume Video","descriptions":[{"lang":"en","text":"Set the video volume"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"video","type":"index","text":"Index of video."},{"lang":"en","name":"volume","type":"integer","text":"Value of the volume between 0(mute)-100(full)"}],"exceptions":[{"lang":"en","text":"Video not loaded"}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Time Video","descriptions":[{"lang":"en","text":"Set the position of video in seconds"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"video","type":"integer","text":"Index of video."},{"lang":"en","name":"time","type":"integer","text":"Value of the timer in seconds"}],"exceptions":[{"lang":"en","text":"Video not loaded"}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Time Video","descriptions":[{"lang":"en","text":"Return the position of video in seconds"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"video","type":"index","text":"Index of video."}],"exceptions":[{"lang":"en","text":"Video not loaded"}],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"number","text":"The position of video in seconds."}],"compatible":" aoz"},{"name":"Draw Video","descriptions":[{"lang":"en","text":"Draw a video loaded with the \"Load Asset\" command on the current screen with a specific size"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"video","type":"index","text":"Index of video."},{"lang":"en","name":"x","type":"integer","text":"Position X of the video in pixel."},{"lang":"en","name":"y","type":"integer","text":"Position Y of the video in pixel."},{"lang":"en","name":"width","type":"integer","text":"Width of the video in pixel."},{"lang":"en","name":"height","type":"integer","text":"Height of the video in pixel."}],"exceptions":[{"lang":"en","text":"Video not loaded."}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Video Bob","descriptions":[{"lang":"en","text":"Assign a video loaded with the \"Load Asset\" command as a Bob Image"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"videon","type":"index","text":"Index of video."},{"lang":"en","name":"bobindex","type":"index","text":"Index of Bob image."}],"exceptions":[{"lang":"en","text":"Video not loaded."}],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Show Video","descriptions":[{"lang":"en","text":"Show the video in fullscreen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"video","type":"index","text":"Index of video."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Hide Video","descriptions":[{"lang":"en","text":"Hide the video"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"video","type":"index","text":"Index of video."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"}]},{"name":"Files","id":1639692454040,"descriptions":[{"lang":"en","text":"Functions and instructions to handle file access"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Load Text","descriptions":[{"lang":"en","text":"Load an ascii file into a string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the text to load"},{"lang":"en","name":"string$","type":"string","text":"The string in which to load"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This instruction loads a text into a string. The format of the text should be UTF-8. This instruction loads the text in one block, without affecting cariage return.|~~~|// A very simple text viewer|file$ = Dir First$( \"*.png\" )|text$ = \"\"|While file$ <> \"\"|Load Text file$, text$|Print text$|Wait Key|file$ = Dir Next$|Cls|Wend|~~~|"},{"name":"Save Text","descriptions":[{"lang":"en","text":"Save the content of a string as an ASCII file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the image to save"},{"lang":"en","name":"string$","type":"string","text":"the string containing the text to save"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This instruction saves the content of the string in UTF-8, all in one block. It does not interfere with cariage returns.|"},{"name":"Load Image","descriptions":[{"lang":"en","text":"Load an image into a screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the image to load"},{"lang":"en","name":"index","type":"index","text":"Index of the screen to create. If ommited the image will be loaded in the current screen"},{"lang":"en","name":"tags$","type":"string","text":"List of tags indicating how to load the image."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This instruction loads an image into a screen.||If you do not specify the index of a screen, then the image is loaded in the current screen.||If you specify it, AOZ weill first check if the screen exists, if yes it will load the image into it, if not it will create the new screen at the dimensions of the image.||You can use tags to specify how to load the image:||- Horizontal alignment tags: #left #center #right|- Vertical alignment tags: #top:, #middle, #bottom|- Resize the image to fit the screen dimensions:  #fit|- Does not resize the image (default behavior): #paste||This example demonstrates the powert of the Load Image instruction...|~~~|// A very simple image viewer|Screen Open 0, 1920, 1080|file$ = Dir First$( \"*.png\" )|While file$ <> \"\"|Load Image file$, 0, \"#fit\"|Wait Key|file$ = Dir Next$|Wend|~~~||"},{"name":"Save Image","descriptions":[{"lang":"en","text":"Save an image out of a screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the image to save"},{"lang":"en","name":"index","type":"index","text":"Index of the screen to save. If ommited the image will be saved from the current screen"},{"lang":"en","name":"*compression#","type":"float","text":"Compression of the image if the type of image authorises it (jpg)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"The SAVE IMAGE command saves the current screen as a picture file with the selected filename onto disc.||This version AOZ Studio supports PNG and JPG, this type being determined by the extension of the filename (for JPP you can also save as \".jpeg\").||You can indicate the compression ratio, from 0 to 1 with the optional parameter, the default value being 0.8...|~~~||// Converts all the PNG images of a directory to JPG|file$ = Dir First$( \"*.png\" )|While file$ <> \"\"|Screen Close 0|Load Image file$, 0|file$ = Left$( file, 0, Len( file$ - 3 ) ) + \"jpg\"|Save Image file$, 0|file$ = Dir Next$|Wend|~~~|"},{"name":"Load","descriptions":[{"lang":"en","text":"Load a previously saved memory bank, or a set of banks"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the bank(s) to load"},{"lang":"en","name":"index","type":"index","text":"Index of the bank to load into. If not specified, the bank will be loaded at the same number it was saved"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Remember it has been suggested that memory bank filenames should have the following extensions, acting as reminders for human eyes, and identification flags for computer searches:|- \"filename.Abk\" to indicate a single AOZ Studio memory bank|- \"filename.Abs\" for a file containing a group of several memory banks.|These identifiers can be very useful when employed with certain instructions, as follows:|~~~|Rem Load an Object bank from current disc|Load Fsel$(\"*.Abk\",\" \",\"Load an Object bank\")|List Bank : Rem List bank details on screen|~~~|As can be seen, the LOAD command will load the selected memory bank directly from the appropriate disc file. An|optional destination bank number can be added after the filename to be loaded, but if it is omitted, or given the|number zero, data will be re-loaded into the same bank numbers from which it was originally saved. Any current|information in these existing banks will be completely lost!\"|Object and Icon files are treated slightly differently. If the bank number is greater than zero, any additional images will be added to the end of the existing bank of images.||"},{"name":"BLoad","descriptions":[{"lang":"en","text":"Load a binary file into a bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the binary file to load"},{"lang":"en","name":"address","type":"integer","text":"Bank number (if below 100000) or memory address of the data to save. Use the Start() function to obtain the address."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The BLOAD instruction loads a file of binary data into memory. It does not alter the data in any way.|To load this data into a memory bank, the bank must first be reserved, otherwise an error will be generated. Also note that files to be loaded must not be any larger than the reserved bank, or other areas of memory will be corrupted.|"},{"name":"BSave","descriptions":[{"lang":"en","text":"BSave, short for Binary Save, saves the binary content of a block of memory. This instruction is normally used for saving the content of memory banks."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the binary file to create"},{"lang":"en","name":"start","type":"integer","text":"Memory address of the data to save. Use the Start() function to obtain the address"},{"lang":"en","name":"end","type":"integer","text":"End of the memory zone to save. Use the Start() function to obtain the address and add the desired length"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"There a 3 different syntaxes for BSave. These are shown is the following example.|~~~|Reserve as Data 5, 100  // Define memory bank number 5, 100 bytes long.|Length=80|Bsave \"Test\", 5    \t\t// Save all of memory bank 5 to file \"Test\"|Bsave \"Test\", Start (5) to Start(5) + 39 // Save the first 40 bytes of bank 5.|Bsave \"Test\", Start (5), Length   // Save the first 80 (Length) bytes of memory bank 5|~~~|At present, BSave saves the data locally to the browser cache. The difference between this|file and a file saved as a normal memory bank is that while SAVE causes a special bank header to be written,|containing information about the bank, this header is not written for a file when BSAVE is used. This means that|LOAD cannot be used for this type of file. It is also not suitable for Object banks.|"},{"name":"Save","descriptions":[{"lang":"en","text":"Saves anything to a file, using the most appropriate format, based on the file extension"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the file to create"},{"lang":"en","name":"index","type":"index","text":"Index of the thing to save, AOZ will guess from the file extension what to save."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"If a bank has been created using RESERVE, or some screen Objects have been defined with a command such as GET BOB, the new data can be saved onto a suitable disc in one of two ways.||When the SAVE command is followed by a string containing a filename, all current memory banks will be saved|into a single large file, bearing that name. The filename can be anything at all, but it is common practice to add the \".Abk\" extension at the end, to remind yourself that this is an AOZ Studio memory bank. Similarly, an|.Abs extension is used to indicate a file containing a group of several memory banks.||By adding an optional bank number after the filename, only that selected bank will be stored in the named file onto disc.||Here is an example of an instant image-bank generator:|~~~|N=1 : Rem Set number of first new image to create|S=1 : Rem Set size of image*16|Rem Create images in bank one|For G=0 To 4|Rem Draw the images|Ink G+1 : Circle S*7,S*7,S*7 : Paint S*8,S*8|Ink 0: Ellipse S*4,S*5,S*1,5*2 : Paint S*4,S*5|Ellipse S*1 0,S*5,S,S*2 : Paint S*10,S*5|Ellipse S*7,S*10,S*5,S*3 : Ellipse S*7,S*9,S*4,S : Paint S*1 1,S*1|Ink G+1 : Bar S*3,S*7 To S*13,S*9|Rem Now grab them as Objects|Get Bob G+N,0,0 To S*16-1 ,S*16-1|Rem Clear them from the screen|Cls 0,0,0 To S*16,S*16|Next G|F$=Fsel$(\"*.Abk\",\" \",\"Save your images\")|Rem Save Objects in bank 1|If F$<>0|Save F$,1|End If|~~~|"},{"name":"Save Bank","descriptions":[{"lang":"en","text":"Save a memory bank to a file. This file can later be loaded with \"Load Bank\""}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the file to create"},{"lang":"en","name":"index","type":"index","text":"Index of the first bank to save"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"aoz, stos, amos","content":"If a bank has been created using RESERVE, or some screen Objects have been defined with a command such as GET BOB, the new data can be saved onto a suitable disc in one of two ways.||When the SAVE command is followed by a string containing a filename, all current memory banks will be saved|into a single large file, bearing that name. The filename can be anything at all, but it is common practice to add the \".Abk\" extension at the end, to remind yourself that this is an AOZ Studio memory bank. Similarly, an|.Abs extension is used to indicate a file containing a group of several memory banks.||By adding an optional bank number after the filename, only that selected bank will be stored in the named file onto disc.||Here is an example of an instant image-bank generator:|~~~|N=1 : Rem Set number of first new image to create|S=1 : Rem Set size of image*16|Rem Create images in bank one|For G=0 To 4|Rem Draw the images|Ink G+1 : Circle S*7,S*7,S*7 : Paint S*8,S*8|Ink 0: Ellipse S*4,S*5,S*1,5*2 : Paint S*4,S*5|Ellipse S*1 0,S*5,S,S*2 : Paint S*10,S*5|Ellipse S*7,S*10,S*5,S*3 : Ellipse S*7,S*9,S*4,S : Paint S*1 1,S*1|Ink G+1 : Bar S*3,S*7 To S*13,S*9|Rem Now grab them as Objects|Get Bob G+N,0,0 To S*16-1 ,S*16-1|Rem Clear them from the screen|Cls 0,0,0 To S*16,S*16|Next G|F$=Fsel$(\"*.Abk\",\" \",\"Save your images\")|Rem Save Objects in bank 1|If F$<>0|Save Bank F$,1|End If|~~~||"},{"name":"DFree","descriptions":[{"lang":"en","text":"Returns the amount of free space of the disc pointed to by the current path"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The amount of free space"}],"compatible":" aoz, amos","content":"This simple function returns the amount of free space remaining on the current disc (pointed by the current directory), measured in bytes.|"},{"name":"MkDir","descriptions":[{"lang":"en","text":"Creates a new directory"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"integer","text":"Path to the new directory to create"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This makes a new folder on the current disc, and gives it the filename of your choice. For example:|~~~|Mkdir \"D:/Images/Marathonman\"|Dir \"D:/Images/Marathonman\"|~~~||"},{"name":"Open Random","descriptions":[{"lang":"en","text":"Open a random access file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"Number of the channel"},{"lang":"en","name":"path$","type":"string","text":"Path to the file to open"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Random access files are extremely useful simple text files containing fornmatted data in a similar fashion to CSV files.||They allow the programmer to access data stored on a disc in any random order. A random|access file is made up of units of data called \"records\", and each record has its own identification number. Every|record can be split up into as many smaller sections as required, with every section becoming a \"field\". Each field is|used to hold a single item of data.||The main difference between sequential files and random access files is that you must tell AOZ Studio the maximum size of a field in advance, before you can make use of it.||A field can hold many forms of data, like a password, an invoice number or even a literary quotation. Supposing|you want to create an electronic phone book. You could choose the following fields, with the following maximum|number of characters in each:|~~~|Field \t\tMax length|SURNAME$ \t20|F1RSTNAME$ \t15|TEL$ \t\t10|~~~|Once the fields have been planned, the structure for your electronic database can be set up using the following commands:|Open Random, Filed, Get and Put...||~~~|Open Random 1,\"mydata.rnd\"|~~~||"},{"name":"Open In","descriptions":[{"lang":"en","text":"Open a file for input only"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"Number of the input channel"},{"lang":"en","name":"path$","type":"string","text":"Path to the file to open"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos, stos","content":"Use this command to prepare a file so that data may be read from it. If the filename does not already exist, AOZ Studio will report a \"File not found\" error.||Example:|~~~|Open In 1,\"my_file.txt\"|~~~||"},{"name":"Open Out","descriptions":[{"lang":"en","text":"Open a file for ouput only. The file is replaced by the new one."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"Number of the output channel"},{"lang":"en","name":"path$","type":"string","text":"Path to the file to save"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use this command to open a sequential file, ready for data to be added to its end. Give the channel number and filename, as explained above. If the file already exists, it will be erased.|"},{"name":"Append","descriptions":[{"lang":"en","text":"Open a file for output, and add content at the end of it"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"Number of the channel"},{"lang":"en","name":"path$","type":"string","text":"Path to the file to open"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This works like OPEN OUT, but it allows you to add to your files at any time after they have been defined.|If the filename already exists, your new data will be appended to it, in other words it will be added to the end of that file.||"},{"name":"Assign","descriptions":[{"lang":"en","text":"Assign a name to a file or device"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"name$","type":"string","text":"The name to assign"},{"lang":"en","name":"path$","type":"string","text":"The path or drive name to assign it to"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"As the AOZ filesystem complies with the Linux notion of Drives, you can create simulated drives in your application taht will in fact point to a folder on yoru machine.|~~~|// This code|Load Image \"C:\\Graphics\\aoz.png\", 0|Wait Key||// Has the same result as this one...|Assign \"TheGraphics: To \"C:\\Graphics\"|Load Image \"TheGraphics:aoz.png\", 0|~~~|"},{"name":"Field$","descriptions":[{"lang":"en","text":"Define a record structure for a random access file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"The index of the channel"},{"lang":"en","name":"length","type":"integer","text":"The length of the first field"},{"lang":"en","name":"field$","type":"variable","text":"The string variable to asign it to"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"FIELD$ should be used immediately after OPEN RANDOM to define a record that will be used for a random access|file. After selecting the channel number, give the maximum number of|characters you will cater for in a field, followed by its name, then repeat the process as necessary.||For example:|~~~|Field 1,20 As SURNAME$,15 As FIRSTNAME$,10 As TEL$|~~~|You can now place some records in the strings that have been set up by the FIELD command, like this:|~~~|SURNAME$=\"Professional\"|FIRSTNAME$=\"AMOS\"|TEL$=\"0625859333\"|~~~|"},{"name":"Put","descriptions":[{"lang":"en","text":"Output a record to a random access file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"The index of the channel with the open file"},{"lang":"en","name":"recordNumber","type":"integer","text":"The number of the record to output"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Once a record has been placed in a string, it can be moved from the computer's memory into a record number of your random access file.|If you were still using channel 1, your first record would be put into the random access file like this:|~~~|Put 1,1|~~~|The next record will become number 2, and so on until you fill up your telephone book. Here is a simple working example. When you have created enough records, type in \"exit\" when prompted to enter another name.|~~~|Open Random 1,\"ADDRESSES.rnd\"|Field 1,25 As NAME$,12 As TEL$|INDEX=1|Do|Input \"Enter a name:;NAME$|If NAME$=\"exit\" Then Exit|Input \"Enter the phone number:;TEL$|Put 1,INDEX|Inc INDEX|Loop|Close 1|~~~|"},{"name":"Get","descriptions":[{"lang":"en","text":"Read a record from a random access file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"The index of the channel with the open file"},{"lang":"en","name":"recordNumber","type":"integer","text":"The number of the record to read"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This instruction reads a record stored in a random access file, after being told which channel to use and the number of the record to read. To read the first record you would use this:|~~~|Get 1,1|~~~|GET then loads this record into your field strings, and these strings may be manipulated as you like. Obviously you can only GET record numbers that have been PUT onto the disc.||Now try this example:|~~~|Open Random 1,\"ADDRESSES.rnd\"|Field 1,25 As NAME$,12 As TEL$|Do|Input \"Enter Record Number: \";INDEX|If INDEX=0 Then Exit|Get 1,INDEX|Print NAME$ : Print TEL$|Loop|Close 1|~~~|"},{"name":"LOF","descriptions":[{"lang":"en","text":"Return the length of a \"Out\", \"In\" or \"Random access\" channel"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"Index of the channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"LOF returns the length of an open file.||"},{"name":"EOF","descriptions":[{"lang":"en","text":"Indicates if the file pointer of a channel is located at the end of the file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"Index of the channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the file pointer has reached the end, False if not"}],"compatible":" aoz, stos, amos","content":"This tests to see if the end of a file has been reached at the current reading position, returning true for yes and false if this has not happened.||"},{"name":"POF","descriptions":[{"lang":"en","text":"Set the position of the file pointer in an open channel (type must be \"Out\" ort \"Append\")"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"Index of the channel"},{"lang":"en","name":"position","type":"integer","text":"New position of the file pointer"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This changes the current reading or writing position of an open file. For example, the following line sets the read/write position to 1,000 characters past the start of the file:|~~~|Pof(1)=1000|~~~|Because disc drives are inherently random, this may be used to provide a crude form of random access with|sequential files.||"},{"name":"POF","descriptions":[{"lang":"en","text":"Return the position of the file pointer in an open channel"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"Index of the channel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"the current position of the file pointer"}],"compatible":" aoz, stos, amos"},{"name":"Close","descriptions":[{"lang":"en","text":"Close one or all opened files, and in case of output, save the buffered data into it"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"channel","type":"integer","text":"Number of the channel (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"You must remember to always CLOSE a file after you have finished with it. If you forget to do this, any changes that have been made to the file will be lost.||"},{"name":"Parent","descriptions":[{"lang":"en","text":"Change the current directory to the parent directory"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The effect of the PARENT command is to load the current directory with the parent of the present folder you are|using. By using this command repeatedly, you are able to get back to the original root directory simply and quickly.|For example:|~~~|Dir$=\"AMOSPro_Examples:Objects/\"|Dir|Parent|Dir|~~~|"},{"name":"Rename","descriptions":[{"lang":"en","text":"Rename a file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the file to rename"},{"lang":"en","name":"newName$","type":"string","text":"New name of the file"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command is used to change the name of an existing file. If your choice of new filename is already in use by another file, the appropriate error message will be given.|~~~|Rename \"Ancient\" To \"Modern\"|~~~||"},{"name":"Kill","descriptions":[{"lang":"en","text":"Delete a file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the file to delete"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Be extremely careful with this command. It obliterates the named file from the current disc, once and for all. The file that is erased with this command cannot be retrieved.|"},{"name":"Load Variables","descriptions":[{"lang":"en","text":"Read the content of variables from a file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path of the file to load"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This function will load a file previously saved with the Save Variables command, read all the|values of the variables and arrays contained in it, and assign them to the variables in your application.||Warning: the previous content of variables with the same name as the ones saved in the file will be erased.||If a variable which value is contained in the file does not exists in the current application, it will be created.|"},{"name":"Save Variables","descriptions":[{"lang":"en","text":"save the content of variables or arrays into a file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path of the file to save"},{"lang":"en","name":"any","type":"variable","text":"A list of variables to be saved, saparated by commas"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This function saves the values and the names of a list of variables into an encoded ASCII file on disk.||You can recover the variables later with the \"Load Variables\" instructions.||You can save the content of an array by ommiting the dimensions when you save it:|~~~|Dim A$( 10 ), B( 10, 10 )|For X = 0 To 10|A$( X ) = Str$( X )|For Y = 0 To 10|B( X, Y ) = X * 10 + Y|Next|Next||// The next line only saves two values, \"5\" and 12|Save Variables \"C:\\Temp\\myVariables_values.txt\", A$( 5 ), B( 1, 2 )||// The next line saves the whole arrays|Save Variables \"C:\\Temp\\myVariables_arrays.txt\", A$(), B()|~~~|"},{"name":"Drive First$","descriptions":[{"lang":"en","text":"Return the name of the first available drive on the machine."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*filter$","type":"string","text":"Optional string with wildcard to filter the names."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The name of the first drive"}],"compatible":" aoz"},{"name":"Drive Next$","descriptions":[{"lang":"en","text":"Return the name of the next available drive on the machine."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The name of the drive, or \"\" if AOZ has reached the end of the list"}],"compatible":" aoz"},{"name":"FSel$","descriptions":[{"lang":"en","text":"Open a file selector and return the name of the selected file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the directory to display at start"},{"lang":"en","name":"*default$","type":"string","text":"Name of the default file to display as selected"},{"lang":"en","name":"*title1$","type":"string","text":"String to display as title of the selector"},{"lang":"en","name":"*title2$","type":"string","text":"String to display as secondary title of the selector"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Value reported by the port"}],"compatible":" aoz, stos, amos","content":"This file selection function allows you to choose the files you need directly from a disc, using the standard AOZ Studio file selector. In its simplest form, it operates like this:|~~~|Print Fsel$(\"*.PNG\")|~~~|The string held within the brackets is a path that sets the searching pattern, in that case a PNG file.||The following optional parameters may also be included:||The optional default string is used to choose a filename that will be automatically selected if you press [Return] and abort the process.||Title$ and title2$ are optional text strings that set up a title to be displayed at the top of your file selector. For example:|~~~|F$=Fsel$(\"AMOSPro_Examples:Objects/*.Abk\")|If F$= Then Edit : Rem Return to editor if no file selected|Load F$: Rem Load file and display first Bob|Flash Off : Bob 1,100,100,1 : Get Bob Palette : Wait Vbl|~~~||"},{"name":"Dir First$","descriptions":[{"lang":"en","text":"List the indicated path internally and return the first file in the list"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the directory to scan, can include * and ? wildcards"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The name of the first file found"}],"compatible":" aoz, stos, amos","content":"This function returns a string containing the name and the length of the first file on the current disc that matches up|with your chosen search path. For example, the next routine reports the first file or folder in the current directory,|followed by the first IFF file in the directory. Obviously, this could be the same file.||~~~|Print Dir First$(\"*.*\")|Print Dir First$(\"*.PNG\")|~~~||When DIR FIRST$ is used, the whole directory listing is loaded into memory, so you can continue to discover the|name of the next file in the current directory with the following function.|"},{"name":"Dir Next$","descriptions":[{"lang":"en","text":"Return the next file in the list generated by Dir First$"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The name of the next file found"}],"compatible":" aoz, stos, amos","content":"Use this to return the filename that comes after the file or folder found by the previous DIR FIRST$ search. If there|are no more files to come, an empty string will be returned, \"\". Once the last filename has been found, AMOS|Professional will automatically grab back the memory used by the directory array, and release it for the rest of your|program to use. The next example prints every file in the current directory.|~~~|F$=Dir First$(\"*.*\")|While F$<>\"\"|Print F$ : Wait 50|F$=Dir Next$|Wend|~~~|"},{"name":"Exist","descriptions":[{"lang":"en","text":"Indicates if a file or directory exists on the disc"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the file or directory to check"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the file or directory exist, False if not"}],"compatible":" aoz, stos, amos","content":"EXIST looks through the current directory of filenames and checks it against the filename in your given string. If the names match, then the file does exist and True will be reported, otherwise False will be returned.||As well as checking for individual filenames, even if an idiotic name is given, EXIST will search for discs and devices as well. For example:|~~~|Print Exist(\"An idiotic name\")|Print Exist(\"C:) \t// Rem Is a drive named DEMO available|Print Exist(\"Df1:) \t// Is the second floppy drive connected when in Amiga simulation?|~~~|It is advisable to test for empty strings () separately, like this:|~~~|F$=Fsel$(\"*.PNG\",\" \",\"Load a PNG file\")|If F$= Then Edit // Return to editor if no file chosen|If Exist(F$) Then Load Image F$,0|~~~||"},{"name":"File Name$","descriptions":[{"lang":"en","text":"Returns the name of a file, without extension"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the file"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The name of the file"}],"compatible":" aoz","content":"This function is useful when you have a path to a file but only want to know the name of the file.|~~~|F$ = FSel$( \"*.PNG\", \" \", \"Please choose a file not named hello.png\" )|If F$ <> \"\"|If Lower$( File Name$( F$ ) ) = \"hello.png\"|Print \"Sorry not this one... :)\"|End|End If|Load Image F$|End If||"},{"name":"File Extension$","descriptions":[{"lang":"en","text":"Returns the extension of a path to a file, without the dot"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the file"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The extension of the path to a file"}],"compatible":" aoz","content":"Use this function to trigger procedures from the extension...|~~~|F$ = FSel$( \"*.*\", \" \", \"Please choose an image file...\" )|If F$ <> \"\"|E$ = Lower$( File Extension$( F$ ) )|If E$ = \"png\" Or E$ = \"jpg\" Or E$ = \"jpeg\" Or E$ = \"iff\"|Load Image F$|Else|Print \"File not supported.\"|End If|End If|"},{"name":"File Length","descriptions":[{"lang":"en","text":"Return the length in bytes of a file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the file to check"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The length of the file"}],"compatible":" aoz","content":"This example will load the file in a memory bank, and display it's content in hexadecimal...|~~~|F$ = FSel$( \"*.*\", \" \", \"Please choose a file...\" )|If F$ <> \"\"|L = File Length( F$ )\t\t\t// Get the length of the file|Reserve As Data 10, L\t\t\t// Reserve the space in memory bank number 10|Bload F4, 10\t\t\t\t\t// Load the file into the bank.||For P = 0 To Length( 10 )|Print Hex$( Peek( Start( 10 ) + P ), 2 );\" \";|Next|End If||~~~|"},{"name":"Dir","descriptions":[{"lang":"en","text":"List a directory in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the directory to list, can include wildcards * and ?"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The DIR command is used to examine the directory of the current disc and list all of its files on screen, like this:|~~~|Dir|~~~|Any folders in the listing will be distinguished by a leading asterisk character \"*\"|"},{"name":"Disc Info$","descriptions":[{"lang":"en","text":"Return information about a drive"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*name$","type":"string","text":"Name to the drive (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"This function is used to return the amount of free space in the specified device. The string that is returned contains|the name of the disc, followed by the amount of free space. Here is an example which splits the string:||~~~|A$=Disc Info$( \"Macintosh HD:\" )|C=Instr(A$,\":\")|N$=Left$(A$,C)|A$=A$-N$|D=Val(A$)|Print \"Name of the disc=\";N$|Print \"Free space=\";D|~~~|"},{"name":"LDir","descriptions":[{"lang":"en","text":"TODO"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"Path to the drive or a directory on the drive (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"This command is used in exactly the same way as DIR, it lists the directory of the current disc to the printer.|"},{"name":"Command Line$","descriptions":[{"lang":"en","text":"Returns the parameters of the command that has been used to launch the application."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"command$","type":"string","text":"The text to use as parameters, separated with commansss inside of the string"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"For applications running in your browser, it will return the section of the URL after a question mark...|"},{"name":"Set Input","descriptions":[{"lang":"en","text":"Set the end of line characters detected when you input from a random access file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"char1","type":"integer","text":"Ascii value of the first character to detect as new line"},{"lang":"en","name":"*char2","type":"integer","text":"Ascii value of the first character to detect as new line"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"aoz, stos, amos","content":"SET INPUT is used to set which characters you want to input to end a line of data. Many computers need both a [Return] and [line feed] character at the end of each line, but the Amiga only needs a [line feed]. This means that if you wanted to import files from an ST via the serial cable, for example, unwanted [Return] characters would litter your input.||SET INPUT solves this problem by allowing you to select two Ascii values as your end-of-line characters. If you prefer to use a single character only, make the second value a negative number. For example:|~~~|Set Input 10,-1 \t\t// macOS, Linux|Set Input 13,10\t\t\t// Windows|~~~||"},{"name":"Set Dir","descriptions":[{"lang":"en","text":"Changes the width of the Dir function results"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" stos, amos, aoz","content":"The DIR command is used to examine the directory of the current disc and list all of its files on screen, like this:|~~~|Dir|~~~|Any folders in the listing will be distinguished by a leading asterisk character *.||The listing can be stopped at any time by pressing the [Space-bar] and then started again in the same way.||"},{"name":"Dir$","descriptions":[{"lang":"en","text":"Reserved variable. Change current directory"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The current directory"}],"content":"DIR$ can hold the directory name that is to be used as the starting point for further disc operations, like this:|~~~|Dir$=\"AOZ Resources:Sounds/\"|Print Dir$|~~~||"}]},{"name":"Fonts","id":1639692454100,"descriptions":[{"lang":"en","text":"Instructions and functions to handle fonts"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Get Font Number","descriptions":[{"lang":"en","text":"Return the number of fonts available to the application"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The number of fonts found"}],"compatible":" aoz","content":"This function returns the number oof fonts that have been inserted in the application.|There will always be at least one font available as soon as your application displays anything.|"},{"name":"Set Font","descriptions":[{"lang":"en","text":"Select font for use by Text command in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"font","type":"any","text":"The name or index of the font, case insensitive in case of a string"},{"lang":"en","name":"*height","type":"integer","text":"The height of the font"},{"lang":"en","name":"*weight$","type":"string","text":"The Javascript-like definition of the weight of the font, \"normal\" is used if not defined"},{"lang":"en","name":"*italic$","type":"string","text":"The Javascript-like italic definition, \"normal\" is used if not defined"},{"lang":"en","name":"*stretch$","type":"string","text":"The Javascript-like strech definition, \"normal\" is used if not defined"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"AOZ offers a full support of Google Font, and cherry on the cake the fonts are embedded inside of the application: they will be displayed even if the application is ran offline.||You can with the tag \"googleFont\" at the beginning of your application add as many fonts as you want. You can also define the fonts in the manifest of the application itself...|Amiga lovers can add real Amiga fonts with the tag: \"amigaFont\": ... both Google and Amiga fonts can be mixed in the display.||Once the font is set, it will be used by all graphical text- related instructions.|This command is used to select the character set to be employed by a TEXT instruction, like this:|~~~|googleFont: \"Francois One\"|amigaFont: \"Ruby\"||// Print a big hello in the middle of the screen|Set Font \"Francois One\", 50, \"bold\"|Text \"Welcome to AOZ\", Screen Width / 2, Screen Height / 2, \"center middle\"||// And a little line in the bottom of the screen|Set Font \"Ruby\", 16|Text \"Remember this Amiga font?\", Screen Width / 2, Screen Height - 100, \"center top\"|~~~|"},{"name":"Font$","descriptions":[{"lang":"en","text":"Return details of available fonts"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"fontname","type":"any","text":"The index or name of the font in the list of fonts"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"This function is used to examine an existing font list and make a report, giving details of the specified font.|The report is given as a string of 38 characters, holding the following information: the name of the font, its physical|height in pixels and its status set to either Disc or Rom. For example:|~~~|Get Fonts : Set Font 2|Print Font$(2)|~~~|"},{"name":"Set Bitmap Font","descriptions":[{"lang":"en","text":"Set a bitmapped font from an image of the images bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"numFont","type":"integer","text":"Number of the bitmap font to set"},{"lang":"en","name":"charWidth","type":"integer","text":"Width of a char in pixels"},{"lang":"en","name":"charHeight","type":"integer","text":"Height of a char in pixels"},{"lang":"en","name":"numImage","type":"integer","text":"Number of the image from the images bank"},{"lang":"en","name":"scaleX","type":"integer","text":"Value of the horizontal scaling of the bitmap font"},{"lang":"en","name":"scaleY","type":"integer","text":"Value of the vertical scaling of the bitmap font"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"Bitmap fonts are less flexible than ordinary fonts, but have the great advantage to be in full color.|Actually, a graphical font can contain other things than letters, icons, arrows etc.||Use the \"Bitmap text\" to display any text after you have defined|"},{"name":"Bitmap Text","descriptions":[{"lang":"en","text":"Draw a text on the currentscreen with a bitmapped font store in the images bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"text$","type":"string","text":"Text to draw"},{"lang":"en","name":"x","type":"integer","text":"Horizontal position in pixel of the text"},{"lang":"en","name":"y","type":"integer","text":"Vertical position in pixel of the text"},{"lang":"en","name":"fontNumber","type":"integer","text":"Number of the bitmap font to set"},{"lang":"en","name":"fontStyle","type":"integer","text":"Style of the font to draw the text"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"}]},{"name":"Icon Commands","id":1639692454105,"descriptions":[{"lang":"en","text":"Instructions and functions to handle icons"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Get Block","descriptions":[{"lang":"en","text":"Captures a portion of the graphics from a screen into a buffer."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the block to create"},{"lang":"en","name":"x1","type":"integer","text":"Horizontal coordinate of the top-left corner of the rectangle to capture"},{"lang":"en","name":"y1","type":"integer","text":"Vertical coordinate of the top-left corner of the rectangle to capture"},{"lang":"en","name":"x2","type":"integer","text":"Horizontal coordinate of the bottom-right corner of the rectangle to capture"},{"lang":"en","name":"y2","type":"integer","text":"Vertical coordinate of the bottom-right corner of the rectangle to capture"},{"lang":"en","name":"transparent","type":"boolean","text":"If True, Ink 0 of the block will be transparent when pasting the block."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The GET BLOCK command is used to grab a rectangular area from the graphics on the current screen. First specify|a Block number, then set the coordinates of the top-left hand corner of the rectangle to be|grabbed, followed by the number of pixels making up the width and height of the Block.||An optional mask code can be added after these parameters. If this code is set to zero, the Block will destroy and|replace any graphics that used to occupy its position on screen. If the mask code is set to 1, the block is given a|background mask, and colour zero becomes transparent.|"},{"name":"Set Block Alpha","descriptions":[{"lang":"en","text":"Set the transparency alpha of a block, that will be applied the next time the block is drawn in one screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the block to affect"},{"lang":"en","name":"alpha","type":"float","text":"Value fo the transparency, from 0 to 1, 0= fully transparent, 1= fully opaque"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"~~~|Get Block 1, 100, 100 To 300, 400\t\t// Grab a portion of the screen|Set Block Alpha 0.5\t\t\t\t\t\t// Set the block to be semi-transparent|Put Block 1, 101, 101\t\t\t\t\t// Make it somewhat \"bold\" by pasting it one pixel away...|~~~|"},{"name":"Put Block","descriptions":[{"lang":"en","text":"Draw a previously captured block in the current screen."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the block to draw"},{"lang":"en","name":"*x","type":"integer","text":"Horizontal coordinate of the top-left corner of the block in the screen"},{"lang":"en","name":"*y","type":"integer","text":"Vertical coordinate of the top-left corner of of the block in the screen"},{"lang":"en","name":"*bitplanes","type":"integer","text":"Only in Amiga mode, defines the bitplanes to draw"},{"lang":"en","name":"*billterMode","type":"integer","text":"Has no effect in AOZ."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"To re-draw a Block at its original coordinates on the current screen, simply add the Block's identification number|after the PUT BLOCK command.||If you want to draw the Block at a new position, then add the new x,y-coordinates for the It left-hand corner, after|the Block number.||If you are in Amiga emulation, the last two parameters will have an effect. The Amiga's screen is divided into segments known as \"bit-planes\", and Blocks are normally displayed using all the|available screen bit-planes, which is a bit-pattern of %111111. Re-setting these bit-planes can create numerous special effects...|"},{"name":"Del Block","descriptions":[{"lang":"en","text":"Destroys an existing Block and free memory"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"Index of the block to destroy"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"To delete all new screen Blocks, the DEL BLOCK command is used. The memory these Blocks used is returned to|the main program automatically. If you only want to get rid of a single Block, follow the command with that Block's|identification number.|"},{"name":"Hrev Block","descriptions":[{"lang":"en","text":"Flip a block horzontally"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This command reverses any block, by flipping it over its own horizontal axis.|"},{"name":"Vrev Block","descriptions":[{"lang":"en","text":"Flip a block vertically"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"This command reverses any block, by flipping it over its own vertical axis.|"}]},{"name":"Graphic Basics","id":1639692454111,"descriptions":[{"lang":"en","text":"Instructions and functions to draw graphics in AOZ screens"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Cls","descriptions":[{"lang":"en","text":"Clear an area of the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"ink","type":"integer","text":"The index of the color in the palette to clear with"},{"lang":"en","name":"x1","type":"integer","text":"The horizontal coordinate of the top-left pixel of the rectangle to clear"},{"lang":"en","name":"y2","type":"integer","text":"The vertical coordinate of the top-left pixel of the rectangle to clear"},{"lang":"en","name":"x2","type":"integer","text":"The horizontal coordinate of the bottom-right pixel of the rectangle to clear"},{"lang":"en","name":"y2","type":"integer","text":"The vertical coordinate of the bottom-right pixel of the rectangle to clear"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The CLS command erases.all or part of the current screen. Used on its own, the contents of the current screen are deleted and replaced by the current paper colour. Any windows that may have been set up will also be cleared in this way.||It can be used without any parameter, in this case the whole screen will be erased with the color of the Ink 0.||By specifying the index number of a particular colour after the CLS command, the clearing operation will be carried out using that colour.||A rectangular part of the current screen can also be cleared, leaving the rest of the screen intact. This is achieved by adding the coordinates of the block to be filed with the specified colour, from the top left-hand corner, to the bottom right.||For example:|~~~|Cls: Circle 100,98,98: Cls 0,50,50 To 150,150|~~~||"},{"name":"Plot","descriptions":[{"lang":"en","text":"Draw a pixel in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the point to draw"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the point to draw"},{"lang":"en","name":"ink","type":"integer","text":"The index of the color in the screen palette (optional, will use the latest Ink value if ommited)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This is the simplest drawing command of all, and plots a single pixel of ink colour between graphic coordinates 0,0|and 319,199. When followed by specific x,y-coordinates, the current ink colour will be plotted at this new position.|You are allowed to omit either the x or the y- coordinate, provided the comma is left in the correct position. If an|optional colour index number is added the new colour will be used for this and all subsequent drawing operations.|For example:|~~~|Cls: Curs Off|Do|Plot Rnd(1920),Rnd(1080),Rnd(15)|Wait vbl|Loop|~~~||"},{"name":"Point","descriptions":[{"lang":"en","text":"Return the palette index of a point within the current screen (warning"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the point to test"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the point to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"ink","text":"integer"}],"compatible":" aoz, stos, amos","content":"Use this function to find the index number of the colour occupying your chosen coordinates, like this:|~~~|Cls : Plot 160,100|Print \"The colour is \";Point(160,100)|~~~||"},{"name":"Point RGB","descriptions":[{"lang":"en","text":"Return the true colour RGB value of a point within the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the point to test"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the point to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"ink","text":"integer"}],"compatible":" aoz, stos, amos","content":"Use this function to find the RGB value of the colour occupying your chosen coordinates, like this:|~~~|Cls : Plot 160,100|Print \"The colour is \";Point RGB(160,100)|~~~||"},{"name":"Point RGBA","descriptions":[{"lang":"en","text":"Return the true colour RGBA value of a point within the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the point to test"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the point to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"ink","text":"integer"}],"compatible":" aoz, stos, amos","content":"Use this function to find the RGB value of the colour occupying your chosen coordinates, like this:|~~~|Cls : Plot 160,100|Print \"The colour is \";Point RGBA(160,100)|~~~||"},{"name":"Set Line Width","descriptions":[{"lang":"en","text":"Set the width of the lines used in line drawing operations"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"width","type":"integer","text":"The width or thickness of the line in pixels"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"|~~~|Ink 1|For f=1 to 10|Set Line Width f|Circle f*150,540,60|Next f|~~~||The line width can also be set to less than 1. The next example shows what the circles will look like with line widths from 0.1 to 1.0.|You will see that for very thin lines, they appear much fainter.||~~~|Ink 1|For f=1 to 10|Set Line Width f/10|Circle f*150,540,60|Next f|~~~|"},{"name":"Set Line Cap","descriptions":[{"lang":"en","text":"Sets the 'capping' style of lines drawn using Draw, Draw To, Arc, Ellipse Arc and Polyline"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"cap$","type":"string","text":"The capping style. Can be \"round\", \"square\" or \"butt\". Optional. Omitting this parameter will restore the setting to the default \"butt\"."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This command sets the capping style of all lines that are subsequently drawn. The different styles only become apparent on thicker lines.||butt - ends the line squarely at the limits (default)||round - ends the line with a semi-circle of radius half of line width||square - ends the line with a square end, extending the line by half the line width||eg:|~~~|Ink 1|// Draw Vertical White lines at limits|Draw 50,200 to 50,800|Draw 900,200 to 900,800|Set Line Width 50|Ink 4|Set Line Cap \"butt\"|Draw 50,400 to 900,400|Set Line Cap \"round\"|Draw 50,500 to 900,500|Set Line Cap \"square\"|Draw 50,600 to 900,600|~~~|"},{"name":"Set Line Join","descriptions":[{"lang":"en","text":"Sets the 'join' style of lines drawn using Draw, Draw To, Arc, Ellipse Arc, Polyline and all the lines that make up polygonal shapes."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"join$","type":"string","text":"The line Joining style. Can be \"round\", \"miter\" or \"bevel\". Optional. Omitting this parameter will restore the setting to the default \"miter\"."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This command sets the joining style of all lines that are subsequently drawn.||bevel - joins lines at angles to each other with a bevelled corner||miter - joins lines at angles to each other with a pointed corner (default)||round - joins lines at angles to each other with a rounded corner||eg:|~~~|Set Line Width 30|Ink 4|Set Line Join \"miter\"|Shape 200,200,150,150,3|Set Line Join \"bevel\"|Shape 500,500,150,150,3|Set Line Join \"round\"|Shape 800,800,150,150,3|~~~|"},{"name":"Draw","descriptions":[{"lang":"en","text":"Draw a line with the current Ink from the last graphical position"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the point to test"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the point to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Line drawing is extremely simple. Pick two sets of graphic coordinates, and draw your line from one to the other. To|draw a line from the current position of the graphics cursor, use DRAW TO followed by a single set of coordinates.|For example:|~~~|Cls: Ink 2|Draw 50,50 To 250,150|Draw To 275,175|~~~|Line styles|Changing the appearance of straight lines is very simple with AOZ. Each line pattern is held in the|form of a binary number made up of 16 bits, with zeros setting blank spaces in the current background colour, and|ones setting the solid parts of the pattern in the current ink colour. So a normal solid line can be imagined as having|all its bits set to one, like this:|~~~|%1111111111111111|~~~||"},{"name":"Curve","descriptions":[{"lang":"en","text":"Draw a curved line from one pair of coordinates to another using control points."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" AOZ","content":"Each type can use a 'From' syntax, where start coordinates are specified, or 'To' syntax, where the curve will be draw from the current graphic cursor position.|See Below for the full list of syntax options.||~~~|//  Arc To Line cx1,cy1,cx2,cy2 (the arc will join the line in the direction it is drawn)|Curve To cx1, cy1, cx2, cy2, radius||//  Quadratic Curve To x,y with control point cx,cy|Curve To x, y, cx, cy||// Bezier Curve To x,y through control points|Curve To x, y, cx1, cy1, cx2, cy2||// Arc from x, y to line cx1,cy1, cx2, cy2|Curve x, y, cx1, cy1, cx2, cy2, radius||// Quadratic Curve from x1,y1 to x2,y2 via control point cx,cy|Curve x1, y1, cx, cy, x2, y2||// Bezier Curve from x1,y1 to x2,y2 via control points cx1,cy1 and cx2,cy2|Curve x1, y1, cx1, cy1, cx2, cy2, x2, y2|~~~||"},{"name":"Ellipse","descriptions":[{"lang":"en","text":"Draw an ellipse with the current Ink in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the ellipse"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the ellipse"},{"lang":"en","name":"xRadius","type":"integer","text":"The horizontal radius in pixels"},{"lang":"en","name":"yradius","type":"integer","text":"The vertical radius in pixels"},{"lang":"en","name":"rotation","type":"float","text":"The angle of rotation"},{"lang":"en","name":"fill","type":"boolean","text":"True to fill the ellipse with the current ink colour or pattern"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"An ellipse is drawn in a similar way. After the x,y-coordinates have set the centre location, two radii must be given,|one to set the horizontal width and the second to set the height of the ellipse. Coordinates may be omitted as usual,|providing the commas remain in place. For example:|~~~|Degree|Ellipse 960,540,200,100|Ellipse 960,540,200,100,90|Ellipse ,,200,100|~~~||"},{"name":"Filled Ellipse","descriptions":[{"lang":"en","text":"Draw an filled ellipse with the current Ink and pattern definitions in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the ellipse"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the ellipse"},{"lang":"en","name":"xRadius","type":"integer","text":"The horizontal radius in pixels"},{"lang":"en","name":"yradius","type":"integer","text":"The vertical radius in pixels"},{"lang":"en","name":"rotation","type":"integer","text":"The angle of rotation of the ellipse"},{"lang":"en","name":"fill","type":"boolean","text":"Set to true to fill the ellipse."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"After the x,y-coordinates have set the centre location, two radii must be given,|one to set the horizontal width and the second to set the height of the ellipse. Coordinates may be omitted as usual,|providing the commas remain in place. For example:|~~~|Filled Ellipse 100,100,50,20|Filled Ellipse ,,20,50|~~~||"},{"name":"Circle","descriptions":[{"lang":"en","text":"Draw a circle with the current Ink in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the circle"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the circle"},{"lang":"en","name":"radius","type":"integer","text":"The radius of the circle in pixels"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"To draw circles, a pair of coordinates sets the position of the centre point around which the shape is to be drawn,|followed by the radius of the circle (the distance between the centre point and the circumference or rim of the|circle.) If the x,y-coordinates are omitted, the circle will be drawn from the current graphic cursor position.For example:|~~~|Cls : Curs Off : Ink 3|Gr Locate 160,100|Circle ,,45 : Wait 100: Flash Off|Do|Ink Rnd(15) : X=Rnd(250) : Y=Rnd(150) : R=Rnd(90)+1|Circle X,Y,R|Loop|~~~||"},{"name":"Shape","descriptions":[{"lang":"en","text":"Draw a regular polygon with a specified number of sides using the current Ink in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the shape"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the shape"},{"lang":"en","name":"radius1","type":"integer","text":"The x radius of the shape in pixels"},{"lang":"en","name":"radius2","type":"integer","text":"The y radius of the shape in pixels"},{"lang":"en","name":"sides","type":"integer","text":"The number of sides."},{"lang":"en","name":"rotation","type":"integer","text":"Angle of rotation of the shape."},{"lang":"en","name":"fill","type":"boolean","text":"Set to true to fill the shape."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Filled Shape","descriptions":[{"lang":"en","text":"Draw a filled regular polygon with a specified number of sides using the current Ink in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the shape"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the shape"},{"lang":"en","name":"radius1","type":"integer","text":"The x radius of the shape in pixels"},{"lang":"en","name":"radius2","type":"integer","text":"The y radius of the shape in pixels"},{"lang":"en","name":"sides","type":"integer","text":"The number of sides."},{"lang":"en","name":"rotation","type":"integer","text":"Angle of rotation of the shape."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Star","descriptions":[{"lang":"en","text":"Draw a star shape with a specified number of points using the current Ink in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the star"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the star"},{"lang":"en","name":"radius1","type":"integer","text":"The radius of the outer points of the star"},{"lang":"en","name":"radius2","type":"integer","text":"The radius of the inner points of the star"},{"lang":"en","name":"rotation","type":"integer","text":"Angle of rotation of the star"},{"lang":"en","name":"fill","type":"boolean","text":"Set to true to fill the star"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Filled Star","descriptions":[{"lang":"en","text":"Draw a filled star shape with a specified number of points using the current Ink in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the star"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the star"},{"lang":"en","name":"radius1","type":"integer","text":"The radius of the outer points of the star"},{"lang":"en","name":"radius2","type":"integer","text":"The radius of the inner points of the star"},{"lang":"en","name":"rotation","type":"integer","text":"Angle of rotation of the shape."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Arc","descriptions":[{"lang":"en","text":"Draw an arc of a circle between 2 angles using the current Ink in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the arc"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the arc"},{"lang":"en","name":"radius1","type":"integer","text":"The radius of the arc"},{"lang":"en","name":"angle1","type":"integer","text":"The angle from which the arc is drawn from"},{"lang":"en","name":"angle2","type":"integer","text":"The angle to which the arc will be drawn to"},{"lang":"en","name":"rotation","type":"integer","text":"Angle of rotation of the arc"},{"lang":"en","name":"fill","type":"boolean","text":"Set to true to fill the arc"},{"lang":"en","name":"counterclockwise","type":"boolean","text":"direction the arc will be drawn from angle1 - Optional"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Ellipse Arc x, y, radius1, radius2, angle1, angle2, rotation, fill, counterclockwise","descriptions":[{"lang":"en","text":"Draw an arc of an ellipse between 2 angles using the current Ink in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the arc"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the arc"},{"lang":"en","name":"radius1","type":"integer","text":"The horizontal radius of the arc"},{"lang":"en","name":"radius2","type":"integer","text":"The vertical radius of the arc"},{"lang":"en","name":"angle1","type":"integer","text":"The angle from which the arc is drawn from"},{"lang":"en","name":"angle2","type":"integer","text":"The angle to which the arc will be drawn to"},{"lang":"en","name":"rotation","type":"integer","text":"Angle of rotation of the arc"},{"lang":"en","name":"fill","type":"boolean","text":"Set to true to fill the arc. The arc will be closed in a straight line from on end to the other."},{"lang":"en","name":"counterclockwise","type":"boolean","text":"Set to true to draw the arc in a counterclockwise direction."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"Ellipse Arc will draw the Arc of an ellipse between the two provided angles. The arc can be drawn in either clockwise or counterclockwise direction|The following example draws 10 Arcs of the Ellipse in different colours|~~~|Set Line Width 30|Set Line Cap \"round\"|Degree|for f=0 to 9|ink 3*(f+1)|ellipse arc 960,540,400,250,f*36,f*36+28|wait vbl|next f|~~~|"},{"name":"Segment x, y, radius1, radius2, radius3, angle1, angle2, rotation, fill, counterclockwise","descriptions":[{"lang":"en","text":"Draw a segment of a cricle or ellipse between 2 angles using the current Ink in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the arc"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the arc"},{"lang":"en","name":"radius1","type":"integer","text":"The horizontal radius of the circle or ellipse"},{"lang":"en","name":"radius2","type":"integer","text":"The vertical radius of the circle or ellipse"},{"lang":"en","name":"radius3","type":"integer","text":"The start radius of the segment from the centre point. eg. 0 will draw a full 'pie slice'"},{"lang":"en","name":"angle1","type":"integer","text":"The angle from which the segment is drawn from"},{"lang":"en","name":"angle2","type":"integer","text":"The angle to which the segment will be drawn to"},{"lang":"en","name":"rotation","type":"integer","text":"Angle of rotation of the segment"},{"lang":"en","name":"fill","type":"boolean","text":"Set to true to fill the segment"},{"lang":"en","name":"counterclockwise","type":"boolean","text":"direction the segment will be drawn from angle1 - Optional"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Filled Segment","descriptions":[{"lang":"en","text":"Draw a segment of a cricle or ellipse between 2 angles using the current Ink in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the arc"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the arc"},{"lang":"en","name":"radius1","type":"integer","text":"The horizontal radius of the circle or ellipse"},{"lang":"en","name":"radius2","type":"integer","text":"The vertical radius of the circle or ellipse"},{"lang":"en","name":"radius3","type":"integer","text":"The start radius of the segment from the centre point. eg. 0 will draw a full 'pie slice'"},{"lang":"en","name":"angle1","type":"integer","text":"The angle from which the segment is drawn from"},{"lang":"en","name":"angle2","type":"integer","text":"The angle to which the segment will be drawn to"},{"lang":"en","name":"rotation","type":"integer","text":"Angle of rotation of the segment"},{"lang":"en","name":"counterclockwise","type":"boolean","text":"direction the segment will be drawn from angle1 - Optional"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Filled Arc","descriptions":[{"lang":"en","text":"Draw an arc of a circle between 2 angles using the current Ink in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the arc"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the arc"},{"lang":"en","name":"radius1","type":"integer","text":"The radius of the arc"},{"lang":"en","name":"angle1","type":"integer","text":"The angle from which the arc is drawn from"},{"lang":"en","name":"angle2","type":"integer","text":"The angle to which the arc will be drawn to"},{"lang":"en","name":"rotation","type":"integer","text":"Angle of rotation of the arc"},{"lang":"en","name":"counterclockwise","type":"boolean","text":"direction the arc will be drawn from angle1 - Optional"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Filled Ellipse Arc","descriptions":[{"lang":"en","text":"Draw a filled arc of an ellipse between 2 angles using the current Ink in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the arc"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the arc"},{"lang":"en","name":"radius1","type":"integer","text":"The horizontal radius of the arc"},{"lang":"en","name":"radius2","type":"integer","text":"The vertical radius of the arc"},{"lang":"en","name":"angle1","type":"integer","text":"The angle from which the arc is drawn from"},{"lang":"en","name":"angle2","type":"integer","text":"The angle to which the arc will be drawn to"},{"lang":"en","name":"rotation","type":"integer","text":"Angle of rotation of the arc"},{"lang":"en","name":"counterclockwise","type":"boolean","text":"direction the arc will be drawn from angle1 - Optional"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Disc","descriptions":[{"lang":"en","text":"Draw a filled circle with the current Ink and Pattern definitions in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the centre of the circle"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the centre of the circle"},{"lang":"en","name":"radius","type":"integer","text":"The radius of the circle in pixels"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"To draw discs, a pair of coordinates sets the position of the centre point around which the shape is to be drawn,|followed by the radius of the circle (the distance between the centre point and the circumference or rim of the|circle.) If the x,y-coordinates are omitted, the circle will be drawn from the current graphic cursor position.For example:|~~~|Cls : Curs Off : Ink 3, 0 : Set Paint True|Gr Locate 160,100|Disc ,,45 : Wait 100: Flash Off|Do|Ink Rnd(15) : X=Rnd(250) : Y=Rnd(150) : R=Rnd(90)+1|Disc X,Y,R|Loop|~~~||"},{"name":"Bar","descriptions":[{"lang":"en","text":"Draw a filled rectangle with the current Ink, Pattern in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x1","type":"integer","text":"The horizontal coordinate of the top-left corner of the rectangle"},{"lang":"en","name":"y1","type":"integer","text":"The vertical coordinate of the top-left corner of the rectangle"},{"lang":"en","name":"x2","type":"integer","text":"The horizontal coordinate of the bottom-right corner of the rectangle"},{"lang":"en","name":"y2","type":"integer","text":"The vertical coordinate of the bottom-right corner of the rectangle"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This is used to draw solid bars of colour by the familiar method of setting the top left-hand and bottom right-hand graphic coordinates.||"},{"name":"Box","descriptions":[{"lang":"en","text":"Draw an empty rectangle with the current Ink, Line width and Line Pattern in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x1","type":"integer","text":"The horizontal coordinate of the top-left corner of the rectangle"},{"lang":"en","name":"y1","type":"integer","text":"The vertical coordinate of the top-left corner of the rectangle"},{"lang":"en","name":"x2","type":"integer","text":"The horizontal coordinate of the bottom-right corner of the rectangle"},{"lang":"en","name":"y2","type":"integer","text":"The vertical coordinate of the bottom-right corner of the rectangle"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Boxed outlines are drawn at settings determined by the top left-hand and bottom right-hand coordinates, as in the last example.||"},{"name":"Paint","descriptions":[{"lang":"en","text":"Performs a flood-paint of a closed area in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate where to start the paint process"},{"lang":"en","name":"y","type":"integer","text":"The horizontal coordinate where to start the paint process"},{"lang":"en","name":"color","type":"integer","text":"The index in the palette of the screen of the color to use (optional, will use the current Ink index if ommited)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"The PAINT command allows you to fill any section of your screen with a solid block of colour. You may also fill|areas with various patterns previously selected with the SET PATTERN command, which is explained later. Decide|which area is to be filled, and follow the PAINT command by a set of coordinates located anywhere inside the|section of screen you want to paint with the current ink colour. Try this, which if all goes well should result in the|Japanese national flag:|~~~|Palette 0,$F00|Circle 160,100,50|Paint 50,50|~~~|The optional mode setting can be set to either zero or one. A value of 0 ends your PAINT operation at the first pixel|encountered of the current border colour. A mode of 1 stops the painting operation at any colour which is different|from the existing ink colour. If there are any gaps in the boundaries of the sections you wish to fill, colour will leak|out and stain the adjoining area.||"},{"name":"Polyline","descriptions":[{"lang":"en","text":"Draw a closed empty shape using the current Ink and line parameters for the outline adn the current fill parameters for the inside. The last point is joined to the first point of the list"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x1","type":"integer","text":"Horizontal coordinate of the first point"},{"lang":"en","name":"y1","type":"integer","text":"Vertical coordinate of the first point"},{"lang":"en","name":"x2","type":"integer","text":"Horizontal coordinate of the second point"},{"lang":"en","name":"y2","type":"integer","text":"Vertical coordinate of the second point"},{"lang":"en","name":"x3","type":"integer","text":"Horizontal coordinate of the third point, etc."},{"lang":"en","name":"y3","type":"integer","text":"Vertical coordinate of the third point, etc."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The POLYLINE is identical to DRAW except that it accepts multiple coordinate settings at the same time. In this|way, complex many-sided outlines can be drawn with a single statement. In its POLYLINE TO form, drawing|begins at the current graphic cursor position. For example:|~~~|Circle 160,100,95|Polyline 160,6 To 100,173 To 250,69 To 71,69 To 222,173 To 160,6|~~~||"},{"name":"Polygon","descriptions":[{"lang":"en","text":"Draw a closed empty shape using the current Ink and line parameters for the outline and the current fill parameters for the inside. The last point is joined to the first point of the list"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x1","type":"integer","text":"Horizontal coordinate of the first point"},{"lang":"en","name":"y1","type":"integer","text":"Vertical coordinate of the first point"},{"lang":"en","name":"x2","type":"integer","text":"Horizontal coordinate of the second point"},{"lang":"en","name":"y2","type":"integer","text":"Vertical coordinate of the second point"},{"lang":"en","name":"x3","type":"integer","text":"Horizontal coordinate of the third point, etc."},{"lang":"en","name":"y3","type":"integer","text":"Vertical coordinate of the third point, etc."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This can be regarded as creating a solid version of the POLYLINE command, and your shape will begin at the|current graphic coordinates if you commence the command in its POLYGON TO form. Provided that your single|statement does not exceed the maximum allowed line length of 255 characters, there is no limit to the number of|pairs of coordinates you can use. Try this example:|~~~|Do|Ink Rnd(15)|X1=Rnd(250) : Y1=Rnd(150) : H=Rnd(200) : W=Rnd(150)|Polygon X1,Y1 To X1+W,Y1 To X1+W/2,Y1+H To X1,Y1|Loop|~~~||"},{"name":"Gr Locate","descriptions":[{"lang":"en","text":"Position the graphical cursor in the current screen. Next instructions like \"Draw To\" (or any graphical instruction wheree the X and Y coordinates are ommited) will starrt from this position"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate in pixels"},{"lang":"en","name":"y","type":"integer","text":"The horizontal coordinate in pixels"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The graphics cursor sets the starting point for most drawing operations. To establish this point, use GR LOCATE to|position the graphics cursor at your chosen coordinates.||For example:|Note that the coordinate parameters are omitted from the Circle instruction|~~~|Cls 1|X=960 : Y=10|For R=10 To 490 Step 20|Gr Locate X,Y+R|Circle ,,R|Next R|~~~||"},{"name":"Text Length","descriptions":[{"lang":"en","text":"Calculate the width in pixels of a string when draw inthe current screen with the current selected font and font size"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"text$","type":"string","text":"The text to evaluate the width from"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The width in pixels of the text on screen using the current font and font-size"}],"compatible":" aoz, stos, amos","content":"This function returns the number of pixels that make up the width of the characters in the current font, in a given|string. This can vary for the same string, depending on the font in use. Furthermore, there are special fonts which|assign different widths for each character in the same character set, known as \"proportional\" fonts. Here is a simple|example:|~~~|TS=\"Centred Text\"|L=Text Length(T$)|Text 160-L/2,100,T$|~~~||"},{"name":"Text Height","descriptions":[{"lang":"en","text":"Return the height of the current graphical font on the current screen"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The current font's height"}],"author":" Brian Flanagan","compatible":" aoz, stos, amos","content":"This function is used to get the current graphical font's height in pixels.|"},{"name":"Text Base","descriptions":[{"lang":"en","text":"Return the position of the base line of a graphical text displayed on the current screen with the current font attributes name and size"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The position of the base line of the text calculated from the top of the characters"}],"compatible":" aoz, stos, amos","content":"This function is used to get the reference position of the current font's baseline, given as the number of pixels|between the top of the character, and the point that it will be printed on the screen. It is similar to the hot-spot of an|Object.||"},{"name":"Text","descriptions":[{"lang":"en","text":"Draw a graphical text on the current screen using the current font and font size"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal position of the text in pixels"},{"lang":"en","name":"y","type":"integer","text":"The vertical position of the text in pixels"},{"lang":"en","name":"text$","type":"string","text":"The text to draw"},{"lang":"en","name":"tags$","type":"string","text":"A string containing tags facilitating the display of the text."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command is used to print text at the specified graphical coordinates.||Tags can be any logical combination of the following tags and have the same meaning as their Javascript equivalents:|- '#left', '#center', '#right',  '#start' or '#end' to position the text horizontally|-  '#top', '#hanging', '#middle', '#alphabetic', '#ideographic' or '#bottom' for vertical alignement|- '#ltr', '#rtl' or '#inherit' for drawing direction||The next example demonstrates how text can be placed at any pixel position on the|screen:|~~~|Do|Ink Rnd(15)+1,Rnd(15) : Text Rnd(320)+1, Rnd(198)+1, \"AOZ\", \"#center #middle\"|Loop|~~~||"},{"name":"Centre Text","descriptions":[{"lang":"en","text":" Centers graphical text on the current screen using the current font and font size"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"how","type":"integer","text":"A binary number indicating how to center the text.  bit 0 = horizontal, bit 1 = vertical"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"author":" Brian Flanagan","compatible":" aoz, stos, amos","content":"This command is used to centre graphical text on the current screen using the current font and font size.||The how parameter is a binary number indicating how to center the text.||how|Value  Binary  Meaning|0     %00     No centering.  Use current graphic cursor.  (Works like Text ,,Text$)|1     %01     Center horizontally (also default if how parameter is omitted)|2     %10     Center vertically|3     %11     Center both horizontally and vertically||For example:|~~~|#googleFont: \"Baloo\"|Set Font \"Baloo\",36 : Gr Locate 0,40||Centre Text \"Horizontally Centered\",1 : Text|Centre Text \"Vertically Centered\",2|Gr Locate ,300 : Centre Text \"Horizontally at y=300\"|Centre Text \"Centered Both Ways\",3|Gr Locate 1300,0 : Centre Text \"Vertically at x=1300\",2|Gr Locate 300,800 : Centre Text \"No centering.\",0|~~~|"},{"name":"Text","descriptions":[{"lang":"en","text":" Text (with NO parameters) performs the equivalent of CR LF for Text"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"author":" Brian Flanagan","compatible":" aoz","content":"This instruction is used to set the graphical x coordinate to 0,|and set the graphical y coordinate to itself + the current font height.||This example demonstrates how to print a series of lines of graphical text with the Text command:|~~~|Text ,,\"This is\" : Text|Text ,,\"a test.\" : Text|Text ,,\"Third line.\" Text||Centre Text \"Centered Text\" : Text|Centre Text \"More centered text.\" : Text|~~~|"},{"name":"Text Shadow","descriptions":[{"lang":"en","text":"Display a shadow beneath any graphical text characters."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"offsetX","type":"float","text":"A float specifying the distance that shadows will be offset horizontally. Positive values are to the right, and negative to the left."},{"lang":"en","name":"offsetY","type":"float","text":"A float specifying the distance that shadows will be offset vertically. Positive values are down, and negative up from the image."},{"lang":"en","name":"blur","type":"float","text":"A non-negative float specifying the level of shadow blur, where 0 represents no blur and larger numbers represent increasingly more blur. This value doesn't correspond to a number of pixels,"},{"lang":"en","name":"rgba","type":"The RGBA colour value for the shadow. eg","text":" $33333377 would be dark grey with 50% opacity."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This instruction allows you to add a shadow to any graphical text using the current font. With a bit of imagination, shadow can be used to create other effects, such as add a glow to an image, or an outline. See second example below.|Once the shadow is set, it will be used for all subsequent text operations until it is turned off, either by using 'Text Shadow Off', or by setting both the offsetX and offsetY to zero.|Also, once set, individual elements of the shadow definition can be changed, such as the blur in the examples below.||This example shows you how to add a basic shadow to your text.||~~~|//\tBASIC SHADOWS|Curs Off : Cls 1\t\t\t\t\t\t// Set up screen, white background|Set Transparent 0\t\t\t\t\t\t// Set background colour to transparent|Set font 0,180\t\t\t\t\t\t\t// Set then font size|Text Shadow 10,20,0,$333333ff\t\t\t// Set the 'Text Shadow'to offsetX=10, offsetY=20, blur=8, and $rgba to a dark grey with full alpha level|For f=1 to 5\t\t\t\t\t\t\t// Define loop|Ink f*5+1\t\t\t\t\t\t\t// Choose colour from palette|Text 100+f*70,f*200,\"Text Shadow\"\t// Draw Text|Text Shadow ,,f*3\t\t\t\t\t// Gradually increase the blur|wait 0.4\t\t\t\t\t\t\t// Wait for 0.4 seconds|Next f\t\t\t\t\t\t\t\t\t// Repeat loop|End|~~~||This example shows you how to make your text 'GLOW'!||~~~|//\tGLOWING TEXT|Curs Off : Cls 0\t\t\t\t\t\t// Set up screen, white background|Set Transparent 0\t\t\t\t\t\t// Set background colour to transparent|Set font 0,180\t\t\t\t\t\t\t// Set then font size|Text Shadow 0,0.1,4,$00ff00ff\t\t\t// Set the 'Text Shadow'to offsetX=0, offsetY=0.1, blur=4, and $rgba to green with full alpha level|// The 0.1 Y offset basically puts the shadow directly below the image|Ink 5 : colour 5,$000000\t\t\t\t// Set ink to 5 and change it to Black|For f=1 to 5\t\t\t\t\t\t\t// Define loop|Text 100+f*70,f*200,\"Glowing Text\"\t// Draw Text|Text Shadow ,,(f+1)*4\t\t\t\t// Gradually increase the blur to make it 'Glow' more|wait 0.4\t\t\t\t\t\t\t// Wait for 0.4 seconds|Next f\t\t\t\t\t\t\t\t\t// Repeat loop|End|~~~|"},{"name":"Text Shadow Off","descriptions":[{"lang":"en","text":"Turns off the Text Shadow effect."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This command switches off the Text Shadow effect by re-setting all the parameters to zero.|"},{"name":"Draw Shadow","descriptions":[{"lang":"en","text":"Display a shadow beneath any graphics drawn with Plot, Draw, Circle, Ellipse, Shape, Box, Star etc."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"offsetX","type":"float","text":"A float specifying the distance that shadows will be offset horizontally. Positive values are to the right, and negative to the left."},{"lang":"en","name":"offsetY","type":"float","text":"A float specifying the distance that shadows will be offset vertically. Positive values are down, and negative up from the image."},{"lang":"en","name":"blur","type":"float","text":"A non-negative float specifying the level of shadow blur, where 0 represents no blur and larger numbers represent increasingly more blur. This value doesn't correspond to a number of pixels,"},{"lang":"en","name":"rgba","type":"The RGBA colour value for the shadow. eg","text":" $33333377 would be dark grey with 50% opacity."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This instruction allows you to add a shadow to any graphics with AOZ's graphics drawing instructions. With a bit of imagination, shadow can be used to create other effects, such as add a glow to an image.|Once the shadow is set, it will be used for all subsequent text operations until it is turned off, by using 'Draw Shadow Off'.|Also, once set, individual elements of the shadow definition can be changed, such as the blur.|||"},{"name":"Draw Shadow Off","descriptions":[{"lang":"en","text":"Turns off the Draw Shadow effect."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This command switches off the Draw Shadow effect by re-setting all the parameters to zero.|"},{"name":"Text Mode","descriptions":[{"lang":"en","text":"Sets the Text drawing mode to draw either solid colour text, outline text or bordered text. Text Mode is \"fill\" by default."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"Mode$","type":"string","text":"The Text drawing mode, can be either \"fill\", \"outline\" or \"border\". If this parameter is omitted, the mode will defalt to 'fill'."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"'fill' or 'outline' uses the current Ink colour.|To use 'border', the border ink colour has to be set using the extended version of Ink as shown in the second example below.||This example draws a text phrase several times with the font outlined in different colours.||~~~|//\tOUTLINE TEXT|#googleFont:\"mystery quest\"\t\t\t\t// Choose a Google Font|Curs Off : Cls 1\t\t\t\t\t\t// Set up screen, white background|Set Transparent 0\t\t\t\t\t\t// Set background colour to transparent|Set font 0,180\t\t\t\t\t\t\t// Set then font size|Set Line Width 4\t\t\t\t\t\t// Set the line width|Text Mode \"outline\"\t\t\t\t\t\t// Set the 'Text Mode'to 'outline'|For f=1 to 5\t\t\t\t\t\t\t// Define loop|Ink f*5+1\t\t\t\t\t\t\t// Choose colour from palette|If f>2 then Text Shadow 10,20,f*3,$333333ff // Apply a shadow to the last 3|Text 100+f*70,f*200,\"Outline Text\"\t// Draw Text|wait 0.4\t\t\t\t\t\t\t// Wait for 0.4 seconds|Next f\t\t\t\t\t\t\t\t\t// Repeat loop|End|~~~||This example draws a text phrase several times in different colours with the font outlined in black|~~~|#googleFont:\"mystery quest\"\t\t\t\t// Choose a Google Font|Curs Off : Cls 1\t\t\t\t\t\t// Set up screen, white background|Set Transparent 0\t\t\t\t\t\t// Set background colour to transparent|Set font 1,180\t\t\t\t\t\t\t// Set then font size|Text Mode \"border\"\t\t\t\t\t\t// Set the Text Mode|colour 2,$000000\t\t\t\t\t\t// Define colour number 2 as black|For f=1 to 5\t\t\t\t\t\t\t// Define loop|Set Line Width f\t\t\t\t\t// Set the line width|Ink f*5+1,0,2\t\t\t\t\t\t// Set the ink colours. The last number is the border.|if f>2 then Text Shadow 10,20,f*3,$333333ff // Draw a shadow beneath last 3|Text 100+f*70,f*200,\"Border Text!\"\t// Draw Text|// Choose colour from palette|wait 0.4\t\t\t\t\t\t\t// Wait for 0.4 seconds|Next f\t\t\t\t\t\t\t\t\t// Repeat loop|End|~~~|"},{"name":"Format Text","descriptions":[{"lang":"en","text":"Draw a graphical text within a given area of the screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"text$","type":"string","text":"The text to draw."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position of the top-left corner of the draw area"},{"lang":"en","name":"y","type":"integer","text":"The vertical position of the top-left corner of the draw area"},{"lang":"en","name":"width","type":"integer","text":"The width in pixels of the draw area"},{"lang":"en","name":"*height","type":"integer","text":"The height in pixels of the draw area. If undefined and Format Text is used as a function, it indicates not to draw anything on screen and just do the calculation."},{"lang":"en","name":"tags$","type":"string","text":"A string containing tags facilitating the display of the text. Tags can be any logical combination of the following tags and have the same meaning as their Javascritp equivalents"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"The Format Text is a very powerful instruction and function that allow you to display any formatted text withing a given rectangle.||The format of the text can be:|- Native AOZ text, containing commands like =Ink$(), =Zone$(), =Url$() etc.|- Markdown UTF-8 text, with support of all the tags including table, code, links and images.|- Simple HTML tags, like <bold></bold>, <link></link> etc.|- Break lines are supported with \"\\r\" or \"<br>\"||It can be used either as a function or an instruction.||If you use it as a function, the \"height\" parameter has a special role...|- if you do NOT define it, nothing will be printed ont he screen and and Format Text will return the height of the displayed text, allowing you to prepare the display|- if you DO define the height parameter, then the output will be visible, and it will still return the height of the text on screen.||The instruction also supports tags to indicate the format:|- '#left', '#center', '#right', '#start', '#end' : horizontal align|- '#html' : indicates a text formatted in HTML|- '#md' : indicates a markdown text|- '#nozones' : will ignore the =Zone$() AOZ commands|- '#animate' : will render the links and images displayed on screen to be active, by starting a mouse-detection background process||This instruction also has this unique of drawing such a text inside of a Javascript canvas that you can grab later as a bob or a texture.||A good example of the use of this instruction is the documentation application that you will find ion the aoz/help folder: all texts and info are displayed using Markdown and Format Text.|"},{"name":"Get Text Height","descriptions":[{"lang":"en","text":"Returns the computed height of the text box"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"text$","type":"string","text":"The text of the text box."},{"lang":"en","name":"width","type":"string","text":"Width of the text box."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This command is used to get the height of a text box.|~~~|TXT$ = \"Silent, Silent Night : <br> Silent, silent Night <br> Quench the holy light <br> Of thy torches bright. <br> <br> For possess'd of Day <br> Thousand spirits stray <br> That sweet joys betray. <br> <br> Why should joys be sweet <br> Used with deceit <br> Nor with sorrows meet? <br> <br> But an honest joy <br> Does itself destroy <br> For a harlot coy. <br> <br> William Black.\"||Rem Get the Height of the text box for the text and a width of 300 pixels|H = Get Text Height( TXT$, 300 )||Rem Draw the text box|Format Text Text$ = TXT$, X = 0, Y = 0, Width = 300, Height = H|~~~|"},{"name":"Animate Text","descriptions":[{"lang":"en","text":"Handle click on links in formatted text"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*onClick$","type":"string","text":"The name of a procedure to call when the user clicks on a link. It receives as parameter LINK$ the address of the link, and LINKNAME$ the text of the link."},{"lang":"en","name":"*windowName$","type":"string","text":"\"_blank\" (default) to open links in a new browser window, \"_parent\" to load the url in the parent frame, \"_self\" to replace the current page, or the name of the window."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This instruction only works after you have displayed a text on screen with the \"Format Text\" instruction, and if it contains active zones.||It starts a background process to test the mouse over the active zones, and reacts when you click.||If no procedure is defined, then a link will open a new browser tab, or open the browser itself if the application was a stand-alone.||If you specify the name of a procedure, then this procedure is called instead.||"},{"name":"Animate Text On","descriptions":[{"lang":"en","text":"Restart animated text"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This commands restart the background process that checks the mouse over links if it was stopped or paused.|"},{"name":"Animate Text Pause","descriptions":[{"lang":"en","text":"Pauses animated text"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This commands pauses the animated text background process, after it, links will no longer react. You can restart the process with Animate Text On.|"},{"name":"Animate Text Off","descriptions":[{"lang":"en","text":"Stops animated text"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This commands deletes the animated text process and data. It cannot be restarted.|"},{"name":"Set Paint","descriptions":[{"lang":"en","text":"Set the painting mode for filled drawing forms like \"Polygon\" and \"Bar\""}],"descriptions_file":[],"parameters":[{"lang":"en","name":"onOff","type":"boolean","text":"True to fill the area with the current paitn pattern and inks, False to leave them empty and only draw the borders"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This is a simple command that toggles outlines off and on for any shapes drawn using the POLYGON and BAR|instructions. Follow SET PAINT with a mode value of 1, and borders will appear in the previous ink colour. If the|mode is set by a zero, the default setting applies, with no borders shown. For example:|~~~|Ink 0,1,2 : Set Paint 1|Bar 5,5 To 200,100|Set paint 0: Bar 210,75 To 310,190|~~~|In the last example, the INK command carried additional parameters. These optional settings follow the usual colour|number, and are used to determine paper and border colours. In other words, they can set the colours to be used for|fill patterns and outlines of bars and polygons. Remember to include any commas for unused options, as follows:|~~~|Ink 3: Rem Set ink colour|Ink ,,5: Rem Set border outline only|Ink 0,8,2: Rem Set ink, fill colour and border|Ink 6,13: Rem Set ink and background fill colour|~~~||"},{"name":"Set Pattern","descriptions":[{"lang":"en","text":"Set the filled area painting pattern"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"pattern","type":"integer","text":"If positive, a number from 0 to 34 indicate the default pattern to use, if negative, the inverse value represents the index of an image in the Images bank to use as drwaing pattern"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use this command to select from a range of pattern styles. The default status fills shapes with the current ink colour,|and is set with a zero, like this:|~~~|Set Pattern 0|~~~|If SET PATTERN is followed by a positive number from 1 to 34, shapes are filled from a ready- made selection of|patterns.View them now, by running this routine:|~~~|Do|For N=0 To 34|Set Pattern N|Ink 0,1,2: Set Paint 1|Bar 50,50 To 150,150|Locate 0,0: Print N ;\" \"|Wait 50|Next N|Loop|~~~|If SET PATTERN is followed by a negative number, shapes will be filled with a pattern grabbed from a Sprite or|Bob image, taken from the Image Bank (memory bank 1). Because these patterns can be very complex, AOZ Studio will simplify them automatically, as follows.||The width of the image is clipped to 16 pixels, and the height is rounded to the nearest power of two (2, 4, 8, 16, 32|and so on.)||The original colours of the image are discarded, and the pattern is drawn using the current ink and paper colours.|Two-colour patterns are drawn as monochrome images.||If multi-coloured images are required using the original Object colours, the INK must first be set up, as follows:|~~~|Ink 15,0|Set Pattern -1|Paint 100,100|~~~|That example fills the screen area around the given coordinates with any of the Object colours, except the|transparent colour zero. The colour index number 15 acts as a mask, defining which colours are to be used, and sets|the range from 1 to 15. If the INK command is changed to the following line, the Object will be drawn with the|normally transparent colour filled by colour 1:|~~~|Ink 15,1|~~~|Before making use of sprite images as fill patterns, remember to use GET SPRITE PALETTE to avoid messy|displays. Here is an example:|~~~|Flash Off : Cls 0|Load \"AMOSPro_Tutorial:Objects/Pattern.Abk\"|Get Sprite Palette|Box 1,1 To 319,199|Ink 15,0|Set Pattern -1|Paint 102,102|~~~||"},{"name":"Set Line","descriptions":[{"lang":"en","text":"Set the patterm of the future lines drawn by the \"Draw\", \"Draw To\", \"Box\" etc. instructions"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"pattern","type":"integer","text":"A binary mask of bits where each bit set to one will be visible and invisible if zero, repeated along the line"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command sets the style of all straight lines that are subsequently drawn. Theoretically, the 16-bit mask can|generate values for different patterns between 0 and 65535, but here is a more practical example:|~~~|Cls : Ink 2|Set Line $F0F0|Box 50,100 To 150,140|Set Line %1100110011001100|Box 60,110 To 160,160|~~~||"},{"name":"Ink","descriptions":[{"lang":"en","text":"Set the index of the colour from the palette of the current screen to use in all future graphical operations"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"integer","text":"The index of the colour in the palette to use"},{"lang":"en","name":"pattern","type":"integer","text":"An optional pattern to use"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"used to specify which colour is to be used for subsequent drawing, and the number of the colour register is set like|this:|~~~|Cls: Ink 5|Draw To 319,199|~~~|The INK instruction can also be used to set patterns for filling shapes, as well as colours for borders around shapes,|and this will be explained later.||"},{"name":" Ink","descriptions":[{"lang":"en","text":" Function that returns the graphic ink color index."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en"}],"author":" Brian Flanagan","compatible":" aoz"},{"name":" Ink$","descriptions":[{"lang":"en","text":" Returns a string to use in Text and Format Text instructions to change the color of the ink"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"color","type":"integer","text":"The index of the color in the palette for paletted screens, or the RGB value if not paletted"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en"}],"author":" Francois Lionet","compatible":" aoz"},{"name":" Set Font$","descriptions":[{"lang":"en","text":" Returns a string to use in Text and Format Text instructions to change the name of the font. Warning, for this instruction to work all fonts must have been previously loaded with a \"Set Font\" instruction."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"font$","type":"any","text":"The name or number of the font."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en"}],"author":" Francois Lionet","compatible":" aoz"},{"name":" Set Font Size$","descriptions":[{"lang":"en","text":" Returns a string to use in Text and Format Text instructions to change the height of the font."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"height","type":"integer","text":"The new height"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en"}],"author":" Francois Lionet","compatible":" aoz"},{"name":" Italic$","descriptions":[{"lang":"en","text":" Returns a string to use in Text and Format Text instructions to set the font to italic"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"onOff","type":"boolean","text":"True to set the font to italic, False to revert it to normal"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en"}],"author":" Francois Lionet","compatible":" aoz"},{"name":" Bold$","descriptions":[{"lang":"en","text":" Returns a string to use in Text and Format Text instructions to set the font to bold"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"onOff","type":"boolean","text":"True to set the font to bold, False to revert it to normal"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en"}],"author":" Francois Lionet","compatible":" aoz"},{"name":"Gr Writing","descriptions":[{"lang":"en","text":"Set all graphical operations drawing mode. Warning work in progress incomplete support TODO!"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"style","type":"integer","text":"A set of bits indicating the process. Bit 0 = 0 only draw graphics using the current ink colour, Bit 0 = 1 replace any existing graphics with new graphics (default condition), Bit 1 = 1 change old graphics that overlap with new graphics, using XOR, Bit 2 = 1 reverse ink and paper colours, creating inverse video effect"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"This command is used to set the various modes used for drawing lines, shapes, filled shapes and graphical text.|Settings are made using a bit pattern, whose values give the following results:|~~~|Bit 0 = 0 only draw graphics using the current ink colour.|Bit 0 = 1 replace any existing graphics with new graphics (default condition).|Bit 1 = 1 change old graphics that overlap with new graphics, using XOR.|Bit 2 = 1 reverse ink and paper colours, creating inverse video effect.|~~~|The normal drawing state is where new graphics overwrite old graphics, like this:|~~~|Ink 2,5 : Text 100,80, \"NORMAL TEXT\"|Wait 100 : Gr Writing 1|Text 10 ,80, \"REPLACE\"|~~~|Try the next example for some simple demonstrations of alternative settings:|~~~|Ink 2,5 : Text 100,80,\"NORMAL TEXT\"|Wait 100 : Gr Writing 0|Text 100,80, \"MERGED\"|Wait 100 : Gr Writing 4|Text 100,90, \"STENCIL\"|Wait 100 : Gr Writing 5|Text 100,100, \"REVERSE\"|~~~||"},{"name":"Clip","descriptions":[{"lang":"en","text":"Clip all further graphical operations in the current screen to a rectangle"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x1","type":"integer","text":"The horizontal coordinate of the top-left corner of the clipping rectangle"},{"lang":"en","name":"y1","type":"integer","text":"The vertical coordinate of the top-left corner of the clipping rectangle"},{"lang":"en","name":"x2","type":"integer","text":"The horizontal coordinate of the bottom-right corner of the clipping rectangle"},{"lang":"en","name":"y2","type":"integer","text":"The vertical coordinate of the bottom-right corner of the clipping rectangle"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"This command is used to set an invisible rectangular boundary on the screen, using the normal top left-hand corner|to bottom right-hand corner coordinates. All subsequent drawing operations will be clipped off when they reach|these boundaries. To toggle the command and restore the normal screen display area, use CLIP and omit the|coordinates. Areas that are preserved outside of the clipped zone can be used for items such as borders and control|panels. For example:|~~~|Clip 150,5 To 280,199|For R=4 To 96 Step 4|Gr Locate 150,R+5|Ellipse ,,R+9,R|Next R|~~~|"},{"name":"Clip","descriptions":[{"lang":"en","text":"Removes the clipping rectangle and allow drawing on the whole surface of the screen"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"Used without parameters, the Clip command removes any clipping rectangle from the screen and restores the drawing area to the entire surface.|"},{"name":"Set Text","descriptions":[{"lang":"en","text":"Change the style used by Print, by selecting 0 or more of eight different styles (deprecated - use Set Print)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"style","type":"integer","text":"A bit-map indicating the style used by Print."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The SET TEXT command allows you to change the style used by Print, by selecting 0 or more of the eight different styles:||~~~|Bit 0 Underline|Bit 1 Bold|Bit 2 Italic|Bit 3 Shade|Bit 4 Inverse|Bit 5 Shadow|Bit 6 Outline|Bit 7 [future]|~~~|NOTE:  The [future] style does nothing at this time.  It is reserved for future use.|NOTE2: SET TEXT 0 sets Normal text.  (No special styles.)|"},{"name":"Set Print","descriptions":[{"lang":"en","text":"Change the style of a font used by Print instructions by selecting one of eight different styles"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"style","type":"integer","text":"A bit-map indicating the style used by Print."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The SET PRINT command allows you to change the style used by Print, by selecting 0 or more of the eight different styles:||~~~|Bit 0 Underline|Bit 1 Bold|Bit 2 Italic|Bit 3 Shade|Bit 4 Inverse|Bit 5 Shadow|Bit 6 Outline|Bit 7 [future]|~~~|NOTE:  The [future] style does nothing at this time.  It is reserved for future use.|"},{"name":"Text Styles","descriptions":[{"lang":"en","text":"Return the index reference of the text style you last selected using \"Set Text\""}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"A bit-map in the same format as the one used in the \"Set Text\" command"}],"content":"The SET TEXT command allows you to change the style of a font by selecting one of eight different styles that are|produced by mixing the following three elements\"|~~~|Bit 0 Underline|Bit 1 Bold|Bit 2 Italic|Bit 3 Shade|Bit 4 Inverse|Bit 5 Shadow|Bit 6 Outline|~~~|"},{"name":"Paste Image","descriptions":[{"lang":"en","text":"Draws an image from the image bank in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"Horizontal coordinate of the paste"},{"lang":"en","name":"y","type":"integer","text":"Vertical coordinate of the paste"},{"lang":"en","name":"image","type":"integer","text":"Index of the image in the \"Images\" bank"},{"lang":"en","name":"scaleX#","type":"float","text":"Horizontal scaling, identical to the bob Scale parameter"},{"lang":"en","name":"scaleY#","type":"float","text":"Horizontal scaling, identical to the bob Scale parameter"},{"lang":"en","name":"angle#","type":"float","text":"Angle of rotation of the image around it's hot-spot"},{"lang":"en","name":"skewX#","type":"float","text":"Horizontal skew, values should be experimented. 0 displays the bob in original proportions"},{"lang":"en","name":"skewY#","type":"float","text":"Vertical skew, values should be experimented. 0 displays the bob in original proportions"},{"lang":"en","name":"alpha#","type":"float","text":"Alpha value. 1 is fully opaque, 0 is fully transparent (invisible)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"PASTE IMAGE takes an image held in the Image Bank, and draws it straight onto the current screen.|proceeding.||It is important to note that the coordinates for the given image number are measured from the top left-hand corner of the image, and take no account of the current hot spot setting!\"||~~~|Cls 0|Rem The following Palette values go on one line|For C=1 To 15|Ink C : Disc 16,16,15|Next C|Do|Rem Choose a random circle and choose its position|N=Rnd(14)+1 : X=Rnd(1280) : Y=Rnd(720)|Rem Paste image on screen at new coordinates|Paste Image X,Y,N|Loop|~~~||"}]},{"name":"Icon Commands","id":1639692454141,"descriptions":[{"lang":"en","text":"Instructions and functions to handle icons"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Paste Icon","descriptions":[{"lang":"en","text":"Draw an icon from the Icons bank into a screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"Horizontal coordinate of drawing"},{"lang":"en","name":"y","type":"integer","text":"Vertical coordinate of drawing"},{"lang":"en","name":"iconIndex","type":"index","text":"Index of the icon in the Icons bank"},{"lang":"en","name":"scaleX#","type":"float","text":"Horizontal scaling of the icon, 1 = original size, 0.5 = half, 2 = twice, etc (optional)"},{"lang":"en","name":"scaleY#","type":"float","text":"Vertical scaling of the icon, 1 = original size, 0.5 = half, 2 = twice, etc (optional)"},{"lang":"en","name":"angle#","type":"float","text":"Angle of rotation, in radian (default) or degree after the \"Degree\" instruction has been used (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use the PASTE ICON command to draw the specified Icon number already stored in Bank 2, on screen. The screen position is defined by graphic coordinates, and can be anywhere you like. Icon images will be clipped in the normal way, if they exceed the standard limitations. Here is a simple example:|~~~|Load Image \"AMOSPro_Examples:Iff/logo.iff\"|Z=0|For A=0 To 304 Step 16|Inc Z|Get Block Z,A,1,16,199|Next A|Cls 0|For A=0 To 304 Step 16|Put Block Z,A,0|Dec Z|Wait Vbl|Next A|~~~|"},{"name":"Make Icon Mask","descriptions":[{"lang":"en","text":"Create a transparency mask out of the full black color of an image in Icons bank (RGB = $000000)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"iconIndex","type":"index","text":"Index of the image work on"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Normally, any Icons that are drawn on screen completely replace the existing background image, and the Icon|appears in a rectangular box filled with colour zero. If you prefer to overlay Icons on top of the current graphics, a|mask must be created. This is achieved by the MAKE ICON MASK command, and sets colour zero to transparent.|All Icons in Bank 2 will be affected by this instruction, unless an optional Icon number is given, in which case only|that Icon will be masked.|"},{"name":"No Icon Mask","descriptions":[{"lang":"en","text":"Removes the transparency mask of an icon in the Icons bank, turning the icon fully opaque"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"iconIndex","type":"index","text":"Index of the icon work on"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command performs exactly the same task as the \"NO MASK\" instruction except that it|is used with Icons instead of Bobs.|"},{"name":"Ins Icon","descriptions":[{"lang":"en","text":"Inserts an empty icon in Icons bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"position","type":"integer","text":"Position to insert at"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The INS ICON instruction operates in exactly the same way as \"INS BOB\"...|"},{"name":"Del Icon","descriptions":[{"lang":"en","text":"Delete an icon Icons bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*iconIndex","type":"index","text":"Index of the icon to delete"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"DEL ICON erases the Icon whose number is specified from Bank 2. A second Icon number may also be given, in|which case, all Icons from the first number TO the second number will be deleted. When the final Icon in the bank|has been deleted, the whole bank will be removed from memory.||"},{"name":"Get Icon","descriptions":[{"lang":"en","text":"Captures a portion of the current screen and add the image to the Icons bank."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*screenIndex","type":"index","text":"Index of the screen to capture from"},{"lang":"en","name":"iconIndex","type":"index","text":"Index of the icon to grab"},{"lang":"en","name":"x1","type":"integer","text":"Horizontal coordinate of the top-left corner of the capture area"},{"lang":"en","name":"y1","type":"integer","text":"Vertical coordinate of the top-left corner of the capture area"},{"lang":"en","name":"x2","type":"integer","text":"Horizontal coordinate of the bottom-right corner of the capture area"},{"lang":"en","name":"y2","type":"integer","text":"Vertical coordinate of the bottom-right corner of the capture area"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The GET ICON command grabs an image from the screen and loads it into an Icon. Specify the Icon number, and|then give the coordinates of the rectangle that is to be grabbed, from the top left-hand corner to the bottom righthand|corner. If the Icon whose number you specify does not already exist, it will be created in Bank 2. If the|memory bank has not been reserved, this will also be done automatically.||An optional screen number can also be given, immediately after the GET ICON instruction, and this will select the|screen to be used as the source of the Icon's image. If this screen number is omitted, the image is taken from the|current screen.||"},{"name":"Get Icon Palette","descriptions":[{"lang":"en","text":"Copy the colour palette from the Icons bank to the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"mask","type":"integer","text":"Mask of bits where each bit set to 1 represent a colour to capture and 0 a colour to ignore, up to 32 (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This instruction is usually employed to initialise a screen, after Icons have been loaded from disc.|GET ICON PALETTE grabs the colours of the Icon images stored in Bank 2, and loads them in to the current|screen.|"}]},{"name":"Interval","id":1639692454145,"descriptions":[{"lang":"en","text":"Instructions and functions to manage the interval in AOZ"}],"descriptions_file":[],"author":"Baptiste Bideaux","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Set Interval","descriptions":[{"lang":"en","text":"Call a procedure all the N milliseconds, and return its ID"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"delay","type":"integer","text":"Delay in milliseconds to call the procedure"},{"lang":"en","name":"procName$","type":"string","text":"Name of the AOZ procedure to call"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"ID of the interval"}],"compatible":" aoz, stos, amos","content":"This example displays a \"Hello World\" message all the seconds...||~~~|A = Set Interval( 1000, \"HELLO\" )||Procedure HELLO[ ID ]|Print \"Hello World!\"|End Proc||~~~|"},{"name":"Clear Interval","descriptions":[{"lang":"en","text":"Delete a process setted with the Set Interval function. The AOZ procedure associated will not called any more."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id","type":"integer","text":"The ID returned by the Set Interval Function"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This example displays a \"Hello World\" message during 5 seconds and delete the process...||~~~|A = Set Interval( 1000, \"HELLO\" )|TM = 0 : Global TM|Do|Wait Vbl|Loop||Procedure HELLO[ ID ]|Print \"Hello World!\"|TM = TM + 1|If TM = 5 Then Clear Interval ID : Print \"Interval deleted\"|End Proc||~~~|"}]},{"name":"Keyboard and Mouse","id":1639692454148,"descriptions":[{"lang":"en","text":"Instructions and functions to handle the keyboard and the mouse"}],"descriptions_file":[],"author":"Francois Lionet and Brian Flanagan","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Key Code Table","descriptions":[],"descriptions_file":[{"lang":"en","text":"<table class=\"table\" style=\"border: 1px solid #888888\"><thead>  <tr>    <th style=\"width: 33%; background-color: #AADDFF; padding: 4px;\">Key Code</th>    <th style=\"width: 67%; background-color: #AADDFF; padding: 4px;\">Key</th>  </tr></thead><tbody class=\"table-body\"><tr><td>0</td><td>That key has no keycode</td></tr><tr><td>3</td><td>break</td></tr><tr><td>8</td><td>backspace / delete</td></tr><tr><td>9</td><td>tab</td></tr><tr><td>12</td><td>clear</td></tr><tr><td>13</td><td>enter</td></tr><tr><td>16</td><td>shift</td></tr><tr><td>17</td><td>ctrl</td></tr><tr><td>18</td><td>alt</td></tr><tr><td>19</td><td>pause/break</td></tr><tr><td>20</td><td>caps lock</td></tr><tr><td>21</td><td>hangul</td></tr><tr><td>25</td><td>hanja</td></tr><tr><td>27</td><td>escape</td></tr><tr><td>28</td><td>conversion</td></tr><tr><td>29</td><td>non-conversion</td></tr><tr><td>32</td><td>spacebar</td></tr><tr><td>33</td><td>page up</td></tr><tr><td>34</td><td>page down</td></tr><tr><td>35</td><td>end</td></tr><tr><td>36</td><td>home</td></tr><tr><td>37</td><td>left arrow</td></tr><tr><td>38</td><td>up arrow</td></tr><tr><td>39</td><td>right arrow</td></tr><tr><td>40</td><td>down arrow</td></tr><tr><td>41</td><td>select</td></tr><tr><td>42</td><td>print</td></tr><tr><td>43</td><td>execute</td></tr><tr><td>44</td><td>Print Screen</td></tr><tr><td>45</td><td>insert</td></tr><tr><td>46</td><td>delete</td></tr><tr><td>47</td><td>help</td></tr><tr><td>48</td><td>0</td></tr><tr><td>49</td><td>1</td></tr><tr><td>50</td><td>2</td></tr><tr><td>51</td><td>3</td></tr><tr><td>52</td><td>4</td></tr><tr><td>53</td><td>5</td></tr><tr><td>54</td><td>6</td></tr><tr><td>55</td><td>7</td></tr><tr><td>56</td><td>8</td></tr><tr><td>57</td><td>9</td></tr><tr><td>58</td><td>:</td></tr><tr><td>59</td><td>semicolon (firefox), equals</td></tr><tr><td>60</td><td>&lt;</td></tr><tr><td>61</td><td>equals (firefox)</td></tr><tr><td>63</td><td>√ü</td></tr><tr><td>64</td><td>@ (firefox)</td></tr><tr><td>65</td><td>a</td></tr><tr><td>66</td><td>b</td></tr><tr><td>67</td><td>c</td></tr><tr><td>68</td><td>d</td></tr><tr><td>69</td><td>e</td></tr><tr><td>70</td><td>f</td></tr><tr><td>71</td><td>g</td></tr><tr><td>72</td><td>h</td></tr><tr><td>73</td><td>i</td></tr><tr><td>74</td><td>j</td></tr><tr><td>75</td><td>k</td></tr><tr><td>76</td><td>l</td></tr><tr><td>77</td><td>m</td></tr><tr><td>78</td><td>n</td></tr><tr><td>79</td><td>o</td></tr><tr><td>80</td><td>p</td></tr><tr><td>81</td><td>q</td></tr><tr><td>82</td><td>r</td></tr><tr><td>83</td><td>s</td></tr><tr><td>84</td><td>t</td></tr><tr><td>85</td><td>u</td></tr><tr><td>86</td><td>v</td></tr><tr><td>87</td><td>w</td></tr><tr><td>88</td><td>x</td></tr><tr><td>89</td><td>y</td></tr><tr><td>90</td><td>z</td></tr><tr><td>91</td><td>Windows Key / Left ‚åò / Chromebook Search key</td></tr><tr><td>92</td><td>right window key</td></tr><tr><td>93</td><td>Windows Menu / Right ‚åò</td></tr><tr><td>95</td><td>sleep</td></tr><tr><td>96</td><td>numpad 0</td></tr><tr><td>97</td><td>numpad 1</td></tr><tr><td>98</td><td>numpad 2</td></tr><tr><td>99</td><td>numpad 3</td></tr><tr><td>100</td><td>numpad 4</td></tr><tr><td>101</td><td>numpad 5</td></tr><tr><td>102</td><td>numpad 6</td></tr><tr><td>103</td><td>numpad 7</td></tr><tr><td>104</td><td>numpad 8</td></tr><tr><td>105</td><td>numpad 9</td></tr><tr><td>106</td><td>multiply</td></tr><tr><td>107</td><td>add</td></tr><tr><td>108</td><td>numpad period (firefox)</td></tr><tr><td>109</td><td>subtract</td></tr><tr><td>110</td><td>decimal point</td></tr><tr><td>111</td><td>divide</td></tr><tr><td>112</td><td>f1</td></tr><tr><td>113</td><td>f2</td></tr><tr><td>114</td><td>f3</td></tr><tr><td>115</td><td>f4</td></tr><tr><td>116</td><td>f5</td></tr><tr><td>117</td><td>f6</td></tr><tr><td>118</td><td>f7</td></tr><tr><td>119</td><td>f8</td></tr><tr><td>120</td><td>f9</td></tr><tr><td>121</td><td>f10</td></tr><tr><td>122</td><td>f11</td></tr><tr><td>123</td><td>f12</td></tr><tr><td>124</td><td>f13</td></tr><tr><td>125</td><td>f14</td></tr><tr><td>126</td><td>f15</td></tr><tr><td>127</td><td>f16</td></tr><tr><td>128</td><td>f17</td></tr><tr><td>129</td><td>f18</td></tr><tr><td>130</td><td>f19</td></tr><tr><td>131</td><td>f20</td></tr><tr><td>132</td><td>f21</td></tr><tr><td>133</td><td>f22</td></tr><tr><td>134</td><td>f23</td></tr><tr><td>135</td><td>f24</td></tr><tr><td>136</td><td>f25</td></tr><tr><td>137</td><td>f26</td></tr><tr><td>138</td><td>f27</td></tr><tr><td>139</td><td>f28</td></tr><tr><td>140</td><td>f29</td></tr><tr><td>141</td><td>f30</td></tr><tr><td>142</td><td>f31</td></tr><tr><td>143</td><td>f32</td></tr><tr><td>144</td><td>num lock</td></tr><tr><td>145</td><td>scroll lock</td></tr><tr><td>151</td><td>airplane mode</td></tr><tr><td>160</td><td>^</td></tr><tr><td>161</td><td>!</td></tr><tr><td>162</td><td>ÿõ (arabic semicolon)</td></tr><tr><td>163</td><td>#</td></tr><tr><td>164</td><td>$</td></tr><tr><td>165</td><td>√π</td></tr><tr><td>166</td><td>page backward</td></tr><tr><td>167</td><td>page forward</td></tr><tr><td>168</td><td>refresh</td></tr><tr><td>169</td><td>closing paren (AZERTY)</td></tr><tr><td>170</td><td>*</td></tr><tr><td>171</td><td>~ + * key</td></tr><tr><td>172</td><td>home key</td></tr><tr><td>173</td><td>minus (firefox), mute/unmute</td></tr><tr><td>174</td><td>decrease volume level</td></tr><tr><td>175</td><td>increase volume level</td></tr><tr><td>176</td><td>next</td></tr><tr><td>177</td><td>previous</td></tr><tr><td>178</td><td>stop</td></tr><tr><td>179</td><td>play/pause</td></tr><tr><td>180</td><td>e-mail</td></tr><tr><td>181</td><td>mute/unmute (firefox)</td></tr><tr><td>182</td><td>decrease volume level (firefox)</td></tr><tr><td>183</td><td>increase volume level (firefox)</td></tr><tr><td>186</td><td>semi-colon / √±</td></tr><tr><td>187</td><td>equal sign</td></tr><tr><td>188</td><td>comma</td></tr><tr><td>189</td><td>dash</td></tr><tr><td>190</td><td>period</td></tr><tr><td>191</td><td>forward slash / √ß</td></tr><tr><td>192</td><td>grave accent / √± / √¶ / √∂</td></tr><tr><td>193</td><td>?, / or ¬∞</td></tr><tr><td>194</td><td>numpad period (chrome)</td></tr><tr><td>219</td><td>open bracket</td></tr><tr><td>220</td><td>back slash</td></tr><tr><td>221</td><td>close bracket / √•</td></tr><tr><td>222</td><td>single quote / √∏ / √§</td></tr><tr><td>223</td><td>`</td></tr><tr><td>224</td><td>left or right ‚åò key (firefox)</td></tr><tr><td>225</td><td>altgr</td></tr><tr><td>226</td><td>&lt; /git &gt;, left back slash</td></tr><tr><td>230</td><td>GNOME Compose Key</td></tr><tr><td>231</td><td>√ß</td></tr><tr><td>233</td><td>XF86Forward</td></tr><tr><td>234</td><td>XF86Back</td></tr><tr><td>235</td><td>non-conversion</td></tr><tr><td>240</td><td>alphanumeric</td></tr><tr><td>242</td><td>hiragana/katakana</td></tr><tr><td>243</td><td>half-width/full-width</td></tr><tr><td>244</td><td>kanji</td></tr><tr><td>251</td><td>unlock trackpad (Chrome/Edge)</td></tr><tr><td>255</td><td>toggle touchpad</td></tr></tbody></table><br>"}],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[{"lang":"en","text":"key,code,keys,codes,keycode,keycodes,list,table,reference"}],"since":"","last":"","return":[],"compatible":"aoz"},{"name":"Inkey$","descriptions":[{"lang":"en","text":"Checks to see if a key has been pressed, and reports back its value in a string"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The value of the last key pressed"}],"compatible":" aoz, stos, amos","content":"This function checks to see if a key has been pressed, and reports back its value in a string. For example:|~~~|Do|K$=Inkey$|If K$<>Then Print \"You pressed a key!\"|Loop|~~~|Now use the INKEY$ function to move your cursor around the screen, like this:|~~~|Print \"Use your cursor keys\"|Do|K$=Inkey$|If K$ <> Then Print K$;|Loop|~~~|The INKEY$ function does not wait for you to input anything from the keyboard, so if a character is not entered an empty string is returned.|INKEY$ can only register a key-press from one of the keys that carries its own Ascii code, and the Ascii code numbers that represent the characters which can be printed on the screen.||It has also been explained that certain keys like [Help] and the function keys [Fl] to [F10] do not carry as Ascii code at all, and if INKEY$ detects that this type of key has been pressed, a character with a value of zero will be returned. When this happens, the internal|scan codes\" of these keys can be found.\"||"},{"name":"Input$","descriptions":[{"lang":"en","text":"Anticipate a number of characters to input into a string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"numChars","type":"integer","text":"Number of characters to anticipate"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The text entered by the user"}],"content":"This function loads a given number of characters into a string variable, waiting for the user to enter each character in|turn. Although characters will not appear on the screen, similar to INKEY$, the two instructions are totally different.||Here is an example:|~~~|Clear Key : Print \"Please type in ten characters\"|V$=Input$(10) : Print \"You typed: \";V$|~~~|"},{"name":"Input","descriptions":[{"lang":"en","text":"The INPUT command is used to enter information into one or more variables, separated by commas"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"variable","type":"variable","text":"The variable to store the return in, any type"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The INPUT command is used to enter information into one or more variables. Any variable may be used, as well as|any set of variables, providing they are separated by commas. A question mark will automatically appear at the|current cursor position as a prompt for your input.||If your own \"Prompt string\" is included, it will be printed out before your information is entered. Please note that a|semi-colon must be used between your prompt text and the variable list, a comma is not allowed for this purpose.|You may also use an optional semi-colon at the end of your variable list, to specify that the text cursor is not to be|affected by the INPUT command, and will retain its original position after your data has been entered.||When INPUT is executed, the program will wait for the required information to be entered via the keyboard, and|each variable in the list must be matched by a single value entered by the user. These values must be of exactly the|same type as the original variables, and should be separated by commas.||For example:||~~~|Print \"Type in a number\"|Input A|Print \"Your number was \";A|Input \"Type in a floating point number\";N#|Print \"Your number was \";N#|Input \"What's your name?\";Name$|Locate 23, : Print \"Hello \";Name$|~~~|"},{"name":"Line Input","descriptions":[{"lang":"en","text":"Input a list of variables separated by [Return]"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"variable","type":"variable","text":"The variable to store the return in, any type"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"LINE INPUT is identical in usage to \"INPUT\", except that is uses a press of the [Return] key to separate each value you enter via the keyboard instead of a comma. Try this:|~~~|Line Input \"Type in three numbers\";A,B,C|Print A,B,C|~~~|"},{"name":"Wait Key","descriptions":[{"lang":"en","text":"Pauses the application until the user presses a key"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This simple command waits for a single key-press before acting on the next instruction. For example:|~~~|Print \"Please press a key\" : Wait key : Print \"Thank you!\"|~~~|"},{"name":"Key Speed","descriptions":[{"lang":"en","text":"Change key repeat speed. Not implented in HTML applications, maybe later in executable applications"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"timeLag","type":"integer","text":"The time-lag before repeat, in 1/50th of second"},{"lang":"en","name":"delaySpeed","type":"integer","text":"The delay before each repeated key, in 1/50th of second"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"notimplemented","content":"During editing, a character or cursor movement is repeated for as long as its key is held down. This can be|frustrating if it causes unwanted characters or cursor movements. KEY SPEED lets you change the repeat rate while|a key is held down, to your own particular preference. State the time-lag you want to use between pressing a key|and the start of the repeat sequence, measured in 50ths of a second.Follow this by the delay-speed between each character you type, also in 50ths of a second. This line will slow|everything down:|~~~|Key Speed 50,50: Rem One second delay|~~~|The following setting may well prevent you from editing at all!\"|~~~|Key Speed 1,1: Rem Ridiculously fast|~~~|"},{"name":"Key State","descriptions":[{"lang":"en","text":"Test for a specific key press"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"keyCode","type":"integer","text":"The Javascript code of the key to test. The Amiga Scan Code in Amiga mode"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"true if the key is pressed, False if not"}],"compatible":" aoz, stos, amos","content":"Use this function to check whether or not a specific key has been pressed.|The relevant scan code should be enclosed in brackets, and when the associated key is being pressed KEY STATE will return a value of TRUE, otherwise the result will be given as FALSE.||For example:|~~~|Do|If Key State(69)=True Then Print \"ESCAPE!\" : Rem Esc key pressed|If Key State(95)=True Then Print \"HELP!\": Rem Help key pressed|Loop|~~~|"},{"name":"Key Shift","descriptions":[{"lang":"en","text":"Return the state of the modifier keys"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"A set of flags indicating the state of the various modifier keys"}],"compatible":" aoz, stos, amos","content":"KEY SHIFT is used to report the current status of those keys which cannot be detected by either INKEY$ or|SCANCODE because they do not carry the relevant codes. These \"control keys can kb tested individually, or a test|can be set up for any combination of such keys pressed together. A single call to the KEY SHIFT function can test|for all eventualities, by examining a bit map in the following format\"|~~~|Bit \tKey \t\tTested Notes|0 \tleft [Shift] \tOnly one [Shift] key can be tested at a time|1 \tright [Shift] \tOnly one [Shift] key can be tested at a time|2 \t[Caps Lock] \tEither ON or OFF|3 \t[Ctrl]|4 \tleft [Alt]|5 \tright [Alt]|6 \tleft [Platform] \tThis is the Windows key on windows platforms, Amiga key on the Amiga etc.|7 \tright [Platform]|~~~|If the report reveals that a bit is set to 1, then the associated key has been held down by the user, otherwise a 0 is|given. Here is a practical example:|~~~|Centre \"Please press some Control keys\"|Curs Off|Do|Locate 14,4: Print Bin$(Key Shift,8)|Loop|~~~|These keys can also be used when setting up macro definitions, using the \"SCAN$\" and \"KEY$\" functions...|"},{"name":"Key Name$","descriptions":[{"lang":"en","text":"Return the Javascript name of the last pressed key"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The Javascript name of the key"}],"compatible":" aoz","content":"This function has been added to AOZ to provide a simple way to know on which key the user has pressed.|The value returned are platform independant, ensuring your application will work on every machine.||You can find the list of Javascript key name [here](http://javascriptkeycode.com/).|"},{"name":"ScanCode","descriptions":[{"lang":"en","text":"Return the scancode of a key entered with INKEY$"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The code of the key that was entered by the user and detected by the last INKEY$. Will report Javascript key-codes for PC, and Amiga ScanCodes in Amiga emulation"}],"compatible":" aoz, stos, amos","content":"SCANCODE returns the internal scan code of a key that has already been entered using the INKEY$ function.|The next example may be tested by pressing the function keys, [Del] and [Help]. To interrupt the example, press [Ctrl]+[C].|~~~|Do|While K$= \"\"|K$=Inkey$|Wend|If Asc(K$)=0 Then Print \"No Ascii Code\"|Print \"The Scan Code is \";Scancode|End If|Loop|~~~||"},{"name":"ScanShift","descriptions":[{"lang":"en","text":"Return shift status of key entered with INKEY$"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"A mask of bits indicating the sate of the SHIFT key. =0 no Shift key pressed, <>0 one of the Shift key is pressed"}],"compatible":" aoz, stos, amos","content":"To determine if keys are pressed at the same time as either or both of the [Shift] keys, the Scanshift function returns|the following values:|~~~|Value \tMeaning|0 \tno [Shift] key pressed|1 \t[Left Shift] pressed|2 \t[Right Shift] pressed|3 \tboth [Shift] keys pressed|~~~|Try out the following example by pressing various keys, in combination with the [Shift] keys:|~~~|Do|A$=Inkey$|S=Scanshift|If S<>0|Print S|End If|Loop|~~~|"},{"name":"Put Key","descriptions":[{"lang":"en","text":"Load a string of characters directly into the keyboard buffer, enabling you to simulate user typing (in INPUT functions for example)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"text$","type":"string","text":"The texte to put in the buffer"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This command loads a string of characters directly into the keyboard buffer, and it is most commonly used to set up|defaults for your INPUT routines. Note that end of line returns can be included using a CHR$(13) character. In the|next example, \"NO\" is assigned to the default INPUT string.|~~~|Do|Put Key \"NO\"|Input \"Do you love me, Yes or No: \";A$|B$=Upper$(A$)|If B$=\"NO\" Then Boom : Wait 50: Exit|Loop|~~~|"},{"name":"Clear Key","descriptions":[{"lang":"en","text":"Re-set the keyboard buffer. Might not have an effect on all platforms."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"When an appropriate character is entered from the keyboard, its Ascii code is placed in an area of memory called|the keyboard buffer. This buffer is then examined by the INKEY$ function in order to report on key presses.|CLEAR KEY completely erases this buffer and re-sets the keyboard, making it a very useful command at the|beginning of a program when the keyboard buffer may be filled with unwanted information. CLEAR KEY can also|be called immediately before a WAIT KEY command, to make sure that the program waits for a fresh key-press|before proceeding.||"},{"name":"Key$","descriptions":[{"lang":"en","text":"Reserved variable. Define a keyboard macro"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"macro$","type":"string","text":"The text of the macro"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"KEY$ assigns the contents of the specified command$ to a function key number from 1 to 20.||Once done, a press on the given key will be identical to the user typeing the text on the keyboard.|"},{"name":"Scan$","descriptions":[{"lang":"en","text":"Return a scan-code for use with Key$"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"scanCode","type":"integer","text":"The Javascript code of the key for PC, and the Amiga scan code for Amiga emulation"},{"lang":"en","name":"mask","type":"integer","text":"A mask of bits, wioth the same format as KEY SHIFT"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The string to use with Key$"}],"compatible":" aoz, stos, amos","content":"The scan-code parameter refers to the scan-code of a key that is to be used in one of your macro definitions. There|is also an optional mask parameter, which sets special keys such as [Ctrl] and [Alt], and the format is the same as|for \"KEY SHIFT\".|"},{"name":"Hide On","descriptions":[{"lang":"en","text":"Hide the mouse pointer (Deprecatred, use \"Hide\")"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This instruction hides the mouse pointer by making it invisible. Although it cannot be seen, it is still active and|sending back reports, and the position of the mouse pointer co-ordinates can still be read. AOZ Studio will|automatically count the number of times that the HIDE instruction is used, and employ this number to SHOW the|mouse pointer once again at your command. If you prefer to keep the mouse pointer invisible all the time and ignore|the counting system, use the special ON version of the instruction, like this:|~~~|Hide On|~~~|"},{"name":"Hide","descriptions":[{"lang":"en","text":"Hide the mouse pointer"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction hides the mouse pointer by making it invisible. Although it cannot be seen, it is still active and|sending back reports, and the position of the mouse pointer co-ordinates can still be read. AOZ Studio will|automatically count the number of times that the HIDE instruction is used, and employ this number to SHOW the|mouse pointer once again at your command. If you prefer to keep the mouse pointer invisible all the time and ignore|the counting system, use the special ON version of the instruction, like this:|~~~|Hide|~~~|"},{"name":"Show On","descriptions":[{"lang":"en","text":"Show the mouse pointer (Deprecated, use \"Show\")"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This makes the mouse pointer visible again after a HIDE instruction.As a default, the system counts the number of times that the HIDE command has been used, then reveals the pointer|on screen when the number of SHOWs equals the number of HIDEs. To bypass this counting system and reveal the mouse pointer immediately, use SHOW ON.|~~~|Do|For N=1 To 10|Hide : Wait N : Show|Next N|Loop|~~~||"},{"name":"Show","descriptions":[{"lang":"en","text":"Show the mouse pointer"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This makes the mouse pointer visible again after a HIDE instruction.As a default, the system counts the number of times that the HIDE command has been used, then reveals the pointer|on screen when the number of SHOWs equals the number of HIDEs. To bypass this counting system and reveal the mouse pointer immediately, use SHOW.|~~~|Do|For N=1 To 10|Hide : Wait N : Show|Next N|Loop|~~~|"},{"name":"Change Mouse","descriptions":[{"lang":"en","text":"Change the shape of the pointer arrow"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"shape","type":"any","text":"Shape to use"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"|The behavior fo the instruction is different depending on the type of the *shape* parameter...||### *shape* is a number||Pre-defined shapes are selected when the value of *shape* is under 3...|~~~|Number \tShape of mouse cursor|1 \t\tArrow pointer (default shape)|2 \t\tCross-hair|3 \t\tClock|~~~|If you select an image number greater than three,|AOZ Studio will look at an image stored in the sprite bank, and install it as the mouse pointer. The first|image in the bank may be called up by using Change Mouse 4, the second by specifying number 5, and so on.||For example:|~~~|Do|For N=1 To 3|Change Mouse N|Wait 25|Next N|Loop|~~~||### *shape* is a string:|AOZ will first check if the *shape* parameter is equal to one fo the default Javascript shapes. If yes, it will set this one.||List of Javascript cursor shape: [here](http://https://www.w3schools.com/jsref/prop_style_cursor.asp/).||If not, tyhen AOZ will look int he Image bank to find the given image, and will set the mouse if found.|"},{"name":"Mouse Image","descriptions":[{"lang":"en","text":"Change the mouse pointer by an image"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"URL$","type":"string","text":"URL of the image to use. The image used must not be larger than 128x128 pixels. Supported formats are CUR, GIF, SVG and PNG. If this argument is an empty string, the mouse pointer will be reinitialized."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"Replaces the mouse cursor with an image of your choice. This image is defined by the URL passed in parameter URL$.|Using an image from the web|~~~|Cls 0|Rem Change the mouse pointer with an image from web|Mouse Image \"https://d.furaffinity.net/art/pixelhoot/1464195067/1464195067.pixelhoot_rowlet_mouse_pointer_large.png\"|Wait Key|Rem Reset the mouse pointer|Mouse Image \"\"|~~~|Using an image from the images bank:|~~~|Cls 0|Rem Change the mouse pointer by the image 10|Rem Get the data URL of the image 10|URL$ = Image DataURL$( 10 )|Mouse Image URL$|Wait Key|Rem Reset the mouse pointer|Mouse Image \"\"|~~~|"},{"name":"X Mouse","descriptions":[{"lang":"en","text":"Reserved Variable. Returns / Set the horizontal coordinate of the mouse. Note"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The horizontal coordinate of the mouse over the application in hardware coordinates"}],"compatible":" aoz, stos, amos","content":"X MOUSE reports the current location of the x-coordinate of the mouse pointer. Because movement is controlled by|the mouse rather than by software, coordinates are given in hardware notation, which is demonstrated by the|following example:|~~~|Do|Print X Mouse|Loop|~~~|This can also be used to set a new coordinate position for the mouse pointer and move it to a specific position on the|screen. This is done by assigning a value to X MOUSE as if it was a Basic variable.||For example:|~~~|For N=200 To 350|X Mouse = N|Print X Mouse|Next N|~~~||Please note that changing the cursor location is usually seen as an unfriendly action ont he user's machine, and might be forbidden on specific machines.|"},{"name":"Y Mouse","descriptions":[{"lang":"en","text":"Reserved Variable. Returns / Set the vertical coordinate of the mouse. Note"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The vertical coordinate of the mouse over the application in hardware coordinates"}],"compatible":" aoz, stos, amos","content":"Y MOUSE reports the current location of the y-coordinate of the mouse pointer. Because movement is controlled by|the mouse rather than by software, coordinates are given in hardware notation, which is demonstrated by the|following example:|~~~|Do|Print Y Mouse|Loop|~~~|This can also be used to set a new coordinate position for the mouse pointer and move it to a specific position on the|screen. This is done by assigning a value to Y MOUSE as if it was a Basic variable.||For example:|~~~|For N=200 To 350|Y Mouse = N|Print Y Mouse|Next N|~~~||Please note that changing the cursor location is usually seen as an unfriendly action ont he user's machine, and might be forbidden on specific machines.|"},{"name":"Mouse Key","descriptions":[{"lang":"en","text":"Return the status of the mouse buttons"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"A mask of bits. Bit 0"}],"compatible":" aoz, stos, amos","content":"The MOUSE KEY function checks whether one of the mouse buttons has been pressed and makes a report in the form of a binary pattern made up of these elements:|~~~|Pattern \tReport|Bit 0 \t\tLeft mouse button|Bit 1 \t\tRight mouse button|Bit 2 \t\tThird mouse button if it exists|~~~|As usual, the numbers zero and one make up the report, with a one displayed when the relevant button is held down,|otherwise a zero is shown. Try this routine:|~~~|Curs Off|Do|Locate 0,0|M = Mouse Key : Print \"Bit Pattern \";Bin$(M,8);\" Number \";M|Loop|~~~||"},{"name":"Mouse Click","descriptions":[{"lang":"en","text":"Check for click of mouse button."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"A mask of bits. Bit 0"}],"compatible":" aoz, stos, amos","content":"This is similar to MOUSE KEY, but instead of checking to see whether or not a mouse button is held down,|MOUSE CLICK is only interested in whether the user has just made a single click on a mouse button. It returns the|familiar bit pattern of these elements:|~~~|Pattern \tReport|Bit 1 \t\tSingle test for left mouse button|Bit 2 \t\tSingle test for right mouse button|Bit 3 \t\tSingle test for third mouse button, if available|~~~|These bits are automatically re-set to zero after one test has been made, so they will only check for a single key|press at a time. Here is an example:|~~~|Curs Off|Do|M=Mouse Click|If M<>0 Then Print \"Bit Pattern \";Bin$(M,8);\" Number\";M|Loop|~~~||"},{"name":"Limit Mouse","descriptions":[{"lang":"en","text":"Change the shape of the pointer arrow"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x1","type":"integer","text":"Horizontal coordinate of the top-left corner of the bounding area"},{"lang":"en","name":"y1","type":"integer","text":"Vertical coordinate of the top-left corner of the bounding area"},{"lang":"en","name":"x2","type":"integer","text":"Horizontal coordinate of the bottom-right corner of the bounding area"},{"lang":"en","name":"y2","type":"integer","text":"Vertical coordinate of the bottom-right corner of the bounding area"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command sets up a rectangular area for the mouse pointer to move around, and traps it inside the boundaries|set by hardware coordinates, from the rectangle's top-left TO bottom right-hand corner. For example:|~~~|Limit Mouse 300,100 To 350,150|~~~|If you need to restore freedom to the mouse pointer and allow it to move around the entire screen, use the LIMIT|MOUSE instruction on its own, without any coordinates after it. Note that SCREEN OPEN must be followed by a|WAIT VBL command before LIMIT MOUSE can be used, otherwise no screen will be set up for screen limits to be|set.||"},{"name":"Limit Mouse","descriptions":[{"lang":"en","text":"Without parameters, restore the displacement of the mouse to the whole screen"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos"},{"name":"Mouse Wheel","descriptions":[{"lang":"en","text":"Return the movement of the mouse wheel"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"A displacement, positive or negative and dependant of the system"}],"compatible":" aoz","content":"This example scrolls a screen by setting it's offset from the rotation of the mouse wheel.|~~~|Screen Open 0, 1280, 4000, 16\t\t// Open a large screen|For X = 0 To 1000|Ink Rnd( 16 ) : Print X;\t\t// Fill the screen with numbers|Next|Do|D = Mouse Wheel * 10\t\t\t// Multiplies the value to accelerate scrolling|Screen Offset 0, 0, D\t\t\t// Scrolls vertically|Wait Vbl|Loop|~~~|"},{"name":"Wait Click","descriptions":[{"lang":"en","text":"Pauses the application until the user presses a mouse button or touches the screen (touch screen)"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This simple command waits for a single mouse button-press before acting on the next instruction. For example:|~~~|Print \"Please press a mouse button or touch the screen\" : Wait Click : Print \"Thank you!\"|~~~|"},{"name":"Wait Input","descriptions":[{"lang":"en","text":"Pauses the application until the user presses a mouse button, touches the screen (touch screen) or press a key"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This simple command waits for a single mouse button-press or a kay-press before acting on the next instruction. For example:|~~~|Print \"Please press a mouse button, touch the screen or press a key\" : Wait Input : Print \"Thank you!\"|~~~|"}]},{"name":"Mathematics","id":1639692454162,"descriptions":[{"lang":"en","text":"Mathmatical and calculation instructions and functions"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Fix","descriptions":[{"lang":"en","text":"Set the number of decimal of floating point numbers to ASCII conversion (used in both Print and =Str$())"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number of decimals"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The FIX command changes the way floating point numbers are displayed on screen, or output to a printer. The|precision of these floating point numbers is determined by a number (n) that is specified in brackets, and there can|be four possibilities, as follows:||- If (n) is greater than 0 and less than 16, the number of figures shown after the decimal point will be n.|- If (n) equals 16 then the format is returned to normal.|- If (n) is greater than 16, any trailing zeros will be removed and the display will be proportional.|- If (n) is less than 0, the absolute value ABS(n) will determine the number of digits after the decimal point, and|all floating point numbers will be displayed in exponential format.||Here are some examples:|~~~|Fix (2) : Print Pi# : Rem Two digits after decimal point|Fix(-4) : Print Pi# : Rem Exponential with four digits after decimal point|Fix(16) : Print Pi# : Rem Revert to normal mode|~~~||"},{"name":"Radian","descriptions":[{"lang":"en","text":"Set the default angle representation in AOZ to Radians."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"If DEGREE has already been called, the RADIAN function returns to the default status, where all future angles are|expected to be entered in radians.|"},{"name":"Degree","descriptions":[{"lang":"en","text":"Set the default angle representation in AOZ to degrees."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"If, for any reason, you are unhappy with the complexities of radians, AOZ is happy to accept your|trigonometric instructions in degrees. Once the DEGREE command has been activated, all subsequent calls to the|trigonometric functions will expect degrees to be used.|~~~|Degree|Print Sin(45)|~~~||"},{"name":"Rnd","descriptions":[{"lang":"en","text":"Return a random number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*ceiling","type":"integer","text":"An optional value indicating to generate the value as an integer betwwen 0 and CEILING. If not specified the function will return a floating point value between 0 and 1"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"A value between 0 and ceiling (excluded) if the parameter is specified"},{"lang":"en","type":"float","text":"A floating point number between 0 and 1 (excluded) if no parameter is specified"}],"compatible":" aoz, stos, amos","content":"The RND function generates integers at random, between zero and any number specified in brackets. If your|specified number is greater than zero, random numbers will be generated up to that maximum number. If|you specify 0, then RND will return the last random value it generated whereas if you completely ommit the *ceiling* parameter, it will return a floating point number between 0 and 1.|~~~|Do|C=Rnd(15) : X=Rnd(320) : Y=Rnd(200)|Ink C : Text X,Y,\"AMOS Professional at RANDOM\"|Loop|~~~|"},{"name":"Randomize","descriptions":[{"lang":"en","text":"Switch the random number generator to Mersenne Twist and generate a new seed."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"seed","type":"integer","text":"An optional seed to initiate the generation of random numbers. If not specified a value callated out of the TIMER will be used."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"In practice, the numbers produced by the RND function are not genuinely random at all. They are computed by an|internal mathematical formula, whose starting point is taken from a number known as a \"seed\". This seed is set to a|standard value whenever AOZ is loaded into your Amiga, and that means that the sequence of|numbers generated by the RND function will be exactly the same each time your program is run.||This may well be acceptable for arcade games, where pre-set random patterns generated by RND can be used to|advantage, but it is a useless system for more serious applications.||The RANDOMIZE command solves this problem by setting the value of the seed directly. This seed can be any|value you choose, and each seed will generate an individual sequence of numbers. RANDOMIZE can also be used|in conjunction with the TIMER variable, to generate genuine random numbers.||"},{"name":"Sgn","descriptions":[{"lang":"en","text":"Return the sign of a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"number","text":"The value to get the sign of"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"-1 if the number is negative, 1 if it is greater than 0, 0 if it is equal to zero"}],"compatible":" aoz, stos, amos","content":"The SGN function returns a value representing the sign of a number. The three possible results are these:|~~~|-1 : the value is negative|1 : the value is positive|0 : if the value is zero|"},{"name":"Abs","descriptions":[{"lang":"en","text":"Return the absolute value of a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"number","text":"The number to get the absolute value from"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"positiveNumber","text":"The given number if it is positive, it's oppostive if it is negative."}],"compatible":" aoz, stos, amos","content":"This function is used to convert arguments into a positive number. ABS returns an absolute value of an integer or|fractional number, paying no attention to whether that number is positive or negative, in other words, ignoring its|sign.||For example:|~~~|Print Abs(-1),Abs(1)|~~~|"},{"name":"Int","descriptions":[{"lang":"en","text":"Return the integer portion of the number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"floatNumber","type":"float","text":"The number to get the integral part from"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"If floatNumner is greater than zero, return the integral part, if negative, return integral( FLOATNUMBER ) - 1"}],"compatible":" aoz, stos, amos","content":"The INT function rounds down a floating point number to the nearest whole number (integer), so that the result of|the following two example lines is 3 and -2, respectively:|~~~|Print Int(3.9999)|Print Int(-1.1)|~~~|"},{"name":"PI#","descriptions":[{"lang":"en","text":"Return the value of PI"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"the value of PI up to the 16th decimal, 3.141592653589793238"}],"compatible":" aoz, stos, amos","content":"Pi is the Greek letter it that is used to summon up a number which begins 3.141592653 and on for ever.||This number is the ratio of the circumference of a circle to its diameter, and it is used in trigonometry as the tool for calculating|aspects of circles and spheres. Note that in order to avoid clashes with your own variable names, a # character is part|of the token name. The PI# function gives a constant value of Pi in your calculations.||In the following diagram of a circle, a point is moved from the right hand side of the x-axis up along the perimeter|for a distance a, stopping at position b.|![PI](help:img/pi.png)||In conventional trigonometry, a circle is divided into 360 degrees, so a defines the number of degrees in the angle|between the x-axis and the line from the centre of the circle to point b. However, your Amiga uses a default by|which it expects all angles to be given in \"radians\" and not degrees.|"},{"name":"Min","descriptions":[{"lang":"en","text":"Return the minimal value of two numbers"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"value1","type":"any","text":"The first value to test"},{"lang":"en","name":"value2","type":"any","text":"The second value to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"any","text":"The minimal value of the two numbers"}],"compatible":" aoz, stos, amos","content":"The MIN function returns the smaller value of two expressions. Expressions can consist of strings, integers|or real numbers, but only compare like with like, as follows:|~~~|A=Min(99,1) : Print A|Print Min(\"AOZ\",\"AOZ\")|~~~|"},{"name":"Max","descriptions":[{"lang":"en","text":"Return the maximal value of two numbers"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"value1","type":"any","text":"The first value to test"},{"lang":"en","name":"value2","type":"any","text":"The second value to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"any","text":"The maximal value of the two numbers"}],"compatible":" aoz, stos, amos","content":"MAX compares two expressions and returns the largest. Different types of expressions cannot be compared in one|instruction, so they must not be mixed.||Here are some examples:|~~~|Print Max(99,1)|Print Max(\"AOZ\",\"AOZ\")|~~~|"},{"name":"Sin","descriptions":[{"lang":"en","text":"Return the Sine of an angle"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"angle","type":"angle","text":"The angle to calculate the Sine from, in Radian by default and degrees after the \"Degree\" instruction has been used"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The value of the Sine of the angle"}],"compatible":" aoz, stos, amos","content":"The SIN function calculates how far point b is above the x-axis, known as the sine of the angle a.|![PI](help:img/pi.png)||Note that SIN always returns a floating point number.||For example:|~~~|Degree|For X=0 To 319|Y#=Sin(X)|Plot X,Y#*50+100|Next X|~~~||"},{"name":"Cos","descriptions":[{"lang":"en","text":"Return the Cosine of an angle"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"angle","type":"angle","text":"The angle to calculate the Cosine from, in Radian by default and degrees after the \"Degree\" instruction has been used"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The value of the Cosine of the angle"}],"compatible":" aoz, stos, amos","content":"In the above diagram, the distance that point b is to the right of the y-axis is known as the cosine. If b goes to the|left of the y-axis, its cosine value becomes negative. (Similarly, if it drops below the x-axis, its sine value is|negative.) The COS function gives the cosine of a given angle.|![PI](help:img/pi.png)||~~~|Y#=Cos(X)|Plot X,Y#*50+100|~~~||"},{"name":"Tan","descriptions":[{"lang":"en","text":"Return the Tangent of an angle"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"angle","type":"angle","text":"The angle to calculate the Tangent from, in Radian by default and degrees after the \"Degree\" instruction has been used"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The value of the Tangent of the angle"}],"compatible":" aoz, stos, amos","content":"For any angle, the tangent is the result of when its sine is divided by its cosine. The TAN function generates the|tangent of a given angle. For example:|~~~|Degree : Print Tan(45)|Radian : Print Tan(Pi#/8)|~~~||"},{"name":"ASin","descriptions":[{"lang":"en","text":"Return the Arc Sine of a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"number","text":"The number from which to extract the Arc Sine from"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"angle","text":"The value of the Arc Sine, an angle expressed in Radian by default or degree after the \"Degree\" instruction has been used"}],"compatible":" aoz, stos, amos","content":"The ASIN function takes a number between -1 and +1, and calculates the angle which would be needed to generate this value with SIN. For example:|~~~|A#=Sin(45)|Print Asin(A#)|~~~||"},{"name":"ACos","descriptions":[{"lang":"en","text":"Return the Arc Cosine of a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"number","text":"The number from which to extract the Arc Cosine from"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"angle","text":"The value of the Arc Cosine, an angle expressed in Radian by default or degree after the \"Degree\" instruction has been used"}],"compatible":" aoz, stos, amos","content":"The ACOS function takes a number between -1 and +1, and calculates the angle which would be needed to generate this value with COS. For example:|~~~|A#=Cos(45)|Print Acos(A#)|~~~||"},{"name":"ATan","descriptions":[{"lang":"en","text":"Return the Arc Tangent of a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"number","text":"The number from which to extract the Arc Tangent from"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"angle","text":"The value of the Arc Tangent, an angle expressed in Radian by default or degree after the \"Degree\" instruction has been used"}],"compatible":" aoz, stos, amos","content":"ATAN returns the arctan of a given number, like this:|~~~|Degree : Print Tan(2)|Degree : Print Atan(0.03492082)|~~~|A hyperbola is a conical section, formed by a plane that cuts both bases of a cone. In other words, an asymmetrical|curve. Wave forms and trajectories are much more likely to follow this sort of eccentric curve, than perfect arcs of|circles. The hyperbolic functions express the relationship between various distances of a point on the hyperbolic|curve and the coordinate axes.||"},{"name":"HSin","descriptions":[{"lang":"en","text":"Return the Hyperbolic Sine of a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"angle","type":"angle","text":"The angle to calculate the Hyperbolic Sine from, in Radian by default and degrees after the \"Degree\" instruction has been used"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The value of the Hyperbolic Sine of the angle"}],"compatible":" aoz, stos, amos","content":"The HSIN function calculates the hyperbolic sine of a given angle.||"},{"name":"HCos","descriptions":[{"lang":"en","text":"Return the Hyperbolic Cosine of a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"angle","type":"angle","text":"The angle to calculate the Hyperbolic Cosine from, in Radian by default and degrees after the \"Degree\" instruction has been used"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The value of the Hyperbolic Cosine of the angle"}],"compatible":" aoz, stos, amos","content":"Use this function to find the hyperbolic cosine of an angle.|"},{"name":"HTan","descriptions":[{"lang":"en","text":"Return the Hyperbolic Tangent of a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"angle","type":"angle","text":"The angle to calculate the Hyperbolic Tangent from, in Radian by default and degrees after the \"Degree\" instruction has been used"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The value of the Tangent of the angle"}],"compatible":" aoz, stos, amos","content":"HTAN returns the hyperbolic tangent of the given angle.|"},{"name":"Sqr","descriptions":[{"lang":"en","text":"Return the square root of a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"number","text":"The positive number out of which to calculate the square root"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The value of the Square Root of the number"}],"compatible":" aoz, stos, amos","content":"This function calculates the square root of a positive number, that is to say, it returns a number that must be|multiplied by itself to give the specified value.||For example:|~~~|Print Sqr(25)|Print Sqr(11.1111)|~~~|"},{"name":"Log","descriptions":[{"lang":"en","text":"Return the base 10 logarythm of a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"number","text":"The number out of which to calculate the base 10 logarythm"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The value of the base 10 logarythm"}],"compatible":" aoz, stos, amos","content":"LOG returns the logarithm in base 10 (log 10) of the given value. For example:|~~~|Print Log(10)|A#=Log(100)|~~~|"},{"name":"Ln","descriptions":[{"lang":"en","text":"Return the Neperian Logarythm of a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"number","text":"The number out of which to calculate the Neperian Logarythm"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The value of the Neperian Logarythm"}],"compatible":" aoz, stos, amos","content":"The LN Function calculates the natural logarithm (Naperian logarithm) of the given value. For example:|~~~|Print Ln(10)|A#=Ln(100) : Print A#|~~~||"},{"name":"Exp","descriptions":[{"lang":"en","text":"Return the exponantial of a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"number","text":"The number out of which to calculate the Exponantial"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The value of the Exponantial"}],"compatible":" aoz, stos, amos","content":"Use the EXP function to return the exponential of a specified value. For example:|~~~|Print Exp(1)|~~~|"},{"name":"Get Angle","descriptions":[{"lang":"en","text":"Return the angle of the line between two points measured clockwise from horizontal-right"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x1","type":"number","text":"The horizontal coordinate of the first point"},{"lang":"en","name":"y1","type":"number","text":"The vertical coordinate of the first point"},{"lang":"en","name":"x2","type":"number","text":"The horizontal coordinate of the second point"},{"lang":"en","name":"y2","type":"number","text":"The vertical coordinate of the second point"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The value of the angle"}],"compatible":" aoz"},{"name":"Get Distance","descriptions":[{"lang":"en","text":"Measures the distance between two points in pixels"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x1","type":"number","text":"The horizontal coordinate of the first point"},{"lang":"en","name":"y1","type":"number","text":"The vertical coordinate of the first point"},{"lang":"en","name":"x2","type":"number","text":"The horizontal coordinate of the second point"},{"lang":"en","name":"y2","type":"number","text":"The vertical coordinate of the second point"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"float","text":"The distance between the two points, always positive."}],"compatible":" aoz"},{"name":"Odd ( number )","descriptions":[{"lang":"en","text":"Returns True if variable or expression is evaluated as an Odd number."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if variable or expression is an Odd number."}],"compatible":" aoz","content":"Example|~~~|For f=0 to 20|if Odd (f) then print f|next f|~~~|"},{"name":"Even ( number )","descriptions":[{"lang":"en","text":"Returns True if variable or expression  is evaluated as an Even number."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if variable or expression is an Even number."}],"compatible":" aoz","content":"Example|~~~|For f=0 to 20|if Even (f) then print f|next f|~~~|"},{"name":"Mod","descriptions":[{"lang":"en","text":"Operator. Calculates the modulo of two numbers"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This example will only print numbers between 0 and 2...|~~~|For X = 0 To 100|Print X Mod 3|Next|~~~|"},{"name":"Not","descriptions":[{"lang":"en","text":"Operator or function. Logical NOT, equivalent to ! in other languages"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"If used in a test, NOT will convert True to False...|~~~|A$ = \"AOZ\"|If Not A$ = \"AOZ\"|Print \"this will not be printed!\"|Else|Print \"Hey AOZ! :)\"|End If|~~~||If not used in a expression, it will swap over every digit in a binary number from a 0 to a 1, and vice versa. For example:|~~~|Print Bin$(Not%11110000, 8)|~~~|"}]},{"name":"Xtra Amiga Memory","id":1639692454181,"descriptions":[{"lang":"en","text":"Instructions and functions to handle memory access"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Poke","descriptions":[{"lang":"en","text":"Change a one-byte word at a memory address"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"address","type":"address","text":"The address to change. It should contain the \"maginal number\" returned by the Start function."},{"lang":"en","name":"value","type":"integer","text":"The value to set, from 0 to 255"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The POKE command moves a number from 0 to 255 into the memory location at the specified address.||The address should be resolved in AOZ by using the \"Start\" function to get the address of a bank (magical number) and adding the offset to the address. Normal computer memory is inaccessible.||This example reserves a memory bank and poke random numbers in it...|~~~|Reserve As Work 10, 1000|For A = 0 To Length( 10 )|Poke Start( 10 ) + A, Rnd( 256 )|Next|~~~|"},{"name":"Doke","descriptions":[{"lang":"en","text":"Change a two-byte word at a memory address. Value is set in little-endian in PC mode and big-endian in Amiga mode"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"address","type":"address","text":"The address to change. It should contain the \"maginal number\" returned by the Start function."},{"lang":"en","name":"value","type":"integer","text":"The value to set, fropm 0 to 65535"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The DOKE command moves a number from 0 to 65535 into the memory location at the specified address.||The address should be resolved in AOZ by using the \"Start\" function to get the address of a bank (magical number) and adding the offset to the address. Normal computer memory is inaccessible.||This example reserves a memory bank and poke random numbers in it...|~~~|Reserve As Work 10, 1000|For A = 0 To Length( 10 ) Step 2|Doke Start( 10 ) + A, Rnd( 65536 )|Next|~~~|"},{"name":"Loke","descriptions":[{"lang":"en","text":"Change a four-byte word at a memory address. Value is set in little-endian in PC mode and big-endian in Amiga mode"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"address","type":"address","text":"The address to change. It should contain the \"maginal number\" returned by the Start function."},{"lang":"en","name":"value","type":"integer","text":"The value to set"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The LOKE command moves a number from 0 to 4297967296 into the memory location at the specified address.||The address should be resolved in AOZ by using the \"Start\" function to get the address of a bank (magical number) and adding the offset to the address. Normal computer memory is inaccessible.||This example reserves a memory bank and poke random numbers in it...|~~~|Reserve As Work 10, 1000|For A = 0 To Length( 10 ) Step 4|Loke Start( 10 ) + A, Rnd( 4297967296 )|Next|~~~|"},{"name":"Poke$","descriptions":[{"lang":"en","text":"Write the ascii values of a string in memory"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"address","type":"address","text":"The address to write to. It should contain the \"maginal number\" returned by the Start function."},{"lang":"en","name":"text$","type":"string","text":"The string to write"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use the POKE$ command to take a source string and copy it directly to a chosen memory location, one character at a time.|The address parameter holds the address of the first byte to be loaded with the new string data.|The copying operation will continue until the last character of the source string is reached, and the end address will be as follows:|~~~|address+Len(string$)-1|~~~|Example|~~~|Reserve As Data 10,1000: Rem Reserve a memory bank|Poke$ Start( 10 ), \"Hello AOZ!\"|~~~|"},{"name":"Peek$","descriptions":[{"lang":"en","text":"Read a string from memory"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"address","type":"address","text":"The address to read. It should contain the \"maginal number\" returned by the Start function."},{"lang":"en","name":"*length","type":"integer","text":"The number of bytes to read."},{"lang":"en","name":"*stop$","type":"string","text":"The ascii code of the character signifying the end of the string. Default is 0"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The string contained at the address"}],"compatible":" aoz, stos, amos","content":"PEEK$ reads the maximum number of characters specified in the length parameter, into a new string. If this is not a|sensible value, the length is assumed to be 65500. The address parameter is the location of the first character to be|read.|The address should be resolved in AOZ by using the \"Start\" function to get the address of a bank (magical number) and adding the offset. Normal computer memory is inaccessible.||There is an optional stop$ parameter, and if this is included, AOZ Studio will stop in its tracks the moment a|specified stop$ character is encountered in the memory area. You will then be left with a string of characters up to|the final stop$. Here is an example using PEEK$:|~~~|Reserve As Data 10,1000 : Rem Reserve a memory bank|Poke$ Start( 10 ), \"Hello AOZ!\"|Print Peek$( Start( 10 ), 10 )|~~~|"},{"name":"Peek","descriptions":[{"lang":"en","text":"read a byte from an address"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"address","type":"address","text":"The address to change. It should contain the \"maginal number\" returned by the Start function."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The value contained at the address"}],"compatible":" aoz, stos, amos","content":"The PEEK function returns a single 8-bit byte from an address in memory.||The address is resolved in AOZ by using the \"Start\" function to get the address of a bank (magical number) and adding the offset. Normal computer memory is inaccessible.||This example reserves and fill a memory bank with random numbers, and then print then out...|~~~|Reserve As Work 10, 1000|For A = 0 To Length( 10 )|Poke Start( 10 ) + A, Rnd( 256 )|Next|Wait Key|For A = 0 To Length( 10 )|Print Peek Start( 10 ) + A; \" \";|Next|"},{"name":"Deek","descriptions":[{"lang":"en","text":"Read a two-bytes value from an address."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"address","type":"address","text":"The address to change. It should contain the \"maginal number\" returned by the Start function."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The value contained at the address"}],"compatible":" aoz, stos, amos","content":"The DEEK function returns a single 16-bit word from an address in memory. Value is read in little-endian in PC mode and big-endian in Amiga mode||The address is resolved in AOZ by using the \"Start\" function to get the address of a bank (magical number) and adding the offset. Normal computer memory is inaccessible.||This example reserves and fill a memory bank with random numbers, and then print then out...|~~~|Reserve As Work 10, 1000|For A = 0 To Length( 10 ) Step 2|Doke Start( 10 ) + A, Rnd( 65536 )|Next|Wait Key|For A = 0 To Length( 10 ) Step 2|Print Deek Start( 10 ) + A; \" \";|Next|~~~|"},{"name":"Leek","descriptions":[{"lang":"en","text":"Read a four-bytes value from an address. Value is read in little-endian in PC mode and big-endian in Amiga mode"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"address","type":"address","text":"The address to change. It should contain the \"maginal number\" returned by the Start function."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The value contained at the address"}],"compatible":" aoz, stos, amos","content":"The LEEK function returns a single 32-bit word from an address in memory. Value is read in little-endian in PC mode and big-endian in Amiga mode||The address is resolved in AOZ by using the \"Start\" function to get the address of a bank (magical number) and adding the offset. Normal computer memory is inaccessible.||This example reserves and fill a memory bank with random numbers, and then print then out...|~~~|Reserve As Work 10, 1000|For A = 0 To Length( 10 ) Step 4|Doke Start( 10 ) + A, Rnd( 65536 * 65536 )|Next|Wait Key|For A = 0 To Length( 10 ) Step 4|Print Leek Start( 10 ) + A; \" \";|Next|~~~|"},{"name":"Fill","descriptions":[{"lang":"en","text":"fill memory block with the contents of a variable."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"start","type":"integer","text":"The address to change. It should contain the \"maginal number\" returned by the Start function."},{"lang":"en","name":"finish","type":"integer","text":"The address of the end of the area to fill. It should contain the \"maginal number\" returned by the Start function."},{"lang":"en","name":"pattern","type":"integer","text":"The four-byte pattern that will be repeated when filling"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The FILL instruction packs an area of memory specified from start to finish. This area is filled with multiple copies|of a specified four-byte pattern. The addresses of the start and finish determine the size and position of the memory|block, and they must both be even.|"},{"name":"Copy","descriptions":[{"lang":"en","text":"Copy a memory block"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"start","type":"integer","text":"The address of the block to copy. It should contain the \"maginal number\" returned by the Start function."},{"lang":"en","name":"finish","type":"integer","text":"The address of the end of the area to copy. It should contain the \"maginal number\" returned by the Start function."},{"lang":"en","name":"destination","type":"integer","text":"The destination address, should be resolved in AOZ by using the \"Start\" function to get the address of a bank (magical number) and adding the offset to the address. Normal computer memory is inaccessible."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"As normal memory is unaccessible on modern machines, AOZ solves the address by using the \"Start\" function to get the address of a bank (magical number) and adding the offset.||The COPY command is used to move large sections of memory banks from one place to another.||Specify the start and finish locations of the data to be moved, then give the destination of the position of memory|area which is to be loaded with the data.||"},{"name":"Hunt","descriptions":[{"lang":"en","text":"Find a string of characters in memory"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"start","type":"integer","text":"The address of the block to copy. It should contain the \"maginal number\" returned by the Start function."},{"lang":"en","name":"finish","type":"integer","text":"The address of the end of the area to copy. It should contain the \"maginal number\" returned by the Start function."},{"lang":"en","name":"text$","type":"string","text":"The string to look for"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The position of the first character if found, zero if not found"}],"compatible":" aoz, stos, amos","content":"As normal memory is unaccessible on modern machines, AOZ solves the address by using the \"Start\" function to get the address of a bank (magical number) and adding the offset.||HUNT is really a low level version of the familiar INSTR$ command. It searches the memory area defined by the|given start and finish addresses, looking for the first occurrence of the characters held in your specified string.|If the search is successful, the position of the first character in memory is returned, otherwise a value of zero will be|given. When using this function, take great care in selecting the start and finish points for the search.|"},{"name":"BSet","descriptions":[{"lang":"en","text":"Set a bit of a variable to 1"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"variable","type":"variable","text":"The integer variable to change"},{"lang":"en","name":"position","type":"integer","text":"The number of the bit to set"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The BSET command sets a bit to 1. Specify the bit by giving its position in a variable or an expression. If an|expression is used instead of a variable, it will be treated as an address only if AOZ can detect the \"magical number\" that indicate a memory bank.|"},{"name":"BClr","descriptions":[{"lang":"en","text":"Set a bit of a variable to 0"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"variable","type":"variable","text":"The integer variable to change"},{"lang":"en","name":"position","type":"integer","text":"The number of the bit to clear"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The BCLR command clears a bit by setting it to zero. The bit number can be from 0 to 31, and pinpoints the single binary digit to be cleared.||If an expression is used instead of a variable, it will be treated as an address only if AOZ can detect the \"magical number\" that indicate a memory bank.|"},{"name":"BChg","descriptions":[{"lang":"en","text":"Toggle a bit of a variable"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"variable","type":"variable","text":"The integer variable to change"},{"lang":"en","name":"postion","type":"integer","text":"The number of the bit to toggle"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction flips a binary bit from 0 to 1, or from 1 to 0, as appropriate.||If an expression is used instead of a variable, it will be treated as an address only if AOZ can detect the \"magical number\" that indicate a memory bank.|"},{"name":"BTst","descriptions":[{"lang":"en","text":"Test a bit in an interger number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"position","type":"integer","text":"The number of the bit to test"},{"lang":"en","name":"value","type":"integer","text":"The number to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"True if the bit is set to one, False if not"}],"compatible":" aoz, stos, amos","content":"The BTST function tests a single binary bit in a given value. Specify the number of the bit to be tested, from 0 to 31,|then give the chosen variable or expression. If the given value is an expression, it will be used as an address, so the|bit will then be checked at LEEK(value) instead. Note that only bits 0 to 7 can be tested by this system, and that|AOZ Studio will take your bit number and perform an automatic AND operation with 7, to ensure that it lies|in the correct range.||If the test is successful, True is returned, otherwise False is given. For example:|~~~|B=%1010|Print Btst(3,B)|Print Btst(2,B)|~~~|"},{"name":"Ror.b","descriptions":[{"lang":"en","text":"Rotate the content of an integer variable to the right on the first 8 bits"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number or shifts"},{"lang":"en","name":"variable","type":"variable","text":"The integer variable to rotate"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The ROR command is invaluable as a rapid method of dividing a positive number by a power of two, like this:|~~~|B=1|Ror.l 2,B|Print B|~~~|Here is an example routine:|~~~|Curs Off : Locate 0,20 : Centre \"Press a key to ROL the number\"|Locate 0,0 : Print \"Binary version\"|Locate 0,4 : Print \"Decimal version\"|B=65536 : Rem Set initial value|Do|Locate 0,2: Print Bin$(B,32) : Rem Display number in binary|Locate 0,6: Print B;\" \"; : Rem Nine spaces|Wait Key|Ror.b 1,B : Rem Try ROR.L and ROL.W too|Loop|"},{"name":"Ror.w","descriptions":[{"lang":"en","text":"Rotate the content of an integer variable to the right on the first 16 bits"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number or shifts"},{"lang":"en","name":"variable","type":"variable","text":"The integer variable to rotate"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The ROL command is invaluable as a rapid method of dividing a positive number by a power of two, like this:|~~~|B=1|Ror.l 2,B|Print B|~~~|Here is an example routine:|~~~|Curs Off : Locate 0,20 : Centre \"Press a key to ROL the number\"|Locate 0,0 : Print \"Binary version\"|Locate 0,4 : Print \"Decimal version\"|B=65536 : Rem Set initial value|Do|Locate 0,2: Print Bin$(B,32) : Rem Display number in binary|Locate 0,6: Print B;\" \"; : Rem Nine spaces|Wait Key|Ror.l 1,B : Rem Try ROR.L and ROL.B too|Loop|"},{"name":"Ror.l","descriptions":[{"lang":"en","text":"Rotate the content of an integer variable to the right on 32 bits"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number or shifts"},{"lang":"en","name":"variable","type":"variable","text":"The integer variable to rotate"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The ROL command is invaluable as a rapid method of multiplying a positive number by a power of two, like this:|~~~|B=1|Rol.l 2,B|Print B|~~~|Here is an example routine:|~~~|Curs Off : Locate 0,20 : Centre \"Press a key to ROL the number\"|Locate 0,0 : Print \"Binary version\"|Locate 0,4 : Print \"Decimal version\"|B=1 : Rem Set initial value|Do|Locate 0,2: Print Bin$(B,32) : Rem Display number in binary|Locate 0,6: Print B;\" \"; : Rem Nine spaces|Wait Key|Rol.l 1,B : Rem Try ROR.W and ROL.B too|Loop|"},{"name":"Rol.b","descriptions":[{"lang":"en","text":"Rotate the content of an integer variable to the left on the first 8 bits"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number or shifts"},{"lang":"en","name":"variable","type":"variable","text":"The integer variable to rotate"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"~~~|B = 1|Rol.b 2,B|Print B|~~~|Here is an example routine:|~~~|Curs Off : Locate 0,20 : Centre \"Press a key to ROL the number\"|Locate 0,0 : Print \"Binary version\"|Locate 0,4 : Print \"Decimal version\"|B = 1 : Rem Set initial value|Do|Locate 0,2: Print Bin$(B,32) : Rem Display number in binary|Locate 0,6: Print B;\" \"; : Rem Nine spaces|Wait Key|Rol.b 1,B : Rem Try ROL.W and ROL.L too|Loop|"},{"name":"Rol.w","descriptions":[{"lang":"en","text":"Rotate the content of an integer variable to the left on the first 16 bits"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number or shifts"},{"lang":"en","name":"variable","type":"variable","text":"The integer variable to rotate"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"~~~|B = 1|Rol.w 2,B|Print B|~~~|Here is an example routine:|~~~|Curs Off : Locate 0,20 : Centre \"Press a key to ROL the number\"|Locate 0,0 : Print \"Binary version\"|Locate 0,4 : Print \"Decimal version\"|B = 1 : Rem Set initial value|Do|Locate 0,2: Print Bin$(B,32) : Rem Display number in binary|Locate 0,6: Print B;\" \"; : Rem Nine spaces|Wait Key|Rol.w 1,B : Rem Try ROL.B and ROL.L too|Loop|"},{"name":"Rol.l","descriptions":[{"lang":"en","text":"Rotate the content of an integer variable to the left on 32 bits"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number or shifts"},{"lang":"en","name":"variable","type":"variable","text":"The integer variable to rotate"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"~~~|B = 1|Rol.w 2,B|Print B|~~~|Here is an example routine:|~~~|Curs Off : Locate 0,20 : Centre \"Press a key to ROL the number\"|Locate 0,0 : Print \"Binary version\"|Locate 0,4 : Print \"Decimal version\"|B = 1 : Rem Set initial value|Do|Locate 0,2: Print Bin$(B,32) : Rem Display number in binary|Locate 0,6: Print B;\" \"; : Rem Nine spaces|Wait Key|Rol.l 1,B : Rem Try ROL.B and ROL.W too|Loop|"}]},{"name":"Menu Commands","id":1639692454193,"descriptions":[{"lang":"en","text":"Instructions and functions to handle menus in AOZ applications."}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"On Menu Del","descriptions":[{"lang":"en","text":"Delete labels and procedures used by ON MENU."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"Use ON MENU DEL to erase the internal list of labels or procedures created by the range of ON MENU|commands. You are warned that this command can only be used after menus have been deactivated by ON MENU|OFF.|"},{"name":"On Menu On","descriptions":[{"lang":"en","text":"Toggle automatic menu selection."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"To activate the automatic menu system created by the ON MENU PROC, GOSUB or GOTO commands, simply|give the ON MENU ON command. After a subroutine has been accessed in this way, the system is automatically|disabled. Therefore you must reactivate the system with ON MENU ON before returning to the main program.|"},{"name":"On Menu Off","descriptions":[{"lang":"en","text":"Toggle automatic menu selection. Will be implemented later."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"To suspend the automatic menu system, ON MENU OFF is used. This can be vital if your program is executing a|procedure which must be performed without interruptions, such as loading and saving information to disc. Menus|are reactivated using ON MENU ON.|"},{"name":"Menu To Bank","descriptions":[{"lang":"en","text":"Save menu definitions into a memory bank. Will be implemented later."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bankIndex","type":"index","text":"The number of the bank to save to"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Use this command to save your menu along with its entire structure of branch definitions to the numbered bank.|Once the menu has been stored in the selected memory bank, it will automatically be saved along with your Basic|program. By storing your menu definitions in a memory bank, the size of your program listings are reduced|significantly, freeing valuable space in the editor memory. If the bank number you select already exists, the|appropriate error message will be given.|"},{"name":"Bank To Menu","descriptions":[{"lang":"en","text":"Restore a menu definition saved in a menu bank."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bankIndex","type":"index","text":"The number of the bank to restore"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Follow BANK TO MENU with the number of the memory bank where your menu data is stored.|The menu will be restored to its exact state when originally saved, so the restoration process may take a few seconds. To activate the restored menu, call MENU ON.||"},{"name":"Menu On","descriptions":[{"lang":"en","text":"Activate a menu."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"Use this command to initialise the menu previously defined by a MENU$, and the menu line will appear when the right mouse button is pressed. To activate the previous example, add the following lines:|~~~|Menu On|Wait Key|~~~|Trigger the menu and its options now, and use the left mouse button to re-locate the title bar. Now that this simple|menu has been activated, the selected options must be read and reported back to the system.||"},{"name":"Menu OFF","descriptions":[{"lang":"en","text":"Deactivate a menu. Will be implemented later."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"This command temporarily turns a menu off, making it inactive. The menu can be reactivated at any time with the MENU ON command.|"},{"name":"Menu Mouse On","descriptions":[{"lang":"en","text":"Display the menu at position of mouse cursor"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"Use these commands to toggle the display of all menus starting from the current position of the mouse cursor.|The mouse coordinates are added to the MENU BASE to calculate the menu position, so it is possible to lace a menu at a fixed distance from the mouse pointer.|"},{"name":"Menu Mouse Off","descriptions":[{"lang":"en","text":"Stop displayiong the menu at position of mouse cursor"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"Use these commands to toggle the display of all menus starting from the current position of the mouse cursor.|The mouse coordinates are added to the MENU BASE to calculate the menu position, so it is possible to lace a menu at a fixed distance from the mouse pointer.|"},{"name":"Menu Key","descriptions":[{"lang":"en","text":"Assign a key to a menu item."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"item","type":"integer","text":"Index of the item in the menu"},{"lang":"en","name":"key","type":"any","text":"The key to assign or the scan code of the key"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Any key can be assigned to an item in a previously defined menu, provided that the item specified is at the bottom level of the menu.|In other words, keyboard shortcuts cannot be used to select sub-menus because each command must correspond to a single option in the menu.||In its simplest form, define the single item parameters as usual, by giving their hierarchy numbers in brackets after MENU KEY.||Then assign the item TO a string containing a single character. Any additional characters in this string will be ignored.|Because each key on the Amiga keyboard is assigned its own scancode, this code can be made use of for those keys|that have no Ascii equivalents, the so-called control keys. Here is a simple routine to print out scancodes:|~~~|Do|Repeat|A$=inkey$|Until A$<>|Z=Scancode|Print Z|Loop|~~~|The following scancodes can also be used with the MENU KEY command, instead of a character string:|~~~|Scancode \tKeys|80 to 89 \tFunction keys [Fl] to [F10]|95 \t\t\t[Help]|69 \t\t\t[Esc]|~~~|An optional bitmap can also be added, to check for control key combinations such as [Ctrl] + [A]. Here are the|alternatives:|~~~|Bit \tKey Tested \tNotes|0 \t\tleft [Shift]) \tonly one [Shift] key can be tested at a time|1 \t\tright [Shift] \tonly one [Shift] key can be tested at a time|2 \t\t[Caps Lock] \teither ON or OFF|3 \t\t[Ctrl]|4 \t\tleft [Alt]|5 \t\tright [Alt] \tthis is the Windows key under windwos, the Apple key on macOS and Commodore key on Amiga keyboards|6 \t\tleft [Platform]|7 \t\tright [Platform]|~~~|If more than a single bit is set in this pattern, several keys must be pressed at the same time in order to call up the associated menu item.|Any of these keyboard shortcuts can be erased by using MENU KEY with no parameters. For example:|~~~|Menu Key(1,10) : Rem Erase shortcut assigned to item (1,10)|~~~|Here is an example that checks for key presses of the Amiga's ten function keys:|~~~|Menu$(1)=\"Function Keys\"|For A=1 To 10|OPT$=\"F\"+Str$(A)+\" \"|Menu$(1,A)=OPT$|Menu Key(1,A) To 79+A|Next A|Menu On|Do|If Choice Then Print \"You have pressed Function Key \";Choice(2)|Loop|~~~|"},{"name":"Menu Bar","descriptions":[{"lang":"en","text":"Display menu items as a vertical bar."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"The level of the menu to display"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"This instruction displays.the selected menu items as a vertical bar whose width is automatically set to the length of the largest item in the menu. As a default, this option is used for levels 2 to 8 of your menu, and it must be used during the program's initialisation. There will be no effect if it is called after the menu has been activated.||When followed by a list of bracketed parameters, MENU BAR can also be used to change the style of your menus|once they have been installed. Here is an example of a customised menu layout:|~~~|FLAG=0|SET_MENU|Do|If Choice and Choice(1)=2 and Choice(2)=1 Then CHANGE|Loop||Procedure SET_MENU|Menu$(1)=\"Try me first \" : Menu$(2)=\"Select me \" : Rem Four spaces|Menu$(1,1)=\"1 am useless \" : Rem Five spaces|Menu$(2,1)=\"Please select me!\"|Menu On|End Proc|Procedure CHANGE|Shared FLAG|Menu Del|If FLAG=0 Then Menu Bar 1: FLAG=1 Else Menu Tline 1: Flag=0|SET_MENU|End Proc|~~~|"},{"name":"Menu Line","descriptions":[{"lang":"en","text":"Display menu items as a horizontal bar."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"The level of the me nu to display"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"Use this command to change the display of options that relate to a particular title from a vertical block into a horizontal line.|The line of options will now start from the left-hand corner of the first menu title and stretch to the bottom right-hand corner of the last title.||Follow MENU LINE with the number of the level you want to affect, and make sure that this command is only called during your menu definitions.|The level number the layer of the menu to be affected.||It is perfectly legal to set individual items by this method, and with the following MENU TLINE and MENU BAR|commands. This can result in some highly eccentric displays.|~~~|Menu Line(1,1,1) : Rem Display sub-option 1,1,1 as a line|~~~|"},{"name":"Menu Inactive","descriptions":[{"lang":"en","text":"Deactivate a menu item"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"The level of the sub-menu or an individual menu item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"Use this command to turn off options in your menu. By selecting the number of a level from 1 to 8, all items in that|level will be deactivated. If you define an individual item in brackets by giving its parameters, only that item will|become inactive.||If no inactive string has been defined when you originally set your menu up with MENU$, any menu options that|have been made inactive will be shown in italics. Otherwise the special inactive string will appear.|"},{"name":"Menu Del","descriptions":[{"lang":"en","text":"Delete one or more menu items."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"The level of the sub-menu or the index of a menu item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"On its own, MENU DEL erases the whole menu. But be warned, once the menu has been deleted it cannot be retrieved!||MENU DEL can also be qualified by up to eight parameters, separated by commas, and held in a single pair of|brackets. These values represent the precise position of the item in the menu hierarchy to be deleted.||For example:||~~~|Menu Del(1) : Rem Delete title number 1|Menu Del(1,2) : Rem Delete option 2 of title 1|Menu Del(2,3,4) : Rem Delete sub-option 4 of option 3 of title 2|~~~|"},{"name":"Menu$","descriptions":[{"lang":"en","text":"variable"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"The level of the sub-menu or the index of a specific item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The text of the menu item. \"\" in this version."}],"compatible":" notimplemented","content":"To create a simple menu, its title line must first be defined.|Each heading in a title line created with MENU$ must be assigned its own number.||The title at the left-hand edge of the title line is represented by 1, the next title by 2, and so on, from left to right.||The characters in your title string hold the name of the numbered title. This example sets up a menu title line offering two titles, and you should note the use of the spaces to separate titles when they appear in the title line:|~~~|Menu$(1),\" Action\"|Menu$(2),\" Mouse\"|~~~|The second type of usage of MENU$ defines a set of options that will be displayed in the vertical menu bar. The|brackets after MENU$ contain two parameters, the first is the number of the menu heading that your option is to be|displayed beneath, followed by the option number you want to install in the vertical menu bar. All options are|numbered downwards from the top of the menu, starting from 1. The option string holds the name of your new|option, and can consist of any text you choose. The following lines could be added to the last example above:|~~~|Rem Action menu has one option|Menu$(1,1)=\" Quit \" : Rem Ensure three spaces after Quit|Rem Mouse menu has three options|Menu$(2,1)=\"Arrow \" : Rem Ensure five spaces after Arrow|Menu$(2,2)=\"Cross-hair\"|Menu$(2,3)=\"Clock \" : Rem Ensure five spaces after Clock|~~~|That specifies your list of alternatives for the \"Action\" and \"Mouse\" menus. Before this program can be run, it must|first be activated.|"},{"name":"Choice","descriptions":[{"lang":"en","text":"Read a menu item"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"integer","text":"The level of the sub-menu or the index of a specific item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"True if the menu item has been selected, False if not."}],"compatible":" notimplemented","content":"CHOICE will return True if the menu has been highlighted by the user, otherwise False is returned.||After the status of your menu is tested, the value held by CHOICE is automatically re-set to zero.|- CHOICE(1) will return the value of the title number which has been chosen.|- CHOICE(2) will return the value of the option number which has been selected.||Now remove the Wait Key from the last example, and replace it with the following lines. This should change the|shape of the mouse cursor, depending on the option selected from your menu. Note that Choice=-1 can be simplified|to Choice.|~~~|Do|If Choice and Choice(1)=1 Then Exit|If Choice(1)=2 and Choice(2)<>0 Then Change Mouse Choice(2)|Loop|~~~|###Creating advanced menus||The use of MENU$ and CHOICE is not limited to the creation of simple menus. In fact, their use can be extremely|sophisticated.||MENU$ is used to define the appearance of each individual item in one of your menus, whether it is a title, an|option, a sub-option, all the way down to the eighth layer of options in the menu hierarchy. In this Chapter, when|single item parameters is used it simply means those numbers separated by commas and held inside a single pair|of brackets, that refer to the position of a single item somewhere in the menu. Up to eight parameters can be used,|separated by commas. To make sure that is clear, here are some examples of parameters defining the position of a|single item in the menu hierarchy:|~~~|Menu$(1)=\"Title1\"|Menu$(1 ,1)=\"Title1 Option1\"|Menu$(2,3)=\"Title2, Option2\"|Menu$(1,1,1,1)=\"Title1, Option1, Sub-option1, Sub-sub-option1\"|~~~|Now look at these uses of MENU$, which are used to give a single item its own characteristics:||"},{"name":"On Menu Proc","descriptions":[{"lang":"en","text":"Automatic menu selection."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"proc","type":"procedure","text":"The name of a procedure, or a string containing the name of a procedure that will be resolved at runtime."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"Each title in your menu can be assigned its own procedure which will be executed automatically when that option is selected by the user.||When automatic selection takes place as the result of ON MENU PROC, the procedure is executed and the program|will be returned to the instruction immediately after the ON MENU call. Procedures can make use of the CHOICE|function to monitor which option has been triggered, and to perform the appropriate action.|"},{"name":"On Menu Gosub","descriptions":[{"lang":"en","text":"Automatic menu"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"label","type":"label","text":"The name of a label in the curretn application, or a string containging the name that will be resolved at runtime."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"Depending on which option has been selected by the user, ON MENU GOSUB goes to the appropriate subroutine.||After using this instruction, ON MENU should be used to activate the menu system before jumping back to the main program with a RETURN.|"},{"name":"On Menu Goto","descriptions":[{"lang":"en","text":"Automatic menu selection."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"label","type":"label","text":"THe label to branch to, or a string containing the name of the label."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"Although this command is available for use, it has been superseded by the more powerful ON MENU PROC and ON MENU GOSUB instructions.||It is retained to provide compatibility with programs written in STOS Basic.|"}]},{"name":"Movement Commands","id":1639692454202,"descriptions":[{"lang":"en","text":"Instructions, functions and objects to make things move on the screen"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[]},{"name":"Player and Leaderboards","id":1639692454225,"descriptions":[{"lang":"en","text":" Instructions and functions that provide player and leaderboards functions."}],"descriptions_file":[],"author":"Phil Bell","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Player Initialise","descriptions":[{"lang":"en","text":"Initialise the player engine and login."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"engine$","type":"string","text":"The name of the engine to initialise. If not set, \"local\" by default."},{"lang":"en","name":"key$","type":"string","text":"The key required by the specified engine."},{"lang":"en","name":"onError$","type":"string","text":"The name of an AOZ procedure to be called if an error occurs during a player instruction."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This command must be used before using any of the other player commands.||The browser application storage is first checked for a stored player, if a stored player is found it is used to log in to the engine. Otherwise a new guest player is created and used to log in.||There are currently 2 engines available, \"local\" and \"playfab\". The local engine uses the browser application storage to store the player and leaderboard data offline. This engine is great to use during development and demo projects.||The \"playfab\" engine refers to the Microsoft PlayFab Platform (https://playfab.com/). The player accounts and leaderboards are stored and managed online in the PlayFab Developer Console. Please see the \"Player Demo\" in the AOZ Store which includes instructions on how to configure PlayFab.|~~~|// Local example|// The key$ can be any string value such as the name of your game/project. It is used as a unique identifier to store the player and leaderboard data.|Player Initialise Key$=\"PlayerHelpDocExample\"||// Micorosft PlayFab example (onError$ is optional)|// The Key$=\"51D14\" refers to the TitleID of your project which can be found in the Microsoft PlayFab Developer Console.|Player Initialise Engine$=\"playfab\", Key$=\"51D14\", onError$=\"ON_PLAYER_ERROR\"||// Check if an error occured|If Player ErrorCode() <> 0|Print \"A error occured during Player Initialise\"|Print Player ErrorCode()|Print Player ErrorMessage$()|Else|Print \"Player Initialise Successfull\"|End If||Procedure ON_PLAYER_ERROR[CODE, MESSAGE$]|// Optionally add code to handle errors that may occur from any of the Player instructions|End Proc|~~~|"},{"name":"Player Forget","descriptions":[{"lang":"en","text":"Removes the stored player from the browser application storage and reinitialises the player engine with a new guest account."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"After using the \"Player Initialise\", there will be a stored player in the browser application storage. The stored player is used to login each time the \"Player Initialise\" is used.||Use this command to remove the stored player from the browser application storage and to create a new guest account.|"},{"name":"Player SendAccountRecoveryEmail","descriptions":[{"lang":"en","text":"Sends an email with instructions for recovering a player account. (If supported by the player engine)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"email$","type":"string","text":"The email address for the account to be recovered."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The \"local\" engine does not support sending account recovery emails.||Here is an example using the PlayFab engine.|~~~|Player Initialise Engine$=\"playfab\", Key$=\"51D14\"||Print \"Account Recovery\": Print \"================\"|EMAIL$ = \"\": PASSWORD$ = \"\"|Input \"Enter Email: \"; EMAIL$||If EMAIL$ <> \"\"|Player SendAccountRecoveryEmail email$=EMAIL$||If Player ErrorCode() <> 0|Print Player ErrorMessage$()|Else|Print \"Email has been sent\"|End If|End If|~~~|"},{"name":"Player Register","descriptions":[{"lang":"en","text":"Links a Guest player account to an email and password."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"email$","type":"string","text":"The player email address"},{"lang":"en","name":"password$","type":"string","text":"The password"},{"lang":"en","name":"playerName$","type":"string","text":"The player name"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This command links a guest account with an email and password. The email and password can then be used to login using the \"Player Login\" command.|~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"||Print \"Register Guest Account\": Print \"======================\"|NAME$ = \"\": EMAIL$ = \"\": PASSWORD$ = \"\"|Input \"Player Name: \"; NAME$|Input \"Email: \"; EMAIL$|Input \"Password: \"; PASSWORD$||If EMAIL$ <> \"\" and NAME$ <> \"\" and PASSWORD$ <> \"\"|// Registers the current guest account to an email and password|Player Register email$=EMAIL$, password$=PASSWORD$, playerName$=NAME$||If Player ErrorCode() <> 0|Print Player ErrorMessage$()|Else|Print \"Player is now registered\"|End If|End If|~~~|"},{"name":"Player Login","descriptions":[{"lang":"en","text":"Login to the player engine with an account that was registered using the \"Player Register\" command."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"email$","type":"string","text":"The player account email address"},{"lang":"en","name":"password$","type":"string","text":"The player account password"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"|Print \"Login\": Print \"=====\"|EMAIL$ = \"\": PASSWORD$ = \"\"|Input \"Enter Email: \"; EMAIL$|Input \"Enter Password: \"; PASSWORD$||If EMAIL$ <> \"\" and PASSWORD$ <> \"\"|Player Login email$=EMAIL$, password$=PASSWORD$||If Player ErrorCode() <> 0|Print Player ErrorMessage$()|Else|Print \"Player is logged in\"|End If|End If|~~~|"},{"name":"Player Update","descriptions":[{"lang":"en","text":" Update the player related account data such as the player name."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"playerName$","type":"string","text":"The player name"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"|NAME$ = \"\"|Input \"Enter Player Name: \"; NAME$|If NAME$ <> \"\"|Player Update playerName$=NAME$||If Player ErrorCode() <> 0|Print Player ErrorMessage$()|Else|Print \"The player name has been updated\"|End If|End If|~~~|"},{"name":"Player Name$","descriptions":[{"lang":"en","text":"Returns the player name for the currently logged in player account."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The player name stored against the player account"}],"content":"~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"|Print Player IsGuest()|~~~|"},{"name":"Player IsGuest","descriptions":[{"lang":"en","text":"Determines if the current player account is a guest account or has been registered/linked to an email and password."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"Returns true if the current player is a guest account"}],"content":"~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"|If Player IsGuest() = true|Print \"Player is using a guest account\"|Else|Print \"Player is using a registered account\"|End If|~~~|"},{"name":"Player Id$","descriptions":[{"lang":"en","text":"Returns the unique identifier for the current player account."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The unique identifier for the player"}],"content":"Each player account has a unique identifier assigned. This can be used to find the player in the leaderboard data items. (please see the Leaderboard$ function for details)|~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"|Print Player Id$()|~~~|"},{"name":"Player ErrorCode","descriptions":[{"lang":"en","text":"Returns the error code for the last Player instruction"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The error code"}],"content":"After each Player command you can check to see if an error occured||ErrorCode() = 0 if no error occured.||Example:|~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"|If Player ErrorCode() <> 0|Print Player ErrorCode()|Print Player ErrorMessage$()|End If|~~~|"},{"name":"Player ErrorMessage$","descriptions":[{"lang":"en","text":"Returns the error message for the last Player instruction"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The error message"}],"content":"After each Player command you can check to see if an error occured.||The error message provides details of the problem that was encountered.||Example:|~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"|If Player ErrorCode() <> 0|Print Player ErrorCode()|Print Player ErrorMessage$()|End If|~~~|"},{"name":"Leaderboard Load","descriptions":[{"lang":"en","text":"Loads and caches a leaderboards data"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"leaderboardName$","type":"string","text":"The name of the leaderboard to load."},{"lang":"en","name":"maxItems","type":"string","text":"The maximum number of leaderboard items to load. If not set, 10 by default."},{"lang":"en","name":"startPosition","type":"string","text":"The starting position to begin loading the leaderboard items. If not set, 0 by default"},{"lang":"en","name":"onLoaded$","type":"string","text":"Optional, name of an AOZ stored procedure to be called once the leaderboard data has been loaded."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"After loading a leaderboard, the leaderboard items are cached and can be accessed using the Leaderboard$() function.|~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"||Leaderboard Load leaderboardName$=\"Level 1\", onLoaded$=\"ON_LEADERBOARD_LOADED\"||Procedure ON_LEADERBOARD_LOADED[COUNT]|xpos = 1000: ypos = 250|Ink 1: Text xpos, ypos - 150, \"Level 1\"||For x = 0 to 9|Ink 1: LBNAME$ = \". . . . . . . . . . . . . . . . .\": LBSCORE$ = \"0\": LBID$ = \"\"||If x < COUNT|LBNAME$ = Leaderboard$(itemIndex = x, itemName$=\"playerName\")|LBSCORE$ = Leaderboard$(itemIndex = x, itemName$=\"value\")|LBID$ = Leaderboard$(itemIndex = x, itemName$=\"id\")||// Highlight the current player score|If Player Id$() = LBID$|Ink 6|Else|Ink 1|End If|End If||Text xpos + 100, ypos + x * 70, LBNAME$|Text xpos, ypos + x * 70, Str$(x + 1)|Ink 1: Text xpos + 630, ypos + x * 70, LBSCORE$|Next x|End Proc|~~~|"},{"name":"Leaderboard$","descriptions":[{"lang":"en","text":"Provides access to the data items in a cached leaderboard."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"itemIndex","type":"number","text":"The index of the leaderboard item. 0 is position one."},{"lang":"en","name":"itemName$","type":"number","text":"The name of the data item to return. (\"playername\", \"value\" or \"id\")"}],"exceptions":[{"lang":"en","text":""}],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The value of the leaderboard item data."}],"content":"There are 3 items of data for each leaderboard entry.||itemName$=\"playername\" - returns the name of the player|itemName$=\"value\" - returns the value for the leaderboard entry|itemName$=\"id\" - returns the unique identifier for the player|~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"|Leaderboard Load leaderboardName$=\"Level 1\", onLoaded$=\"ON_LEADERBOARD_LOADED\"||// Returns the player name at the first position in the leaderboard|Print Leaderboard$(itemIndex = 0, itemName$=\"playerName\")|~~~|"},{"name":"Leaderboard Update","descriptions":[{"lang":"en","text":"Updates or adds a players leaderboard entry with the given value."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"leaderboardName$","type":"string","text":"The leaderboard name"},{"lang":"en","name":"value","type":"integer","text":"The value of the players leaderboard entry"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"When using the \"local\" engine, the leaderboard entry will only be updated if the value is greater than the players previous value in the leaderboard.||For the \"playfab\" engine, the leaderboard behaviour can be configured in the PlayFab Developer Console.|~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"|Leaderboard Load leaderboardName$=\"Level 1\", onLoaded$=\"ON_LEADERBOARD_LOADED\"||SCR$ = \"\"|Input \"Enter New Score For Level 1\"; SCR$|Leaderboard Update leaderboardName$ = \"Level 1\", value = Val(SCR$)||If Player ErrorCode() <> 0|Print Player ErrorMessage$()|Else|Print \"The leaderboard has been updated\"|End If|~~~|"},{"name":"Player Data$","descriptions":[{"lang":"en","text":"Gets the value of a data item saved using the \"Player Data\" instruction"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"itemName$","type":"string","text":"The name of the data item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The value of the data item"}],"content":"Returns the value of a data item that was stored using the \"Player Data\" instruction.||Example:|~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"||// Save an item|Player Data itemName$=\"maxUnlockedLevel\", itemValue$=\"3\"||// Retrieve an item|Print Player Data$(itemName$=\"maxUnlockedLevel\")|~~~|"},{"name":"Player Data","descriptions":[{"lang":"en","text":"Save an item of data against the current player account."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"itemName$","type":"string","text":"The name of the data item"},{"lang":"en","name":"itemValue$","type":"string","text":"The value of the data item"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This command is used for storing simple data items, for example, a players progress in your game, inventory items or game settings and preferences.||Use the Player Data$() function to retrieve the stored data.||When using the PlayFab engine, there is a size limit of 1000 bytes for the itemName$ and 300,000 bytes limit on the itemValue$|There is also a limit to the number of times the same player data value may be updated when using PlayFab, these are 10 updates per 15 seconds, 150 updates per 5 minutes, 1,800 updates per hour|In the PlayFab developer console, go to your Title Settings, then select the Limits tab and scroll down to Data Storage section to see the latest information.|~~~|Player Initialise Engine$=\"local\", Key$=\"PlayerHelpDocExample\"||// Save items|Player Data itemName$=\"maxUnlockedLevel\", itemValue$=\"3\"|Player Data itemName$=\"gameMusicVolumn\", itemValue$=\"0\"||// Retrieve items|Print Player Data$(itemName$=\"maxUnlockedLevel\")|Print Player Data$(itemName$=\"gameMusicVolumn\")|~~~|"},{"name":"Player Engine$","descriptions":[{"lang":"en","text":"Gets the name of the engine that has been initialised"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The name of the engine"}],"content":"|Example:|~~~|Print Player Engine$()|~~~|"}]},{"name":"Rainbow Commands","id":1639692454256,"descriptions":[{"lang":"en","text":"Rainbow instructions and functions"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Set Rainbow","descriptions":[{"lang":"en","text":"Define a new Rainbow effect"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the rainbow"},{"lang":"en","name":"ink","type":"integer","text":"The index of Ink in the current screen to affect"},{"lang":"en","name":"height","type":"integer","text":"The height of the internal color buffer"},{"lang":"en","name":"red$","type":"string","text":"A string defining the variation of the RED component of the color"},{"lang":"en","name":"green$","type":"string","text":"A string defining the variation of the GREEN component of the color"},{"lang":"en","name":"blue$","type":"string","text":"A string defining the variation of the BLUE component of the color"},{"lang":"en","name":"alpha$","type":"string","text":"A string defining the variation of the ALPHA component of the color"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Try the next example before analysing how it works:|```|Set Rainbow 0,1,16,\"(1,1,15)\",,|Rainbow 0,56,1,255|Curs Off : Flash Off|Locate ,12 : Centre \"RED STRIPE\"|```|Up to four different rainbows may be set up for later use, and SET RAINBOW is followed by an identification index.||The next parameter is the colour index that is to be changed, and only colours 0 to 15 can be affected. In practice,|this colour can be assigned a different value for each horizontal screen scan line, if necessary.||Following this, the height parameter sets the size of the table to be used for colour storage, in other words, it sets the height of the rainbow in units, with each unit ready to hold one scan line of colour. The size of this table can range from 16 to 65500, but only the first 280 or so lines can be displayed on screen at once.|So if your table is less than the physical height of your rainbow, the colour pattern will be repeated on the screen.||Finally, the Red, Blue and Green components of the rainbow colours are set up as strings, each within their own|brackets. The last example leaves out any reference to the Green and Blue components, which is why the resulting|effect is completely in the Red. These strings will be cycled to produce the final rainbow pattern, and their format comprises three values contained in each relevant pair of brackets, as follows:||(number,step,count)||Number refers to the number of scan lines assigned to one colour value. Think of it as controlling the \"speed\" of the sequence. Step is a value to be added to the colour, which controls the colour change. Count is simply the number of times this whole process is performed.|"},{"name":"Rainbow","descriptions":[{"lang":"en","text":"Define the display of a rainbow already create with \"Set Rainbow\""}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the rainbow to display"},{"lang":"en","name":"offset","type":"integer","text":"The position within the internal color buffer to display ont he first line of display"},{"lang":"en","name":"position","type":"integer","text":"The horizontal position on"},{"lang":"en","name":"height","type":"integer","text":"The height of the rainbow on display in pixels"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The last example also demonstrates the parameters of the RAINBOW command, which is used to display one of the|rainbows created with SET RAINBOW.||The rainbow number is obvious, and refers to one of the four possible rainbow patterns from 0 to 3. The offset sets|the value for the first colour in the table created with SET RAINBOW, and it governs the cycling or repetition of the|rainbow on screen.||The vertical position is a coordinate which must have a minimum value of 40, and it affects the starting point of the rainbow's vertical display on screen. If a lower coordinate is used, the rainbow will be displayed from line number 40 onwards.||Finally, the height number sets the rainbow's vertical height in screen scan lines.||Please note that normally only one rainbow at a time can be displayed at a particular scan line, and the one with the lowest identification number will be drawn in front of any others However, experienced Amiga users will be able to start more than one rainbow at the same line, using the Copper. See Appendix F for an explanation of this technique.||"},{"name":"Rainbow Del","descriptions":[{"lang":"en","text":"Destroys a Rainbow"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the rainbow to destroy"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Use this command on its own to get rid of all rainbows that have been set up. If a rainbow identity number is added, then only that particular rainbow will be deleted.|"}]},{"name":"Screen","id":1639692454269,"descriptions":[{"lang":"en","text":"Screen instructions and functions"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Screen Open","descriptions":[{"lang":"en","text":"Open a new screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the screen to open. Any existing screen will be replaced by the new one"},{"lang":"en","name":"width","type":"integer","text":"The width of the screen in pixels"},{"lang":"en","name":"height","type":"integer","text":"The height of the screen in pixels"},{"lang":"en","name":"*numberOfColor","type":"integer","text":"The number of colors of the palette (optional)"},{"lang":"en","name":"*pixelMode","type":"integer","text":"Lowres, Hires, Laced or any combination"},{"lang":"en","name":"*lines","type":"integer","text":"Number of lines in the text window associated with the screen"},{"lang":"en","name":"*border","type":"integer","text":"0 for a borderless window, number of the border if a border is desired"},{"lang":"en","name":"*tags$","type":"string","text":"List of eventual tags"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"To open a new screen give the SCREEN OPEN command, followed by these parameters:||- *index* is the identification index of the new screen. If a screen with this number already exists, it will be completely replaced by this new screen.||- *width* sets up the number of pixels that will make up the width of the new screen. There is no problem in opening|a screen that is wider than the physical limit of the television or monitor display, and extra-wide screens can be|manipulated by the SCREEN OFFSET command. The widest possible screen depends on the browser and the platform your application is running on.||- *height* holds the number of pixels that make up the height of the screen. Like the width parameter, this can be larger|than the visible screen height to a maximum of 1023 pixels, and scrolled into view. Screens with oversized widths|and heights can be used with all of the normal screen techniques which are explained later.||- *numberOfColors* sets the number of colours to be used for the new screen to create a paletted screen.|If you ommit this parameter, the screen will be create in True Color mode, without a palette (TODO)||- *pixelMode* is a choice of the width of the pixel points on the screen and is specific to the Amiga.|Lowres is the normal status, allowing 320 pixels to be displayed across the screen, at any one time. Hires halves the width of each pixel, and so allows 640 to|be displayed.||- *lines* if specified indicates the number of lines in the text window associated with the screen. If not specified the number of lines will be the one of the manifest of the application:|1. AOZ: 25 lines|2. Amiga NTSC: 25 lines|3. Amiga PAL: 32 lines|4. Amiga NTSC \"Interlaced\": 50 lines|5. Amiga PAL \"Interlaced\": 64 lines||Note that the number of columns in the default window created in the back of the screen is calculated from the size of the font, which is itself the result of a calculation based on the number of lines, and is for default manifest values:|1. AOZ: 80 columns|2. Amiga \"Lowres\": 40 columns|3. Amiga \"Hires\": 80 columns||- *tags$* is a list of text tags that allow you to control how the screen is open|1. #keepCurrent: will not activate the new screen|2. #noCls: will not clear the new screen and leave the canvas with it's original transparent color|3. #noTextWindow: will not open a text window in the back, saving processing time if you only display graphics|4. #findFreeIndex: will use the index you give as a basis and find a free screen above this index, if it is a number|"},{"name":"Screen Close","descriptions":[{"lang":"en","text":"Destroys the current screen or a given screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the screen to destroy, if ommited will destroy the current screen"},{"lang":"en","name":"*tags$","type":"string","text":"List of eventual tags"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"Use the SCREEN CLOSE command to erase a screen and free the memory it was using for other programming needs. Simply specify the index of the screen to be deleted.||- *tags$* is a list of text tags that allow you to control how the screen is open|1. #keepCurrent: will not re-activate any other screen (warning this can lead to crashes, only use this tag if you are sure the screen you close is not the current one)|"},{"name":"Screen Clone","descriptions":[{"lang":"en","text":"Create an exact and synchronized copy of the current screen that can be displayed at another position and Z-order. Both screen share the same internal pixel buffers. Graphical operations are fobidden in the cloned screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the screen to create, will replace an existing screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"To create an identical copy of the current screen, and assign this new \"clone\" with a new screen number, use the|SCREEN CLONE command followed by the destination screen number. Here is an example of a multi-cloned|screen:|~~~|Screen Open 0,1280,20|Screen Display 0,,70,,|For S=1 To 7|Screen Clone S|Screen Display S,,S*20+70,,|Next S|Print \"Start typing\";|Do|AS=Inkey$|If A$<> Then Print A$;|Loop|~~~|Screen cloning is an ideal technique for two-player computer games, with each player controlling half of the visible|display area.||The clone uses the same memory area as the original screen, and will be displayed at the same place as the original.|Any of the usual screen operations can be used with the clone, such as SCREEN DISPLAY and SCREEN OFFSET.|However, because there is only one copy of the original screen data in memory, it is impossible to use the SCREEN|command with the cloned copy.|"},{"name":"Screen Hide","descriptions":[{"lang":"en","text":"Make a screen disappear from display. The screen will remain active and drawing operation are still possible after this instruction"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"The index of the screen, if ommited the instruction closes the current screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"Use the SCREEN HIDE command to remove the current screen from view. It can then be restored using a SCREEN|SHOW instruction, like this:|~~~|Cls : Print \"I am the Current Screen\" : Wait 100|Screen Hide : Wait Key|Screen Show|~~~|Any screen can be temporarily hidden, by including its index number after the SCREEN HIDE instruction. This|screen is revealed with a similar request to SCREEN SHOW, followed by the relevant screen number.|"},{"name":"Screen Show","descriptions":[{"lang":"en","text":"Make a hidden screen reappear on display"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"The index of the screen, if ommited the instruction affects the current screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"Use the SCREEN HIDE command to remove the current screen from view. It can then be restored using a SCREEN|SHOW instruction, like this:|~~~|Cls : Print \"I am the Current Screen\" : Wait 100|Screen Hide : Wait Key|Screen Show|~~~|Any screen can be temporarily hidden, by including its index number after the SCREEN HIDE instruction. This|screen is revealed with a similar request to SCREEN SHOW, followed by the relevant screen number.|"},{"name":"Screen Display","descriptions":[{"lang":"en","text":"Defines the display position and width of a screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the screen to display"},{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the top-left pixel of the screen on display"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the top-left pixel of the screen on display"},{"lang":"en","name":"width","type":"integer","text":"The number of horizontal pixels to display"},{"lang":"en","name":"height","type":"integer","text":"The number of vertical pixels to display"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"To position a screen, the SCREEN DISPLAY command is used, followed by these parameters:||- Index refers to the index of the screen to be displayed. All or any of the other parameters can be omitted, but the relevant commas must be included.||The x,y-coordinates refer to physical positions on the monitor, and might be different depending on the current platform emulation.|In Amiga mode, the renderer simulates the display of a CRT monitor with empty gaps around the active drawing area, and are referred to as \"Hardware Coordinates\"...||- Width sets the width of the screen in pixels. If this is different from the original setting, only a part of the image|will be shown, starting from the top left-hand corner of the screen.||- Height is used to set the height of the screen in exactly the same way as the width.||If any of the optional parameters are left out, the default settings will be applied automatically.|"},{"name":"Screen Center","descriptions":[{"lang":"en","text":"Enforces the centering of a screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the screen to center"},{"lang":"en","name":"centerX","type":"boolean","text":"True to center the screen horizontally, False to leave the horizontal position unchanged"},{"lang":"en","name":"centerY","type":"boolean","text":"True to center the screen vertically, False to leave the vertical position unchanged"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Screen Offset","descriptions":[{"lang":"en","text":"Set the offet in the internal screen buffer of the top-left diplayed pixel, allowing scrollings"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the screen"},{"lang":"en","name":"xOffset","type":"integer","text":"The horizontal offset"},{"lang":"en","name":"yOffset","type":"integer","text":"The vertical offset"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Look at the diagram below, where the area of the visible screen is shown as a sort of \"port-hole\" 320 pixels wide by|200 pixels high, inside a larger AOZ Studio screen. Of course, the port- hole can be made smaller using the|SCREEN DISPLAY command.||![Screen Offset example no1](help:img/screen_commands/screen_commands_ex1.png)||The SCREEN OFFSET command is followed by the number of the screen to be displayed, then the x,y-coordinates|of the \"offset\", which is the point where the top left-hand corner of the visible display is to start, measured from the|top left-hand corner of the extra-large screen.|"},{"name":"Screen To Front","descriptions":[{"lang":"en","text":"Change the display order of the screen, and passes the screen in front of all other screens"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"idnex","text":"The index of the screen, if ommited the instruction will affect the current screen."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"Use SCREEN TO FRONT to move the selected screen to the front of the display queue. If the screen number is|omitted after the command, then the current screen will be brought to the front.|~~~|Centre \"Hello! Screen 0 here\"|Wait 100|Screen Open 1,1280,720|Centre \"Excuse me, make way for Screen 1\"|Wait 100 : Screen To Front 0|Screen 0|Wait 100 : Screen To Back|~~~|"},{"name":"Screen To Back","descriptions":[{"lang":"en","text":"Change the display order of the screen, and passes the screen behind all other screens"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"integer","text":"The index of the screen, if ommited the instruction will affect the current screen."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"This command is used to move a screen to the background of the display. If another screen is already there, it will|be displayed in front of the chosen screen. Again, if the screen number is omitted after a SCREEN TO BACK|command, the current screen will be relegated to the back of the display queue. Try this example:|~~~|Centre \"Hello! Screen 0 here\"|Wait 100|Screen Open 1,1280,720|Centre \"Excuse me, make way for Screen 1\"|Wait 100 : Screen To Front 0|Screen 0|Wait 100 : Screen To Back|~~~|"},{"name":"Screen Hot Spot","descriptions":[{"lang":"en","text":"Set the hot-spot of a screen to a given coordinate. The hot-spot is the position within the screen where the Screen Offset will have effect and around which rotation will be done"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"integer","text":"The index of the screen, if ommited the instruction will affect the current screen."},{"lang":"en","name":"xSpot","type":"integer","text":"The horizontal position of the hot-spot"},{"lang":"en","name":"ySpot","type":"integer","text":"The vertical position of the hot-spot"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"AOZ introduces the ability to rotate screens as any other graphcial objects. All the bobs that are displayed inside of the screen will follow the rotation.||The default position of the hot-spot of the screen is 0, 0 after it's creation. The next example show the importance of the hot spot when you rotate a screen...||~~~|Degree||// Rotates the screen with it's default hot-spot, on the top-left corner|Screen Open 0, 1280, 720, 16|For N = 0 To 100|Ink Rnd( 16 ) : Print \"AOZ\";|Next||For A = 0 To 360|Screen Rotate 0, A|Wait Vbl|Next|Wait Key||// Set the hot spot of the screen in the center|Screen Hot Spot 0, Screen Width( 0 ) / 2, Screen Height( 0 ) / 2|For A = 0 To 360|Screen Rotate 0, A|Wait Vbl|Next|Wait Key|~~~|"},{"name":"Screen Hot Spot","descriptions":[{"lang":"en","text":"Set the hot spot of a screen to a given coordinate. The hot-spot is the position within the screen where the Screen Offset will have effect and around which rotation will be done"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"The index of the screen, if ommited the instruction will affect the current screen."},{"lang":"en","name":"flags","type":"integer","text":"Flag of bits indicating the horizontal and vertical position of the hot-spot, 0"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"AOZ introduces the ability to rotate screens as any other graphcial objects. All the bobs that are displayed inside of the screen will follow the rotation.||As for the Hot Spot instruction available for Bobs and Sprite, you can use a mask of bits to indicate one of the default positions of the hot-spot.|- 0: indicate top or left,|- 1: center or middle,|- 2: right or bottom.||Example: $11 centers the hot-spot horizontally and vertically||~~~|Degree||// Rotates the screen with it's default hot-spot, on the top-left corner|Screen Open 0, 1280, 720, 16|For N = 0 To 100|Ink Rnd( 16 ) : Print \"AOZ\";|Next||For A = 0 To 360|Screen Rotate 0, A|Wait Vbl|Next|Wait Key||// Set the hot spot of the screen in the center|Screen Hot Spot 0, $11|For A = 0 To 360|Screen Rotate 0, A|Wait Vbl|Next|Wait Key|~~~|"},{"name":"Screen Rotate","descriptions":[{"lang":"en","text":"Rotate a screen around it's hot-spot on display. Warning, on software renderers this instruction will slow down the application"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"The index of the screen, if ommited the instruction will affect the current screen."},{"lang":"en","name":"angle","type":"angle","text":"The angle of the rotation of the screen. Default in radian, and degrees after the \"Degree\" instruction has been used"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|Degree||// Open a screen and display some text in it.|Screen Open 0, 1280, 720, 16|For N = 0 To 100|Ink Rnd( 16 ) : Print \"AOZ\";|Next||// Set the hot spot of the screen to center/middle|Screen Hot Spot 0, $11||// Rotates the hot spot of the screen in the center|For A = 0 To 360|Screen Rotate 0, A|Wait Vbl|Next|Wait Key|~~~|Warning: on software renderers this instruction will slow down the application|"},{"name":"Screen Rotate","descriptions":[{"lang":"en","text":"Rotate the current screen around it's hot-spot on display."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"angle","type":"angle","text":"The angle of the rotation of the screen. Default in radian, and degrees after the \"Degree\" instruction has been used"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|Degree||// Open a screen and display some text in it.|Screen Open 0, 1280, 720, 16|For N = 0 To 100|Ink Rnd( 16 ) : Print \"AOZ\";|Next||// Set the hot-spot of the screen to center/middle|Screen Hot Spot 0, $11||// Rotates the hot spot of the screen in the center|For A = 0 To 360|Screen Rotate A|Wait Vbl|Next|Wait Key|~~~|Warning: on software renderers this instruction will slow down the application|"},{"name":"Screen Skew","descriptions":[{"lang":"en","text":"Applies a horizontal and vertical distortion to a screen during the display process. Does not affect the content of the screen."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"integer","text":"The index of the screen"},{"lang":"en","name":"xSkew#","type":"float","text":"The number of pixel to shift at each horizontal pixel"},{"lang":"en","name":"ySkew#","type":"float","text":"The number of pixel to shift at each vertical pixel"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"~~~|Degree||// Open a screen and display some text in it.|Screen Open 0, 1280, 720, 16|For N = 0 To 100|Ink Rnd( 16 ) : Print \"AOZ\";|Next||// Make the screen go berzerk!|Do|Screen Skew 0, Rnd( 16 ) - 8, Rnd( 16 ) - 8|Wait Vbl|Next|~~~|Warning: on software renderers this instruction will slow down the application|"},{"name":"Screen Scale","descriptions":[{"lang":"en","text":"Resize a screen during the display process. Does not affect the content of the screen."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the screen"},{"lang":"en","name":"xScale","type":"float","text":"The horizontal scale. 1= no effect, 0.5= half the width, 2= twice the width, etc."},{"lang":"en","name":"yScale","type":"float","text":"The vertical scale. 1= no effect, 0.5= half the height, 2= twice the height, etc."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|Degree||// Open a screen and put some text in it.|Screen Open 0, 1280, 720, 16|For N = 0 To 100|Ink Rnd( 16 ) : Print \"AOZ\";|Next||// Set the hot-spot of the screen to it's center|Screen Hot Spot 0, $11||// Make the screen zoom out|For Z# = 1 To 0 Step -0.01|Screen Scale 0, Z#, Z#|Wait Vbl|Next|~~~|Warning: on software renderers this instruction may slow down the application|"},{"name":"Screen Alpha","descriptions":[{"lang":"en","text":"Set the global transparency of a Screen, also called \"Alpha\". All graphics, text and Bobs that are on the screen will be affected. Sprites are unaffected by Screen Alpha."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the screen in the list of active screens (optional)"},{"lang":"en","name":"alpha#","type":"float","text":"Value of Alpha, from 1 (fully opaque) to 0 (fully transparent)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction allows you to turn any Screen Image with it's contents (with the exception of sprites) into a semi-transparent image. The screen will completely disappear from display with an Alpha value of 0, but will remain active.||The next example displays some graphics on the screen and slowly fades it away...|~~~||Curs Off|Set Font 0,80|Set Transparent 0|Ink 3|// Fill the screen with coloured boxes|For f=0 to 100|Colour 3,rnd(16581375)|Bar Rnd(Screen Width-200),Rnd(Screen Height-200),Rnd(350)+50,Rnd(350)+50|Next f|Ink 1|// Add Some Text|Text Screen Width/2,Screen Height/2,\"Press Any Key To Fade\",\"#center\"|Wait Key|For a#=1 to 0 Step -0.01|Screen Alpha a#|Wait Vbl|Next a#|End|~~~|"},{"name":"Screen Copy","descriptions":[{"lang":"en","text":"Copy an area from one screen to another or itself, resizing the area"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"sourceIndex","type":"index","text":"The index of the source screen"},{"lang":"en","name":"x1","type":"integer","text":"The horizontal coordinate of the top-left corner of the origin area to copy"},{"lang":"en","name":"y1","type":"integer","text":"The vertical coordinate of the top-left corner of the origin area to copy"},{"lang":"en","name":"x2","type":"integer","text":"The horizontal coordinate of the bottom-right corner of the origin area to copy"},{"lang":"en","name":"y2","type":"integer","text":"The vertical coordinate of the bottom-right corner of the origin area to copy"},{"lang":"en","name":"destinationIndex","type":"index","text":"The index of the destination screen"},{"lang":"en","name":"x3","type":"integer","text":"The horizontal coordinate of the top-left corner of the destination area"},{"lang":"en","name":"y3","type":"integer","text":"The vertical coordinate of the top-left corner of the destination area"},{"lang":"en","name":"x4","type":"integer","text":"The horizontal coordinate of the bottom-right corner of the destination area"},{"lang":"en","name":"y4","type":"integer","text":"The vertical coordinate of the bottom-right corner of the destination area"},{"lang":"en","name":"*mode","type":"integer","text":"The drawing mode to use while drawing (not implemented TODO)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"SCREEN COPY is the most important screen command of all. It can be used to achieve classic screen techniques|like \"wiping\" from one screen to another, as well as providing all sorts of special effects. At its simplest level, use|this command to copy the whole contents of one screen to another screen.|Then determine the number of the destination screen, which is where you want the image copied to.||For example:|~~~|Screen Copy 1 To 2|~~~|Exact sections of screens can be copied by giving the coordinates of the top left-hand and bottom right-hand corners|of the areas to be copied, followed by the number of the destination screen and the coordinates where the copy's top|left-hand corner should be placed. If the destination screen number is omitted, the copied image will appear at the|new coordinates on the current screen. For example:|~~~|Circle 50,50,10 : Wait 50|Screen Copy 0,20,20,70,70 To 0,100,100|~~~|Note that there are no limits to these coordinates, and any parts of the image that fall outside of the current visible|screen area will be clipped automatically.|"},{"name":"X Screen","descriptions":[{"lang":"en","text":"Convert a hardware horizontal coordinate into a screen coordinate. Hardware coordinates are different from screen coordinate only in retro-machine display emulation (Amiga, Atari etc.)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*screenIndex","type":"index","text":"The index of the screen. If ommited, this function will concern the current screen."},{"lang":"en","name":"x","type":"integer","text":"The hardware coordinate to convert"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The correponding horizontal coordinate in the Screen"}],"compatible":" amos","content":"These functions transform a hardware coordinate into a screen coordinate, relative to the current screen. If the|hardware coordinates lie outside of the screen, both functions will return relative offsets from the screen boundaries.|An optional screen number may be included, in which case the coordinates will be returned relative to that screen.|"},{"name":"Y Screen","descriptions":[{"lang":"en","text":"Convert a hardware vertical coordinate into a screen coordinate. Hardware coordinates are different from screen coordinate only in retro-machine display emulation (Amiga, Atari etc.)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*screenIndex","type":"index","text":"The index of the screen. If ommited, this function will concern the current screen."},{"lang":"en","name":"y","type":"integer","text":"The hardware coordinate to convert"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The correponding vertical coordinate in the given screen"}],"compatible":" amos","content":"These functions transform a hardware coordinate into a screen coordinate, relative to the current screen. If the|hardware coordinates lie outside of the screen, both functions will return relative offsets from the screen boundaries.|An optional screen number may be included, in which case the coordinates will be returned relative to that screen.|"},{"name":"Def Scroll","descriptions":[{"lang":"en","text":"Define a new scrolling zone in the current screen. This instruction has no visible effect until a \"Scroll\" instruction is used"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the scrolling zone to define"},{"lang":"en","name":"x1","type":"integer","text":"The horizontal coordinate of the top-left pixel of the rectangle to scroll"},{"lang":"en","name":"y1","type":"integer","text":"The vertical coordinate of the top-left pixel of the rectangle to scroll"},{"lang":"en","name":"x2","type":"integer","text":"The horizontal coordinate of the bottom-right pixel of the rectangle to scroll"},{"lang":"en","name":"y2","type":"integer","text":"The vertical coordinate of the bottom-right pixel of the rectangle to scroll"},{"lang":"en","name":"dx","type":"integer","text":"Signed horizontal shift to apply. 0= no scroll, -1= one pixel to the left, 1= one pixel to the right, etc"},{"lang":"en","name":"dy","type":"integer","text":"Signed vertical shift to apply. 0= no scroll, -1= one pixel to the top, 1= one pixel to the bottom, etc"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"Using AOZ Studio, you are able to define scrolling screen zones, and each one can have an individual pattern of movement.||Simply follow your DEF SCROLL command with the index of the zone you are setting up.||Then give the coordinates of the area of the zone to be scrolled, from the top left-hand corner to the diagonally opposite bottom right-hand corner. Finally, give this zone a scrolling pattern by|setting the number of pixels to be shifted horizontally, and the number of pixels to be shifted vertically during each|scrolling operation.||Positive horizontal values will cause a shift to the right whereas negative values will shift the zone towards the left of the screen. Similarly, positive vertical values will scroll downwards and negative values|cause an upward scroll.|"},{"name":"Scroll","descriptions":[{"lang":"en","text":"Performs the action of scrolling for a pre-defined scrolling area."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the scrolling area as defined with \"Def Scroll\""}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"Moves the pixels in the desired direction. The empty zones at the extremities of the scrollign area, on left, top and/or right and bottom are left unchanged and will have to be cleared||To scroll a screen zone already specified with a DEF SCROLL setting, use SCROLL followed by the zone number you require.|"},{"name":"Appear","descriptions":[{"lang":"en","text":"Progressively draw one screen into another using a fading effect"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"sourceScreen","type":"index","text":"Index of the source screen"},{"lang":"en","name":"destinationScreen","type":"index","text":"Index of the destination screen"},{"lang":"en","name":"pixels","type":"integer","text":"Value used to perform the effect"},{"lang":"en","name":"range","type":"integer","text":"Range of the apparition in number of pixels (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"This command creates a fade between two pictures. Choose the number of the source screen where the original|picture comes from, then the number of the destination screen whose picture it fades into.||Next determine a value that will cause the desired effect, by setting the number of pixel points on the screen, ranging|from 1 pixel all the way up to every pixel in the display.||Normally APPEAR affects the whole of your screen area, but there is an optional parameter that causes only part of|the screen to be faded. Because screens are drawn from top to bottom, set the area to be faded by adding the range|of the number of pixels from the top of the screen.||For example:|~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.Abk\"|Paste Bob 100,0,1|Wait 100|Screen Open 1,320,90,16|Appear 0 To 1,1,28800|~~~|That example fades the top part of your default screen into the newly opened Screen 1. Obviously, the appearance of|fades will vary, depending on the screen mode being used.|"},{"name":"Zoom","descriptions":[{"lang":"en","text":"Copy and scale a rectangle from one screen to another."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"sourceScreen","type":"index","text":"Index of the source screen"},{"lang":"en","name":"x1","type":"integer","text":"Horizontal coordinate of the top-left corner of the rectangle to zoom in the source screen"},{"lang":"en","name":"y1","type":"integer","text":"Vertical coordinate of the top-left corner of the rectangle to zoom in the source screen"},{"lang":"en","name":"x2","type":"integer","text":"Horizontal coordinate of the bottom-right corner of the rectangle to zoom in the source screen"},{"lang":"en","name":"y2","type":"integer","text":"Vertical coordinate of the bottom-right corner of the rectangle to zoom in the source screen"},{"lang":"en","name":"destionationScreen","type":"index","text":"Index of the destination screen"},{"lang":"en","name":"x3","type":"integer","text":"Horizontal coordinate of the top-left corner of the rectangle to zoom in the destination screen"},{"lang":"en","name":"y3","type":"integer","text":"Vertical coordinate of the top-left corner of the rectangle to zoom in the destination screen"},{"lang":"en","name":"x4","type":"integer","text":"Horizontal coordinate of the bottom-right corner of the rectangle in the destination screen"},{"lang":"en","name":"y4","type":"integer","text":"Vertical coordinate of the bottom-right corner of the rectangle in the destination screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"This one command allows you to produce a range of remarkable effects that change the size of the image in any|rectangular area of the screen. Depending on the relative sizes of the source and destination areas, images can be|magnified, shrunk, squashed and stretched as you wish. ZOOM is qualified by the number of the screen from where|your source picture will be taken, followed by the coordinates of the top left-hand corner and bottom right-hand|corner of the area to be grabbed, After the TO structure, give the, number of the destination screen and the new|coordinates of the area which is to hold the zoomed image. AOZ Studio will automatically re-size the|image.|"},{"name":"XGr","descriptions":[{"lang":"en","text":"Return the current horizontal coordinate of the graphical cursor in the current screen"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use these functions to find the current coordinates of the graphics cursor, which is the default location for future|drawing operations. For example:|~~~|Cls : Circle 100,100,50|Print Xgr,Ygr|~~~|"},{"name":"YGr","descriptions":[{"lang":"en","text":"Return the current vertical coordinate of the graphical cursor in the current screen"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use these functions to find the current coordinates of the graphics cursor, which is the default location for future|drawing operations. For example:|~~~|Cls : Circle 100,100,50|Print Xgr,Ygr|~~~|"},{"name":"ScIn","descriptions":[{"lang":"en","text":"Check if the given coordinates are located above a given screen on display. Hardware coordinate are only different from screen coordinate for retro-machine emulation (Amiga, Atari etc.)"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"The index of the screen to test."},{"lang":"en","name":"x","type":"integer","text":"Horizontal hardware coordinate to test"},{"lang":"en","name":"y","type":"integer","text":"Vertical hardware coordinate to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the given coordinate lay over the screen, False if not"},{"lang":"en","type":"integer","text":"The number of the top-=most screen under the coordinates, or -1 if no screen is found."}],"compatible":" aoz, amos","content":"The SCIN function (short for SCreen In) is normally used with X MOUSE and Y MOUSE to check whether the|mouse cursor has entered a particular screen. It returns the number of the screen which is underneath the selected coordinates. If there is no screen there, a negative number will be returned.||The return value varies if you specify or not the index of the screen to scan:||### The index of a screenis specified|The function will return TRUE iof the coordiantes lay above the screen and FALSE if they do not||### The index of a screen is *not* specified|The function will return the index of the top screen at the coordinates or -1 if no screen is found.|"},{"name":"Mouse Screen","descriptions":[{"lang":"en","text":"Return the index of the screen under the mouse"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"-1 if the coordinate lay outside of all the displayed screens, or the index of the top-most screen if they lay inside of one"}],"compatible":" aoz, amos","content":"Use MOUSE SCREEN to return the number of the screen where the mouse pointer is currently located, like this:|~~~|X=Mouse Screen|Print X|~~~|"},{"name":"Screen Colour","descriptions":[{"lang":"en","text":"Return the number of colours in the palette of a given screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*screenIndex","type":"index","text":"The index of the screen to query. If ommmited, the number of colours of the current screen will be returned."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The number of colours in the palette"}],"compatible":" aoz, amos","content":"To find the maximum number of colours in the screen that is currently active, test the SCREEN COLOUR function now:|~~~|Print Screen Colour|~~~|"},{"name":"Screen Color","descriptions":[{"lang":"en","text":"Return the number of colours in the palette of a given screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*screenIndex","type":"index","text":"The index of the screen to query. If ommmited, the number of colours of the current screen will be returned."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The number of colors in the palette"}],"compatible":" aoz","content":"To find the maximum number of colours in the screen that is currently active, test the SCREEN COLOUR function now:|~~~|Print Screen Color|~~~|"},{"name":"Screen Width","descriptions":[{"lang":"en","text":"Return the width in pixels of a given screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*screenIndex","type":"index","text":"The index of the screen to query. If ommited, AOZ will return the width of the current screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The width of the screen in pixel"}],"compatible":" aoz, amos","content":"The dimensions of the current screen can be found like this:|~~~|Print Screen Height|Print Screen Width|~~~|"},{"name":"Screen Height","descriptions":[{"lang":"en","text":"Return the height in pixels of a given screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*screenIndex","type":"index","text":"The index of the screen to query. If ommited, AOZ will return the width of the current screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The height of the screen in pixel"}],"compatible":" aoz, amos","content":"~~~|Print Screen Height|Print Screen Width|~~~|"},{"name":"Screen","descriptions":[{"lang":"en","text":"Set the given screen index as the current screen, all graphical operation being directed to this screen after this instruction"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the screen to set as active"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, amos","content":"SCREEN can be used as a function to return the number of the screen which is currently active. This screen is used|for all drawing operations, but it is not necessarily visible.|"},{"name":"Screen","descriptions":[{"lang":"en","text":"Return the index of the current screen, -1 if no screen is opened when the function is called"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The index of the current screen"}],"content":"SCREEN can be used as a function to return the number of the screen which is currently active. This screen is used|for all drawing operations, but it is not necessarily visible.||Warning: this function will return -1 if the screen index is a string!|"},{"name":"Remap","descriptions":[{"lang":"en","text":"Transforms the values of all the pixels in a rectangle matching a specific RGB value to another RGBA value."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"color1","type":"rgb","text":"The RGB value of the color to look for"},{"lang":"en","name":"color2","type":"rgba","text":"The RGBA value of the color to replace with"},{"lang":"en","name":"*x","type":"integer","text":"The horizontal coordinate of the top-left corner of the origin area to scan"},{"lang":"en","name":"*y","type":"integer","text":"The vertical coordinate of the top-left corner of the origin area to scan"},{"lang":"en","name":"*width","type":"integer","text":"The horizontal coordinate of the bottom-right corner of the origin area to scan"},{"lang":"en","name":"*height","type":"integer","text":"The vertical coordinate of the bottom-right corner of the origin area to scan"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This instruction will affect the whole screen if tyou ommit to declare the remapping zone...||Warning, this operation can take a long time to process and make the browser irresponsive during a while|"},{"name":"Set Transparent","descriptions":[{"lang":"en","text":"Set one or more colours of the current screen as transparent."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"colors","type":"integers","text":"A list of indexes of colours in the screen palette eparated by a comma"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"After this instruction, the colors you have indicated will be transparent. It means that the user will see whatever lays behind the screen at the position where the given colors are used.||Use this instruction to easliy create parallax scrollings as in this example:||~~~|Degree||// Open a background screen and put some text in it.|Screen Open 0, 1280, 720, 16|For N = 0 To 100|Ink Rnd( 16 ) : Print \"AOZ\";|Next||// Open a front screen, larger than the display and put some circles in it|Screen Open 1, 1280 * 4, 720, 16||// Set color 0 of the front screen (the current one) to transparent and clear the screen|Set Transparent 0 : Cls 0|Screen To Front 1\t\t\t// Not really necessary... ;)|For N = 0 To 100|Ink Rnd( 15 ) + 1 : Circle Rnd( 1280 * 4 ), Rnd( 720 ), Rnd( 200 )|Next||// Perform the scroll|For X = 0 To 1280 * 4|Screen Offset 1, X, 0|Wait Vbl|Next|~~~|Warning: this instruction will invoke a complete remapping of the screen that might take a long time. Use this instruction to make parralax scrolling diplays|"},{"name":"Stop Transparent","descriptions":[{"lang":"en","text":"Set one or more colours of the current screen as opaque. Will invoke a complete remapping of the screen that migght take a long time."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"colors","type":"integers","text":"A list of indexes of colours in the screen palette eparated by a comma"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Set Alpha","descriptions":[{"lang":"en","text":"Set the alpha of one or more colours in the current screen. This effect of this instruction will only be visible when the next graphical instruction using this coloour are executed."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"ink","type":"integer","text":"The index of the colour in the screen palette"},{"lang":"en","name":"alpha#","type":"float","text":"The value of the alpha, 0= totally opaque, 1= totally transparent (colour will not be visible and leave \"holes\" in the screen)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"}]},{"name":"Sound Samples","id":1639692454291,"descriptions":[{"lang":"en","text":"Instructions set to play sounds effects."}],"descriptions_file":[],"author":"Fran√ßois Lionet","since":"0.9.0","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Voice","descriptions":[{"lang":"en","text":"A sound voice part of the game"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"aoz"},{"name":"Boom","descriptions":[{"lang":"en","text":"BOOM command plays a realistic explosive sound effect."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This does not delay the program at all, so it may be necessary to use WAIT between successive explosions,|or to create ricochet and echo effects.||The BOOM command plays a realistic explosive sound effect simulating an explosion.|This does not delay the program at all, so it may be necessary to use WAIT between successive explosions, or to|create ricochet and echo effects For example:|~~~|Curs Off : Centre \"Thunderbolt and Lightning\"|Flash 1, \"(FFF,1)(000,147)(A5F,2)|Boom : Wait 150: Boom : Cls|Centre \"Very Very Frightening\"|Wait 50 : Boom|~~~|"},{"name":"Shoot","descriptions":[{"lang":"en","text":"Generate percussive sound effect."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The SHOOT command generates a simple sound effect in exactly the same way as Boom.|For example:|~~~|Shoot : Wait 25: Shoot : Print \"Ouch!\"|~~~||"},{"name":"Bell","descriptions":[{"lang":"en","text":"Generate the sound of a bell."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Unlike the built-in explosive sound effects, Bell produces a simple pure tone.||The frequency or \"pitch\" of this sound can be changed by adding a pitch value after the BELL command, ranging|from 1 for a very deep ring, up to 96 for an ultra high pitched sound. You can hear the range of frequencies with|this example :|~~~|For F=1 To 96|Bell F : Wait F/10+1 : Rem Vary delay|Next F|~~~|(example taken from the Amiga, it will give various results depernding on the platform)|"},{"name":"Sam Play","descriptions":[{"lang":"en","text":"Play a sound sample from the sample bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"sample","type":"index","text":"Index of the sample into the bank to play"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The Sam Play command is used to play a digital sound sample through your audio system. Simply define the|number of the required sample held in the bank. There is no limit to the number of samples that can be stored, other|than available memory.||There are two optional parameters that can also be given. A voice parameter can be placed immediately after the|SAM PLAY command, in front of the sample number. This is a bitmap containing a list of the voices the sample|will use. There is one bit for each of the four available voices, and to play a voice the relevant bit should be set to 1.||The other parameter can be given after the sample number, and this governs the|frequency of the sound. The frequency parameter sets the speed at which the sample will be played back, and the|setting is given in Hertz. This is a professional standard of measurement, but as a rule of thumb, a rate of 4000 is|acceptable for simple sound effects, with 10000 for recognisable speech. By changing this playback rate, the sample|pitch can be adjusted over a very wide range, allowing a single sample to generate many different sounds.||The following example loads up a bank of ready-made samples stored in the \"AOZ Resources Drive/AMOSPro Examples\" folder, and|allows you to play them in random order:|~~~|Load \"AMOSPro_Examples:Samples/Mixture.Abk\",5|Sam Bank 5|Curs Off : Cls 0: Paper 0|Locate 0,10|Centre \"Press a key from A to J\"|Do|A$=Inkey$|A=Asc(A$)|If A>96 And A<107|Sam Play A-96|End If|Loop|~~~|You can try playing the keys rapidly, like a miniature drum kit, as well as holding down the keys to get some|hammer-drill effects! The next example demonstrates the use of two voices for a simple echo effect, and how|frequency changes can alter the sample:|~~~|Load \"AMOSPro_Examples:Samples/Mixture.Abk\",10|Sam Bank 10|Sam Play 1,12 : Wait 5: Sam Play 2,12: Rem Simple echo effect|Wait Key|Sam Play 1,13,2000: Rem Lower Pitch|Wait Key|Sam Play 1,13,5000: Rem Higher Pitch|~~~||"},{"name":"Sam Stop","descriptions":[{"lang":"en","text":"Stop one or more samples playing"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*voice","type":"integer","text":"Index of the voice"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This simple command is used to stop all samples playing through your loudspeaker system. If it is followed by an|optional voice parameter, only the selected voices will be switched off. Voices are chosen using a binary bit-map,|where any bit that is assigned to 1 will have the associated voice terminated. Otherwise it will be ignored. The voices|are associated with the following bits:|~~~|Voice 3210|Bitmap %1111|~~~|For example, the next line would stop samples playing on voices 3 and 1:|~~~|Sam Stop %1010|~~~|"},{"name":"Volume","descriptions":[{"lang":"en","text":"Define the volume of a voice"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"level","type":"float","text":"Value of the volume (0-mute)."},{"lang":"en","name":"voice","type":"integer","text":"Index of the voice."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The VOLUME command controls the level of sound flowing through one or more channels, ranging from zero|(complete silence) up to 63 (ear-splitting), like this:|~~~|For L=0 To 63|Volume L: Bell 80 : Wait 5|Next L|~~~|Once the VOLUME level has been set, all future sound effects and music will be delivered at that level, across all|four channels. In order to create stereo effects and perfect sound mixes, each of the voices needs to be adjusted|independently from one another.||"},{"name":"Voice","descriptions":[{"lang":"en","text":"Activate a voice"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bitmask","type":"integer","text":"A mask of bit, where bit 0 indicates voice 0, bit 1 voice 1 etc."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"Soundtracks are made up of one or more voices, acting independently or together. The VOICE command is used to|activate voices by setting a bit-mask, with each bit representing the state of one of the four available channels|through which the voices flow. To play the required voice (from 0 to 3) simply set the relevant bit to 1, otherwise a|value of zero will keep the voice silent. Here are some example settings:|~~~|Voice %1111 : Rem Activate all voices|Voice %0001 : Rem Activate voice 0 only|Voice %1001 : Rem Activate voices 3 and 0|~~~|The volume of each voice can now be controlled by specifying voices and volumes, like this:|~~~|Volume %0001,63|Boom : Wait 100: Rem Channel 1 loud|Volume %1110,5|Boom : Wait 50: Rem Channels 2,3,4 soft|Bell 40 : Wait 50 : Volume 60: Bell 40|~~~|Here are some common values for voice settings, that can be used to make programming a little easier:|~~~|Value \tVoices used \tEffect|15 \t0,1,2,3 \tuse all four voices|9 \t0,3 \t\tcombine output to left speaker|6 \t2,4 \t\tcombine output to right speaker|1 \t0 \t\tuse voice 0|2 \t1 \t\tuse voice 1|4 \t2 \t\tuse voice 2|8 \t3 \t\tuse voice 3|~~~||"},{"name":"Voice On","descriptions":[{"lang":"en","text":"Unmute one or all voices"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"voice","type":"number","text":"The number of the voice to unmute, if ommited the master volume will be restored to the original volume"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"If used without any parameter, this instruction will mute the master volumte of the audio context.||If specified, only the specified voice will be unmuted.|"},{"name":"Voice Off","descriptions":[{"lang":"en","text":"Mute one or all voices"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"voice","type":"number","text":"The number of the voice to mute, if ommited the master volume will be muted"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"If used without any parameter, this instruction will mute the master volumte of the audio context.||If specified, only the specified voice will be muted.|"},{"name":"Play","descriptions":[{"lang":"en","text":"Play a voice"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"voice","type":"integer or string","text":"The note to play, from 1 to 96 if a number, of the name of the note in international notation"},{"lang":"en","name":"delay","type":"integer","text":"The length of any pause between this PLAY command and then next, in 1/1000th of second in PC mode, and 1/50th of second in Amiga mode"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" amos, stos, aoz","content":"Patterns of individual notes can be played, allocated to any voice, given a pitch and delayed for pause, using just one|PLAY command. The voice parameter is optional, allowing notes to be played through any combination of thecomputer voices,|and is set by the usual bit-map format.||The pitch parameter uses the values from 1 to 96, which correspond to the notes in the table given earlier. Delay sets|the length of any pause between this PLAY command and the next instruction in the program, with a value of zero|starling the note and immediately going on to the next command.||The next example demonstrates this technique, including stereo harmonies:|~~~|Play 1,40,0: Play 2,50,0: Rem No delay|Wait Key|Play 1,40,15: Play 2,50,15: Rem Delay|Rem Play a random sequence of notes|Do|V=Rnd(1 5): P=Rnd(96): Play V,P,3|Loop|~~~|PLAY is not restricted to pure notes. It is possible to assign complex wave forms to voices, using the WAVE and|NOISE commands next. To stop the playing process, simply turn it off like this:|~~~|Play Off|~~~|"},{"name":"Play Off","descriptions":[{"lang":"en","text":"Stop playing a voice"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*bitmask","type":"integer","text":"A mask of bit, where bit 0 indicates voice 0, bit 1 voice 1 etc."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented"},{"name":"Set Wave","descriptions":[{"lang":"en","text":"Define a wave form"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The number of the wave to define"},{"lang":"en","name":"shape$","type":"integer","text":"The definition of the shape"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"The SET WAVE command sets the wave form of an individual sound, that can then be used at various pitches to|create music or sound effects. This command requires two parameters, the number of the wave to be set, followed|by the shape of this pattern, held in a string.||Wave numbers zero and 1 are already allocated, so these numbers should not be used. Wave zero holds a random|noise pattern, used to generate the explosive effects of BOOM and SHOOT, while wave number 1 is a smooth|pattern in the shape of a sine wave, which is used as the \"template\" for the pure tones needed by the PLAY and|BELL commands. So when setting your new wave patterns, use the identification numbers from 2 upwards.||Setting the parameter for the shape of the wave form is a little more complicated.||Each one of the 256 numbers which make up the shape of the wave form sets a single level of intensity for that|single part of the wave. Each one of these intensities can hold a possible value ranging from -128 up to 127. Look at|the diagram below. The vertical scale represents this range of intensities (-128 to 127) and the horizontal scale|shows the physical length of the wave form, in other words the individual moments of time as the wave is played|(256).|![Wave Example 1](help:img/samples/samples_ex1.png)||This triangular wave pattern does not make a very exciting sound, but it serves as a simple introduction to making|your own wave forms.|Because AOZ Studio strings can only hold positive numbers from zero to 256, the negative values in this|wave form need to be converted before use. This is extremely easy, and is achieved by adding 256 to the negative|numbers in the list! In other words, a value of -50 would be entered as 206, like this:|~~~|-50+256=206|~~~|The following program shows how the sort of wave form in the above diagram could be created The wave form is|then assigned to a wave and played, which is explained a little later.|~~~|S$=\" \" : Rem Clear wave form string|For W=-128 To 127|X=W : If X<0 Then Add X,256|S$=S$+Chr$(X)|Next W|Set Wave 2,S$|Wave 2 To 15: For S=10 to 60: Play S,10: Next S|~~~|The wave forms of musical instruments are much more complicated than the last example, but they are not too|difficult to reproduce. By combining several sine waves together, with each sine wave having a different starting|point, the type of pattern shown in the next diagram is achieved.|![Wave Example 1](help:img/samples/samples_ex2.png)||This sort of wave form generates smooth harmonics, which can then be used as the \"templates\" for musical notes,|and the sort of routine in the next example can produce typical sine waves:|~~~|SHAPE$=\" \" : Degree|For S=0 To 255|V=Int((Sin(S)/2+Sin(S*2+45)/4)*128)+127|SHAPE$=SHAPE$+Chr$(V)|Next S|Set Wave 2,SHAPE$ : Wave 2 To 15|For N=10 To 60: Play N,10 : Next N|~~~||"},{"name":"Wave","descriptions":[{"lang":"en","text":"Assign a wave to sound channel"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The number of the wave to define"},{"lang":"en","name":"bitmask","type":"integer","text":"A mask of bit, where bit 0 indicates voice 0, bit 1 voice 1 etc."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"The WAVE command is used to assign the specified wave number to one or more sound channels.||The voice parameter contains a bit-map in the standard format, and if a bit pattern is set to 1 then the appropriate|voice is used to PLY the sound. Remember that wave number zero is already reserved for the NOISE channel, and|wave number 1 contains a smooth sine wave for pure tone. Here are some examples:|~~~|Wave 1 To %1111 : Rem Play pure tone through all voices|Play 60,0|Wave 0 To %0001 : Rem Use voice 0 for noise|Play 20,10|~~~||"},{"name":"Noise To","descriptions":[{"lang":"en","text":"Assign noise wave to sound channel"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bitmask","type":"integer","text":"A mask of bit, where bit 0 indicates voice 0, bit 1 voice 1 etc."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"This command has the same effect as assigning the white noise wave form number zero to the selected voices, and it|is used to form the foundations for a whole range of special effects, such as explosions and percussion drumming.|The bit-pattern used to set one or more voices has already been explained above. Here is an example:|~~~|Noise To 15 Rem All four voices|Play 60,50|Play 30,0|~~~||"},{"name":"Sample","descriptions":[{"lang":"en","text":"Assign noise wave to sound channel"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the wave to define"},{"lang":"en","name":"bitmask","type":"integer","text":"A mask of bit, where bit 0 indicates voice 0, bit 1 voice 1 etc."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"This is the most powerful of the wave commands. SAMPLE is used to assign the specified sound sample number, which is already stored in the Sample Bank, directly to the current wave form. The voices to be used are set in the usual way. When PLAY is used, this sample will be taken from the Sample Bank and used as the \"musical|instrument\" to be played. Try this example:|~~~|Load \"AMOSPro_Examples:Samples/Mixture.Abk\",6|Sam Bank 6|Sample 5 To 15|For S=20 To 50|Play S,50|Next S|~~~|The pitch values that can be applied to any particular sample will vary, but normally anything between 10 and 50 is|satisfactory.||"},{"name":"Del Wave","descriptions":[{"lang":"en","text":"Delete a wave"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The number of the wave to delete"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"To delete a wave that has been set up with a SET WAVE instruction, simply use this command followed by the number of the wave to be erased.||When this has been done, all deleted voices will be set to the standard default sine wave. The pre-set wave numbers|zero and 1 can be manipulated, but they cannot be eradicated.||Making audio envelopes|An \"envelope\" is audio jargon for how a sound is manipulated during the brief period of tin that it is played. In other|words, whether it bursts into life or makes a more subtle entry (attack), whether it fades away with dignity or lives|life to the full (decay), how long it hangs on for (sustain) and finally, the manner in which it meets its end (release).|All of this is achieved simply by changing the volume of individual sections of the wave form.||"},{"name":"Set Envel","descriptions":[{"lang":"en","text":"Create a volume envelope"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number of the wave to create"},{"lang":"en","name":"phase","type":"integer","text":"Refers to one of seven individual sections of the original wave form that is to be defined, ranging from 0 to 6"},{"lang":"en","name":"duration","type":"integer","text":"Controls the length of this particular segment (phase number) of the wave form, and is expressed in units of one 1/1000th of a second in PC mode and 1/50th of a second in Amiga mode"},{"lang":"en","name":"volume","type":"integer","text":"Specifies the volume to be reached by the end of this phase"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"AOZ Studio uses envelopes to change your original wave forms according to a set pattern. The parameters|are as follows:||The wave number sets the wave form to be affected, and any number can be used including the pre-set wave|numbers zero and 1.||The phase number refers to one of seven individual sections of the original wave form that is to be defined, ranging|from 0 to 6.||The duration controls the length of this particular segment (phase number) of the wave form, and is expressed in|units of one 50th of a second. This is how the speed of a volume change in any phase of the wave form is|controlled.||Volume specifies the volume to be reached by the end of this phase, ranging from zero for silence up to 63 for full|blast.||In the next example, an envelope for wave form number one is set, so that segment zero (its first phase) lasts for|four seconds, ramping up to full volume by its end, no matter what the original volume was at the start of this phase.|~~~|Set Envel 1,0 To 200,63|~~~||"},{"name":"VuMeter","descriptions":[{"lang":"en","text":"Return the volume level of a voice"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"voice","type":"integer","text":"The number of the voice"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The current audio level of the voice"}],"compatible":" notimplemented","content":"Volume meters (Vu-meters) are a familiar sight on the control panels of audio equipment. AOZ Studio is not|only able to monitor the volume level of any selected voice number from 0 to 3, it can also use the value of the|volume intensity to make graphics dance around in response to the intensity of a soundtrack!\"||The value returned is given as the volume intensity, ranging from silence (0) up to full volume (63).||The best way to understand the effect of all the commands in this Chapter is to hear them working. Be sure to try out|all of the demonstration programs that are available via the HELP feature.||Playing music|The AOZ Studio music system allows backing tracks to be added to any program. Music can be created|from a variety of sources, including original samples and compositions, which are explained in the following two|Chapters. These backing tracks are converted into the AOZ Studio format, and held in the Music Bank.||Music tracks are loaded with the MUSIC command, volume is controlled by MVOLUME, and speed by|MVOLUME. Individual music passages can be halted using the MUSIC STOP instruction, and all music is halted|by MUSIC OFF.||For a taster of these techniques in action, load this ready-made example:|~~~|Load \"AMOSPro_Examples:Music/Music.Abk\"|Music 1: Mvolume 63 : Tempo 35|~~~||"},{"name":"Sam Bank","descriptions":[{"lang":"en","text":"Change the current Samples bank"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"bankNumber","type":"index","text":"The index of the new bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"The SAM BANK instruction dictates that all future SAM PLAY commands will take samples from the newly|specified memory bank. If several parallel banks are set up, AOZ Studio can swap between them with a|simple call to the SAM BANK command. To hear all of the samples used in one of the AOZ Studio|example games, load the following file and listen to what is stored in the memory bank, using this routine:|~~~|Load \"AMOSPro_Productivity:Wonderland/Wonderland Samples.Abk\"|Sam Bank 6|For A=1 To 5|Print \"Sample number \";A|For B=1 To 3|Sam Play A|Wait 20|Next B|Next A|~~~|Playing a sample from memory|Samples do not have to be held in a special bank. In fact, a \"raw\" sound sample can be stored anywhere in the|computer's memory using BLOAD, and then played with the following command:||"},{"name":"Sam Raw","descriptions":[{"lang":"en","text":"Play a raw sample from memory"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"voices","type":"integer","text":"A mask of bit, where bit 0 indicates voice 0, bit 1 voice 1 etc."},{"lang":"en","name":"address","type":"integer","text":"The address of the sound samples, must be part of an AOZ memory bank"},{"lang":"en","name":"length","type":"integer","text":"The number of bytes to read"},{"lang":"en","name":"frequency","type":"integer","text":"The frequency at which to play, in Herz"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"SAM RAW plays a raw sample, and can be used to scan through any program or sound library discs, searching for a|sample that matches the given parameters.||The voice parameter has already been explained. Address refers to the location address of the sound sample, which|is normally inside an AOZ Studio memory bank, but can be anywhere. The length parameter confirms the|length in bytes of the sample to be played. Finally, frequency dictates the playback speed of the original sample,|given in Hertz.||A typical raw sample command looks like this:|~~~|Reserve as work 10,21480|R$=\"AMOSPro_Examples:Samples/Mixture.Abk\"|Bload R$,Start(10)|Sam Raw 15,Start(10),length(10),3000|~~~||"},{"name":"Sam Loop On","descriptions":[{"lang":"en","text":"Start repetition of a sample"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"There are many instances where a single sample needs to be repeated over and over again. SAM LOOP ON ensures|that all sound samples which follow this instruction will be looped continuously. To turn off the looping facility,|simply call the SAM LOOP OFF command. Add a SAM LOOP ON instruction to the last example, before the SAM|RAW command, and hear the result.||"},{"name":"Sam Loop Off","descriptions":[{"lang":"en","text":"Start repetition of a sample"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"There are many instances where a single sample needs to be repeated over and over again. SAM LOOP ON ensures|that all sound samples which follow this instruction will be looped continuously. To turn off the looping facility,|simply call the SAM LOOP OFF command. Add a SAM LOOP ON instruction to the last example, before the SAM|RAW command, and hear the result.||"}]},{"name":"Animate Sprite","id":1639692454305,"descriptions":[{"lang":"en","text":"Instructions and functions to display moveable objects on the top of the display (Sprites)"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Sprite","descriptions":[{"lang":"en","text":"Changes the image of a sprite"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite in the list of sprites"},{"lang":"en","name":"*x","type":"integer","text":"Horizontal position of the sprite in the screen"},{"lang":"en","name":"*y","type":"integer","text":"Vertical position of the sprite in the screen"},{"lang":"en","name":"image","type":"index","text":"Index of the image in the \"Images\" bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The SPRITE command assigns an image to a Sprite, and displays it at the selected hardware coordinates.||The Sprite number can range from 0 to 63. Normally, Sprite number zero is not available because it is already|allocated to the mouse pointer. To ensure that you have the maximum number of Sprites at your disposal, remove the|mouse pointer from the screen with HIDE ON. Sprite identification numbers from 0 to 7 refer to the eight hardware|Sprites whose limitations have already been explained. You will probably want to make use of the AMOS|Professional computed Sprites in your programs instead, and these are assigned the numbers from 8 to 63.||The hardware coordinates hx and hy set the position at which the Sprite will be displayed. Since Sprites are totally|independent from the current screen, normal screen coordinates cannot be used for this purpose. Instead, all Sprites|are positioned by special hardware coordinates as used by the mouse pointer and the SCREEN DISPLAY command.|Hardware coordinates can be converted from normal screen coordinates by the X HARD and Y HARD functions,|which are explained later.||The position of the Sprite is measured from a single spot related to that Sprite, known as the \"hot spot\". This is|usually taken to be the top left-hand corner of the Sprite, but it can be placed anywhere you like using the HOT|SPOT command. Hot spots are explained in detail near the end of this Chapter.||When the Sprite has been allocated an identification number and given its display coordinates, you must select an|image for the Sprite to display. Images are created using the Object Editor (there is a guided tour of this process in|Chapter 13.2) and deposited in the Object Bank, which is normally memory bank 1. Each image in this bank is|assigned its own number, starting from one. To select an image for a Sprite to display, simply give the appropriate|image number. Sprite images may be installed into your programs using the LOAD command, like this:|~~~|Load \"Sprites.Abk\"|~~~|Once images have been installed in this way they will be saved along with your AOZ Studio programs|automatically.||The image number and coordinate parameters can be omitted after a SPRITE command, but the appropriate commas|must be included.||For example:|~~~|Load \"AMOSPro Tutorial:Objects/Sprites.Abk\"|Flash Off : Get Sprite Palette|Curs Off : Cls 0|Sprite 8,200,100,1|Wait Key|Sprite 8,,150,1|Wait Key|Sprite 8,250,,1|Wait Key|Sprite 8,,,2|~~~|"},{"name":"Sprite","descriptions":[{"lang":"en","text":"Create or change a sprite, and return it's object"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite in the list of sprites"},{"lang":"en","name":"*x","type":"integer","text":"Horizontal position of the sprite in the screen"},{"lang":"en","name":"*y","type":"integer","text":"Vertical position of the sprite in the screen"},{"lang":"en","name":"image","type":"index","text":"Index of the image in the \"Images\" bank"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"The SPRITE function assigns an image to a Sprite, and displays it at the selected (hardware) coordinates.||This example demonstrate the use of object-orientation with the Sprite function.|~~~|MYSPRITE@ = Sprite( 1, 100, 100, 1 )|MYSPRITE@Add Circular Movement, Ray = 200|Wait Key|~~~|"},{"name":"Sprite Show","descriptions":[{"lang":"en","text":"Make a sprite visible on screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"Index of the sprite in the list of active sprites"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"All sprites will be made visible if you ommit to specify the index of the sprite to show.|"},{"name":"Sprite Hide","descriptions":[{"lang":"en","text":"Make a sprite invisible"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"Index of the sprite in the list of active sprites"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"All sprites will be made invisible if you ommit to specify the index of the sprite to show.|"},{"name":"Sprite Off","descriptions":[{"lang":"en","text":"Destroys all or one sprite"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"Index of the sprite to destroy. If absent, will destroy all the sprites at once"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The SPRITE OFF command removes all sprites from your display, and all current Sprite movements are aborted.|To re-start them, you have to re-create them with a SPRITE instruction or function.|"},{"name":"Sprite Priority","descriptions":[{"lang":"en","text":"Turns on or off automatic sorting of the Z-order of the sprites"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"onOff","type":"boolean","text":"True to turn priority sorting on, False to stop it"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"When SPRITE PRIORITY ON is used, Sprites with the highest y-coordinates take priority on the screen.|It is usually best to set hot spots at the bottom of the Sprite to exploit this priority, and some superb perspective effects can be created.||All that is needed to re-set the original sprite number priorities is to use the SPRITE PRIORITY OFF command.|"},{"name":"Sprite Update Off","descriptions":[{"lang":"en","text":"Turns off the automatic sprite coordinate update system. After it, all \"Sprite\" instruction will no longer have a visible effect until an \"Sprite Update\" instruction is used"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"The SPRITE UPDATE family of commands provide total control of Sprite movements. Normally, when a Sprite is|moved its position is updated automatically during the next vertical blank period. Please see WAIT VBL if this|needs explaining. However, when many Sprites are moved with the SPRITE command, updates will happen before|all of the Sprites have been successfully repositioned, which can result in jerky patterns of movement. In these|circumstances, the automatic updating system can be turned off with a SPRITE UPDATE OFF command.||When the Sprites have been moved successfully, a call to SPRITE UPDATE will reposition any Sprites that have|been moved since the last update. Alternatively, SPRITE UPDATE ON returns to the default status of automatic|updating.||"},{"name":"Sprite Update On","descriptions":[{"lang":"en","text":"Turns on the automatic sprite coordinate update system. After it, the effect of all \"Sprite\" instructions will be visible on display"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"The SPRITE UPDATE family of commands provide total control of Sprite movements. Normally, when a Sprite is|moved its position is updated automatically during the next vertical blank period. Please see WAIT VBL if this|needs explaining. However, when many Sprites are moved with the SPRITE command, updates will happen before|all of the Sprites have been successfully repositioned, which can result in jerky patterns of movement. In these|circumstances, the automatic updating system can be turned off with a SPRITE UPDATE OFF command.||When the Sprites have been moved successfully, a call to SPRITE UPDATE will reposition any Sprites that have|been moved since the last update. Alternatively, SPRITE UPDATE ON returns to the default status of automatic|updating.||"},{"name":"Sprite Update","descriptions":[{"lang":"en","text":"Enforce a refresh of all the sprites on screen"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"SPRITE UPDATE performs all Bob movements in a single, mighty burst, so all objects are moved at the same instant in your program.||The resulting movement effects are now incredibly smooth, even with dozens of objects on screen at once. SPRITE UPDATE is extremely easy to use, as the following technique explains.|- First, turn off the automatic system with SPRITE UPDATE OFF|- Execute your main loop as normal.|- Now call a SPRITE UPDATE command at the point when objects are to be moved and drawn on screen.|- Finally, wait for the updates to be completed, by using WAIT VBL.||SPRITE UPDATE is used as the standard technique in the vast majority of AOZ arcade games.||If you need to restore the re-drawing system to its default status, SPRITE UPDATE ON sets the situation back to normal.|"},{"name":"Sprite Scale","descriptions":[{"lang":"en","text":"Changes the scale (zoom) of a sprite"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite in the list of active sprites"},{"lang":"en","name":"scaleX#","type":"float","text":"Horizontal scale, 1 displays the Bob at original size, 0.5 reduces it by half, 2 multiplies by two etc. Negative values will mirror the sprite horizontally"},{"lang":"en","name":"scaleY#","type":"float","text":"Vertical scale, 1 displays the Bob at original size, 0.5 reduces it by half, 2 multiplies by two etc. Negative values will mirror the sprite vertically"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This instruction allows you to zoom any sprite instantly and adapt the size of it's image to your game.|The scale also affects collision detection, and the collisions will only be generated on the new surface.||Sprite Scale also works with negative value... in case of a negative scale value, the bob will be mirrored in this direction. Hot Spot are also affected by this instruction.||The next example displays a bob on the screen and zooms it until it is bigger than the screen...|~~~|Load \"AMOSPro_Tutorial:Objects/Sprites.abk\" \t// Load images from disc|Cls 0 \t\t\t\t\t\t\t\t\t\t\t// Set up screen|Sprite 1, 100, 100, 2 \t\t\t\t\t\t\t// Display Sprite at position||For S# = 1 To 100|Sprite Scale 1, S#, S#|Wait Vbl|Next|~~~|"},{"name":"Sprite Rotate","descriptions":[{"lang":"en","text":"Rotates a sprite around it's hot-spot"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite in the list of active sprites"},{"lang":"en","name":"angle#","type":"angle","text":"Angle to rotate with, either in degrees or radian depending on the use of the \"Degree\" or \"Radian\" instruction. AOZ use radians by default"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This instruction allows you to rotate any sprite instantly...||A positive angle rotates the sprite clockwise and a negative angle will rotate it counter-clockwise.|The rotation also affects collision detection, and the collisions will only be generated on the rotated object.||The next example displays a bob on the screen and rotates it slowly..|~~~|Degree\t\t\t\t\t\t\t\t\t\t// Switch to degrees|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\" \t// Load images from disc|Cls 0 \t\t\t\t\t\t\t\t\t\t// Set up screen|Sprite 1, 100, 100, 2 \t\t\t\t\t\t// Display Sprite at position||For A = 0 To 360|Sprite Rotate 1, A|Wait Vbl|Next|~~~|"},{"name":"Sprite Skew","descriptions":[{"lang":"en","text":"Distorts a sprite horizontally or vertically"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite in the list of active Sprites"},{"lang":"en","name":"skewX#","type":"float","text":"Horizontal skew, values should be experimented. 1 displays the sprite in original proportions"},{"lang":"en","name":"skewY#","type":"float","text":"Vertical skew, values should be experimented. 1 displays the sprite in original proportions"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This instruction allows you to generate interesting distortion effects.||The next example displays a sprite on the screen and demonstrates the effect with random values...|~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\" \t// Load Bob images from disc|Cls 0 \t\t\t\t\t\t\t\t\t\t// Set up screen|Sprite 1, 100, 100, 2 \t\t\t\t\t\t// Display Sprite at position||Do|Sprite Skew 1, Rnd() * 2, Rnd() * 2|Wait Vbl|Next|~~~|"},{"name":"Sprite Alpha","descriptions":[{"lang":"en","text":"Set the global transparency of a sprite, also called \"Alpha\""}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite in the list of active sprites"},{"lang":"en","name":"alpha#","type":"float","text":"Value of Alpha, from 1 (fully opaque) to 0 (fully transparent)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction allows you to turn any opaque sprite into a semi-transparent image. The sprite will completely disappear from display with an Alpha value of 0, but will remain active (like a ghost object which can be useful for collision detection)...||The next example displays a sprite on the screen and slowly fades it away...|~~~|Curs Off : Cls 0 \t\t\t\t\t// Set up screen|Sprite 1, 670,450, \"gameover.png\" \t// Display sprite at a new position|do|For A# = 1 To 0 Step -0.01 \t\t// Define alpha fade from 1 to 0 in 100 steps|Sprite Alpha 1, A#\t\t\t// Set new alpha level|Wait Vbl\t\t\t\t\t// Wait, and re-draw sprite with new alpha level.|Next A#|loop|~~~|"},{"name":"Sprite Shadow","descriptions":[{"lang":"en","text":"Display a shadow beneath the sprite."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite in the list of active sprites"},{"lang":"en","name":"offsetX","type":"float","text":"A float specifying the distance that shadows will be offset horizontally. Positive values are to the right, and negative to the left."},{"lang":"en","name":"offsetY","type":"float","text":"Value of Y offset of shadow from sprite."},{"lang":"en","name":"blur","type":"float","text":"A non-negative float specifying the level of shadow blur, where 0 represents no blur and larger numbers represent increasingly more blur. This value doesn't correspond to a number of pixels,"},{"lang":"en","name":"rgba","type":"The RGBA colour value for the shadow. eg","text":" $FF000077 would be Red with 50% opacity."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"his instruction allows you to add a shadow to any sprite image. With a bit of imagination, shadow can be used to create other effects, such as add a glow to an image. See second example below.|Note, if the offsetX and offsetY are both zero, no shadow will be displayed.||The next example displays a series of images on the screen and applies a semi transparent shadow to them...|~~~|Curs Off : Cls 6 \t\t\t\t\t\t\t\t\t// Set up screen, blue background|For f=1 to 10|Sprite f,f*170,450-f*5, \"ship.png\" \t\t\t\t// Display sprite at a new position|Sprite Shadow f,10+f*2,40+f*5,10+f*2,$000000aa\t\t// Define shadow with increasing offset and shadow blur.|Wait 0.3|Next f|End|~~~|This example show how Sprite Shadow can be used to add a 'Glow' to a Sprite, and also how to turn off shadows.|~~~|Curs Off : Cls 0\t\t\t\t\t\t\t// Set up screen, black background|For f=1 to 10|Sprite f,f*170,450, \"ship.png\" \t\t\t// Display sprite at a new position|Sprite Shadow f,0,0.01,f*4,$00ffffff\t\t// Define shadow 'glow' with increasing shadow blur, which increases the 'glow'.|Wait 0.2|Next f|Print \"Press Any Key to Turn Off Shadows\"\t// Display a message|Wait Key\t\t\t\t\t\t\t\t\t// Wait for key press|For f=1 to 10|Sprite Shadow f,0,0\t\t\t\t\t\t// Set shadow offsets to zero|Wait 0.5|Next f|End|~~~|"},{"name":"Sprite Shadow Off","descriptions":[{"lang":"en","text":"Turns off one or all sprite shadows by setting the offsets to zero."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite in the list of active sprites (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"This instruction removes the shadow from one (specified by index) or all of the sprites (if index in omitted).|The blur and colour of each indivual shadow is remembered, so the shadow can be switched back on by just changing one or both of the offset values.||This example show how Sprite Shadow Off can be used to turn off individual sprite shadows or all sprite shadows at once.|~~~|Curs Off : Cls 1\t\t\t\t\t\t\t\t// Set up screen, black background|For f=1 to 10|Sprite f,f*170,450, \"ship.png\" \t\t\t\t// Display sprite at a new position|Sprite Shadow f,0,0.01,f*4,$000000ff\t\t// Define shadow 'glow' with increasing shadow blur, which increases the 'glow'.|Wait 0.2|Next f|Print \"Press Any Key to Turn Off FIRST 5 Shadows individually\"\t// Display a message|Wait Key\t\t\t\t\t\t\t\t\t\t// Wait for key press|For f=1 to 5|Sprite Shadow Off f\t\t\t\t\t\t\t// Turn off shadow of Sprite number f|Wait 0.5|Next f|Cls 1|Print \"Press Any Key to Turn Off ALL REMAINING Shadows\"\t// Display a message|Wait Key\t\t\t\t\t\t\t\t\t\t// Wait for key press|Sprite Shadow Off\t\t\t\t\t\t\t\t// Turn off shadow of all sprites|End|~~~|"},{"name":"X Sprite","descriptions":[{"lang":"en","text":"Returns the horizontal coordinate of the sprite"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite in the list of active Sprites"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Horizontal coordinate"}],"compatible":" aoz, stos, amos","content":"This function returns the current x-coordinate of the Sprite whose index is given in brackets.|Positions are given in hardware coordinates in Amiga emulation.||~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\"|Cls 0|Do|// Move Sprite 1 with mouse|Sprite 1, X Screen( X Mouse ), Y Screen( Y Mouse ),1||// Print new location on screen|Locate 0,0 : Print X Sprite(1);\" \";Y Sprite(1);\" \";|Loop|~~~|"},{"name":"Y Sprite","descriptions":[{"lang":"en","text":"Returns vertical coordinate of the sprite"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite in the list of active sprites"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Vertical coordinate"}],"compatible":" aoz, stos, amos","content":"This function returns the current vertical coordinate of the Sprite whose index is given in brackets.|Positions are given in hardware coordinates in Amiga emulation.||~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\"|Cls 0|Do|// Move Sprite 1 with mouse|Sprite 1, X Screen( X Mouse ), Y Screen( Y Mouse ),1||// Print new location on screen|Locate 0,0 : Print X Sprite(1);\" \";Y Sprite(1);\" \";|Loop|~~~|"},{"name":"I Sprite","descriptions":[{"lang":"en","text":"Returns the index of the current image displayed by a Sprite"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite in the list of active sprites"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Index of the image in the \"image\" bank"}],"compatible":" aoz, stos, amos","content":"This function returns the current image number being used by the specified Sprite. If the Sprite is not displayed, a|value of zero will be returned.|"},{"name":"Is Sprite","descriptions":[{"lang":"en","text":"Checks if a sprite is defined without generating an error"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"true if the sprite exists, false if not."}],"compatible":" aoz","content":"Use this function to check if a sprite exists before modifying it...|~~~|Load \"AMOSPro_Tutorial:Objects/Sprites.abk\"|Sprite 1, 100, 100, 1|If Is Sprite( 2 ) Then Print \"This should not be printed!\"|If Is Sprite( 1 ) Then Print \"This should be printed!\"|~~~|"},{"name":"Get Sprite","descriptions":[{"lang":"en","text":"Captures a portion of the current screen, create a transparency mask out of true black (RGB #000000) and add the image to the Images bank. (Deprecated, use \"Get Image\")"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*screenIndex","type":"index","text":"Index of the screen to grab the image from"},{"lang":"en","name":"imageIndex","type":"index","text":"Index of the image to insert in the Images bank"},{"lang":"en","name":"x1","type":"integer","text":"Horizontal coordinate of the top-left corner of the capture area"},{"lang":"en","name":"y1","type":"integer","text":"Vertical coordinate of the top-left corner of the capture area"},{"lang":"en","name":"x2","type":"integer","text":"Horizontal coordinate of the bottom-right corner of the capture area"},{"lang":"en","name":"y2","type":"integer","text":"Vertical coordinate of the bottom-right corner of the capture area"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use this command to grab images directly from the screen and transform them into Sprites. Simply define the new|image number, then give the coordinates, from top left-hand to bottom right-hand corner, of the rectangular area to|be loaded into the Sprite Bank. The image will be grabbed from the current screen unless an optional screen number|is specified.||Provided that the given coordinates lie inside of existing screen borders, there are no limitations to the area that can|be grabbed in this way.||If there is no existing Sprite with the selected number, it will be created automatically. Similarly, the Sprite Bank|will be reserved by AOZ Studio, if it is not already defined.||It should be noted that the GET BOB instruction is identical to GET SPRITE, making them interchangeable.||"},{"name":"Get Sprite Palette","descriptions":[{"lang":"en","text":"Copy the colour palette from the Images bank to the current screen. (Deprecated, use \"Get Images Palette\")"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"mask","type":"integer","text":"Mask of bits where each bit set to one represent a colour to capture and 0 a colour to ignore, up to 32 (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command copies the colour values used by your Sprite and Bob images and loads them into the current screen.||Here is an example:|~~~|Load \"AMOSPro Tutorial:Objects/Sprites.Abk\"|Curs Off : Flash Off : Cls 0|Get Sprite Palette|Rem Set computed Sprite at hardware coords 128,50 using image 1|Sprite 8,128,50,1|Wait Key|~~~|The optional mask parameter allows the colour selection to be limited. Each colour is represented by a single digit in|a 32-digit bit mask. If the appropriate digit is set to 1, the colour is copied from the Object Bank. Any colours to be|omitted (masked) should have their digit set to 0. The following example copies colours 0 to 3 from the Object Bank|into the screen:|~~~|Get Sprite Palette %0000000000001111|~~~|Because the mask is entered as a normal number, either hexadecimal or decimal modes can also be used:|~~~|Get Sprite Palette $FFFF0000|~~~|Please note that the GET BOB PALETTE and GET OBJECT PALETTE instructions perform an identical task to|the GET SPRITE PALETTE command.|"},{"name":"Ins Sprite","descriptions":[{"lang":"en","text":"Inserts an empty image in the Images bank (deprecated, use \"Ins Image\")"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"position","type":"integer","text":"Position to insert at"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"INS SPRITE inserts a blank image at the numbered position in the current image Bank.|All of the images after this numbered position will then be moved down one place in the numerical order. The second version of this command|allows you to create several spaces in a single operation, by giving the range of new gaps between the first and last|image numbers that you specify.||Any of these new image spaces are completely empty, and so cannot be allocated to a Bob or displayed directly on|screen while they are still blank. An actual image must first be grabbed into the Object Bank, using a GET SPRITE|or GET BOB command. If this is not done, the appropriate error message will be given as soon as you try to access|the empty image.||Both DEL BOB and INS BOB are provided to be used with the GET BOB and GET SPRITE commands. They|allow you to modify and adjust your Bob images from inside AOZ Studio programs, with complete|freedom. They may be used to create numerous special effects such as interactive screen animations and animated|brushes.|"},{"name":"Del Sprite","descriptions":[{"lang":"en","text":"Delete an image in the Images bank (deprecated, use \"Del Image\")"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"imageIndex","type":"integer","text":"Index of the image to delete"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The DEL SPRITE command permanently deletes one or more Sprite images from the Object Bank. To erase a single image, simply give the image number to be deleted, like this:|~~~|Del Sprite 2|~~~|Whenever an image is deleted, all the subsequent images in the Bank are moved up one place in the numerical order. For instance, if the Bank originally contained four images, the above example would remove image number 2 from memory, leaving a gap between images 1 and 3. This gap would be filled immediately, as the old image numbers 3 and 4 were shunted up one place, to become the new image numbers 2 and 3.||If more than one image is to be removed from the Bank, you can set the range from the first image to the last after a DEL SPRITE command. The following example would delete Sprite images 4,5,6 and 7:|~~~|Del Sprite 4 To 7|~~~|After the last image has been deleted from the Object Bank, the entire Bank is erased automatically.||"},{"name":"Del Sprite","descriptions":[{"lang":"en","text":"Delete a range of images from the image bank (deprecated, use \"Del Image To\")"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"start","type":"integer","text":"Position of deletion"},{"lang":"en","name":"end","type":"integer","text":"End position of deletion"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The following example would delete Sprite images 4,5,6 and 7:|~~~|Del Sprite 4 To 7|~~~|After the last image has been deleted from the Object Bank, the entire Bank is erased automatically.|"},{"name":"Sprite Move","descriptions":[{"lang":"en","text":"Defines the movement of a sprite horizontally and vertically. The sprite starts to move immediately. For finer control please use the \"Channel\" and \"Move\" instructions."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"},{"lang":"en","name":"movementX$","type":"string","text":"Horizontal movement definition string"},{"lang":"en","name":"movementY$","type":"string","text":"Vertical movement definition string"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"The instruction has been added to AOZ to allow you to declare movement in just one instruction instead of two, namely \"Sprite Move X\" and \"Sprite Move Y\".||Each string contains the definition of the movement for it's axe. The syntax of the string is identical to the one used in \"Sprite Move X\" and \"Sprite Move Y\".|"},{"name":"Sprite Move X","descriptions":[{"lang":"en","text":"Defines the horizontal movement of a sprite. The sprite starts to move immediately. For finer control please use the \"Channel\" and \"MoveX\" instructions."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"},{"lang":"en","name":"movement$","type":"string","text":"Movement definition string"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"The SPRITE MOVE X command defines a list of horizontal movements to be performed on the bob specified by the given index.||The number is followed by a \"movement string\" containing a series of|instructions which control the speed and direction of the Object. These movement commands are enclosed by|brackets, and are entered as the following three parameters, separated by commas.||The speed parameter sets a delay between each step of the movement, given in 50ths of a second. Speed can vary|from a value of 1 for very fast, all the way to 32767 for incredibly slow. This is followed by a step value, setting the|number of pixels the Object is to be moved during each operation. A positive value moves the Object to the right,|and a negative number to the left. The apparent speed of the Object will depend on the relationship between the|speed and the step values, varying from slow and smooth, to rapid but jerky movements.||A speed value of about 10 (or -10) is recommended. The last parameter is a count value, which determines the number of times the movement|is to be repeated. Values range between 1 and 32767, with the additional value of zero causing an indefinite|repetition.||It is vital to add an L (loop) instruction to the movement string after these parameters, if you want to force a jump to|the start of the string, forcing the entire sequence to be run again.||Here is an example:|~~~|Load \"AMOSPro_Tutorial:Objects/Sprites.Abk\" :Get Sprite Palette|Sprite 1,360,100,1|Sprite Move X 1,\"(1,1,60)(1,-5,60)L\"|Sprite Move On|Wait Key|~~~|An alternative ending to the movement string is to use the E option, followed by the value of an x-coordinate.||This stops the Object when it reaches the specified coordinate value, which must be less than (or equal to) the|original horizontal target destination. Try changing the third line of the last example to this:|~~~|Sprite Move X 1,\"(1,-5,30)E100\"|~~~|"},{"name":"Sprite Move Y","descriptions":[{"lang":"en","text":"Defines the horizontal movement of a sprite. The sprite starts to move immediately. For finer control please use the \"Channel\" and \"Move Y\" instructions."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"integer","text":"Index of the sprite"},{"lang":"en","name":"movement$","type":"string","text":"Vertical movement definition string"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This command operates in the same way as \"SPRITE MOVE X\", and controls vertical movement.|The syntex of the movement string is explained in the \"Sprite Move X\" instruction and is the same vertically.||Positive values for the step parameter control downward movements, and a negative value will result in an upward movement.||Here is an example:|~~~|Load \"AMOSPro_Tutorial:Objects/Bobs.abk\"|Sprite 1,228,50,1|Sprite Move Y 1,\"(1,1,180)(1,-1,180)L\" : Rem Loop Sprite|Sprite Move On : Wait Key|~~~|"},{"name":"Sprite Move Off","descriptions":[{"lang":"en","text":"Stops the movement of one or all the sprites."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This command suspends the movement of all or the specified Bobs on screen. Frozen Objects may be re-animated using the|\"SPRITE MOVE ON\" command.|"},{"name":"Sprite Move On","descriptions":[{"lang":"en","text":"Start the movement of one or all the sprites."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Before any movement patterns can be executed, they must be activated by a SPRITE MOVE ON command. All movements|will begin at once unless an optional number is given, in which case only that particular animation sequence will be|activated. SPRITE MOVE OFF has the opposite effect, halting all animations, or a single sequence specified by its number.|"},{"name":"Sprite Move Freeze","descriptions":[{"lang":"en","text":"Pause the movement of one or all the sprites."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"Index of the sprite"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This command suspends the movement of all Objects on screen. Frozen Objects may be re- animated using the|\"SPRITE MOVE ON\" command. If an optional Object number is given after \"SPRITE MOVE FREEZE\", then only that bob will be frozen.|"},{"name":"Sprite Moveon","descriptions":[{"lang":"en","text":"Indicates if the movement of one sprite is completed or not."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the bob"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"string"}],"compatible":" aoz","content":"Use the SPRITE MOVON function to check whether a particular Object is being moved by a \"SPRITE MOVE X\" or \"SPRITE MOVE Y\"|command. A value of True is returned while the bob is in motion, otherwise False is given for static|bobas. Please note that BOB MOVON does not search for patterns generated by AMAL.|"}]},{"name":"String Manipulation","id":1639692454337,"descriptions":[{"lang":"en","text":"Instructions and functions to handle strings"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Asc","descriptions":[{"lang":"en","text":"Converts the first character of a string into it's ASCII code"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"text$","type":"string","text":"The character to convert"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The equivalent in ASCII"}],"content":"To get the internal ASCII code of the first character in a string, use the ASC function like this:|~~~|Print Asc(\"B\")|Print Asc(\"AMOS Professional\")|~~~|"},{"name":"Left$","descriptions":[{"lang":"en","text":"Return or set the leftmost characters of a string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"string$","type":"string","text":"The string"},{"lang":"en","name":"number","type":"integer","text":"The number of characters to set or return"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The extracted portion of string"}],"content":"LEFT$ reads the specified number of characters in a source string, starting from the left-hand side, and copies them|into a destination string. The first type of usage of this function creates a new destination string from the chosen|number of characters of the source string.||For example:|~~~|Do|Input \"Type in a string:\";S$|Print \"Display how many characters from\"|Input \"the left?\";N|Print Left$(S$,N)|Loop|~~~|The second type of usage replaces the leftmost number of characters in the destination string with the equivalent|number of characters from the source string. For example:|~~~|A$=\"**** Basic\"|Left$(A$,4)=\"AMOS\"|Print A$|~~~|Exactly the same processes can be performed with characters from the right-hand side of a string, by using the|equivalent RIGHT$ function.|"},{"name":"Right$","descriptions":[{"lang":"en","text":"Return or set the rightmost characters of a string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"string$","type":"string","text":"The string"},{"lang":"en","name":"number","type":"integer","text":"The number of characters to set or return"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The extracted portion of string"}],"content":"Here are two examples demonstrating each version of usage:|~~~|Print Right$(\"IGNORED54321\",5)|A$=Right$(\"REJECTED0123456789\",10)|Print A$|~~~||~~~|B$=\"AOZ ******\"|Right$(B$,6)=\"Studio\"|Print B$|~~~|"},{"name":"Replace$","descriptions":[{"lang":"en","text":"Replace a number or all occurrences of a sub-string in a string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"string$","type":"string","text":"The string to be searched"},{"lang":"en","name":"subString$","type":"string","text":"The sub-string to replace"},{"lang":"en","name":"replacement$","type":"string","text":"The string to replace with"},{"lang":"en","name":"*number","type":"integer","text":"The number of occurences to replace, or all if ommited"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The string with the occurences of the sub-string replaced by the replacement string"}],"content":"Here are two examples demonstrating each version of usage:|~~~|Print Replace$( \"Hello XYZ Studio!\", \"XYZ\", \"AOZ\" )|~~~|"},{"name":"Mid$","descriptions":[{"lang":"en","text":"Return or set a portion of a string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"string$","type":"string","text":"The string"},{"lang":"en","name":"offset","type":"integer","text":"The offset from the start of the string"},{"lang":"en","name":"number","type":"integer","text":"The number of characters to set or return"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The extracted portion of string"}],"content":"The MID$ function returns characters from the middle of a string, with the first number specified in|brackets setting the offset from the start of the string and the second number setting how many characters are to be|fetched.||If the number of characters to be fetched is omitted from your instruction, then the characters will be read|right up to the end of the string being examined. Here are some examples:||~~~|Print Mid$(\"AOZ Studio\",4)|Print Mid$(\"AOZ Studio\",0,4)|~~~||~~~|A$=\"AOZ ******\"|Mid$(A$,4)=\"Studio\"|Print A$|Mid$(A$,4,3)=\"AOZ\"|Print A$|"},{"name":"Flip$","descriptions":[{"lang":"en","text":"Invert a string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"string$","type":"string","text":"The string"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The inverted string"}],"content":"This function simply reverses the order of the characters held in an existing string. For example:|~~~|Print Flip$(\"SOMA gnippilf\")|~~~|"},{"name":"Chr$","descriptions":[{"lang":"en","text":"Return the character with a given ASCII code"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"code","type":"integer","text":"The ascii code to convert into a string"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The string containing the representation of the ASCII code"}],"content":"The CHR$ function creates a string that contains a single character generated by a given ASCII code number.||ASCII code in AOZ follow the UTF-8 standard, which mean that the first 127 characters are just standard Amiga-compatible ASCII codes.|The characters after that number contain accents and language-specific characters.||Match characters with their codes using this routine:|~~~|For S=32 To 255: Print Chr$(S); : Next S|~~~|"},{"name":"Space$","descriptions":[{"lang":"en","text":"Return a string contain the demanded amount of spaces"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"length","type":"integer","text":"The number of spaces desired"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A string with only spaces"}],"content":"Try the following example:|~~~|Print \"Ten\";Space$(10);\"spaces\"|~~~|"},{"name":"String$","descriptions":[{"lang":"en","text":"Create a new string from the first character of an existing string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"string$","type":"string","text":"The string to repeat"},{"lang":"en","name":"number","type":"integer","text":"The number of time to repeat the first character"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A string with the source first character repeated a number of times"}],"content":"Do not confuse this with STR$, which converts numbers into a string.||The STRING$ function creates a new string filled with the required number of copies of the first character from an existing string.||For instance, the following example produces a new string containing ten copies of the character \"A\":|~~~|Print String$(\"AMOS Professional is a joy forever\",10)|~~~|"},{"name":"Upper$","descriptions":[{"lang":"en","text":"Convert a string of text to upper-case"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"string$","type":"string","text":"The string to convert"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The upper-case version of the string"}],"content":"This function converts the characters in a string into upper case (capital) letters, and places the result into a new|string.||For example:|~~~|Print Upper$(\"aMoS pRoFeSsIoNaL\")|~~~|"},{"name":"Lower$","descriptions":[{"lang":"en","text":"Convert a string of text to upper-case"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"STRING$","type":"string","text":"The string to convert"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The lower-case version of the string"}],"content":"This works in the same way as UPPER$, but translates all the characters in a string into nothing but lower case|(small) letters. These sorts of text conversions are particularly useful for interpreting user-input in interactive data|programs and adventure games, because input can be converted into a standard format which is understood by your|programs.||For example:|~~~|Input \"Do you want to continue? (Yes or No)\";ANSWER$|ANSWER$=Lower$(ANSWER$) : If ANSWER$=\"no\" Then Edit|Print \"OK. Continuing with your program\"|~~~|"},{"name":"Str$","descriptions":[{"lang":"en","text":"Convert a number into a string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"number","text":"The number to convert"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The text version of the number, respecting the rules et by the \"Fix\" instruction"}],"content":"Str$ converts a real number variable into a string. This can be used to overcome limitations posed by functions like|CENTRE, which does not accept numbers as parameters, but will work happily with parameters in the form of|strings.||Here is an example:|~~~|Centre \"Remaining memory is\"+Str$(Chip Free)+\" Bytes\"|~~~|"},{"name":"Trim$","descriptions":[{"lang":"en","text":"Used to remove blanks at the beginning and end of a string. The considered blanks are the space characters (space, tab, non-breaking space, etc.) as well as the end-of-line characters (LF, CR, etc.)."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"value","type":"string","text":"The number to convert"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The text version of the number, respecting the rules et by the \"Fix\" instruction"}],"content":"Trim$ remove blanks at the beginning and end of a string.||Here is an example:|~~~|Print Trim$( \"                                 Hello World!\")|~~~|"},{"name":"Val","descriptions":[{"lang":"en","text":"Convert a string into a number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"string$","type":"string","text":"The string to evaluate"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"number","text":"The numerical version of the string. Returns zero if the converstion fails (TODO! Report error)"}],"content":"To perform the reverse task to STR$, the VAL function converts a list of decimal digits stored in a string, changing|them into a number. If this process fails for any reason, a value of zero will be returned.||For example:|~~~|X=Val(\"1234\") : Print X|~~~|"},{"name":"Bin$","descriptions":[{"lang":"en","text":"Convert a decimal value into a string of binary digits"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number to convert"},{"lang":"en","name":"*digits","type":"integer","text":"The number of digits"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A string in the form of %0000... representing the binary version of the number"}],"content":"This is the function that converts a decimal number or expression into the equivalent string of binary digits. The|binary number that is returned will automatically have a leading % (per cent) character added to it. This character|acts as an introduction sign, to indicate that the number which follows it is in binary notation, rather than the|standard decimal system.||After the decimal value that is to be converted, an optional number between 1 and 31 can be added which sets the|number of digits to be returned in the binary string. If this parameter is omitted, AOZ will express the|value in the fewest possible digits, with no leading zeros.||Here are a few examples:|~~~|Print Bin$(5)|Print Bin$(10)|Print Bin$(255)|X$=Bin$(100) : Print X$|~~~|You may enter binary numbers directly, as part of an expression, providing that the % (per cent) character is placed|in front of your binary value. Such numbers will be converted into standard decimal notation automatically.||For example:|~~~|Print %101|Print %1010|Print %11111111|X$=Bin$(100) : Print Val(X$)|~~~|Certain functions make use of yet another system of counting. The Hexadecimal system counts in units of 16 rather|than ten, so a total of 16 different digits is needed to represent all the different numbers. The digits from 0 to 9 are|used as normal, but the digits from 10 to 15 are signified by the letters A to F, as shown in the following table:|~~~|Hex digit \t0 1 2 3 4 5 6 7 8 9 A  B  C  D  E  F|Decimal \t0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15|"},{"name":"Hex$","descriptions":[{"lang":"en","text":"Convert a decimal value into a string of hexadecimal digits"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"number","type":"integer","text":"The number to convert"},{"lang":"en","name":"*digits","type":"integer","text":"The number of digits, optional"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A string in the form of %0000... representing the binary version of the number"}],"content":"HEX$ converts numbers from the decimal system into a string of hexadecimal (Hex) digits. The decimal value to be|converted is specified in brackets. The hex number that is returned will automatically have a leading $ (dollar)|character added to it.||This character acts as an introduction sign, to indicate that the number which follows it is in hexadecimal notation,|rather than the standard decimal system.||After the decimal value that is to be converted, an optional number can be added which sets the number of digits to|be returned in the hex string. If this parameter is omitted, AMOS Professional will return the value in the fewest|possible digits needed to express the hex number.||For example:|~~~|Print Hex$(100)|Print Hex$(100,3)|~~~|HEX$ is often used with the COLOR function to display the precise mixture of Red, Green and Blue components|in a particular colour, as follows:|~~~|Print Hex$(Color(2))|~~~|Hexadecimal notation is ideal for handling large numbers such as addresses, and it may be entered directly in any|AOZ expression. The $ (dollar) character must be placed in front of hex numbers, and they will|be converted into standard decimal notation automatically. For example:|~~~|Print $64|Print $A|~~~|Do not confuse the use of the leading $ character for a hex number with the use of a trailing $ character for a|string. $A is a hexadecimal number, but A$ is a variable!|"},{"name":"Len","descriptions":[{"lang":"en","text":"Return the length in characters of a string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"string","type":"string","text":"The number to convert"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The number of characters in the string"}],"content":"The LEN function returns the number of characters stored in a string. For example:|~~~|Print Len(\"0123456789\")|~~~|"},{"name":"Instr","descriptions":[{"lang":"en","text":"Search for occurrences of one sub-string within another string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"host$","type":"string","text":"The string to search into"},{"lang":"en","name":"guest$","type":"string","text":"The sub-string to search"},{"lang":"en","name":"*start","type":"integer","text":"Option first character position to start the search"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The position of the sub-string if found, starting at 1, zero if not found"}],"content":"INSTR allows you to search for all instances of one string inside another.||In the following examples, the \"host\" strings are searched for the first occurrence of the \"guest\" strings you are seeking. If the relevant string is found, its|location will be reported in the form of the number of characters from the left-hand side of the host string. If the|search is unsuccessful, a result of zero will be given.||~~~|Print Instr(\"AMOS Professional\",\"AMOS\")|Print Instr(\"AMOS Professional\",\"O\")|Print Instr(\"AMOS Professional\",\"o\")|Print Instr(\"AMOS Professional\",\"Provisional\")|~~~||~~~|Do|Input \"Type in a host string:\";H$|Input \"Type in a guest string to be found:\";G$|X=Instr(H$,G$)|If X=0 Then Print G$;\" Not found\"|If X<>0 Then Print G$;\" Found at position \";X|Loop|~~~|Normally, the search will begin from the first character at the extreme left-hand side of the host string, but you may|begin searching from any position by specifying an optional number of characters from the beginning of the host|string. The optional start-of-search position can range from zero to the maximum number of characters in the host|string to be searched. For example:||~~~|Print Instr(\"AMOS PROFESSIONAL\",\"O\",0)|Print Instr(\"AMOS PROFESSIONAL\",\"O\",4)|~~~|"},{"name":"Trim$","descriptions":[{"lang":"en","text":"Remove any space at the beginning or at the end of a string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"string$","type":"string","text":"The string to clean"},{"lang":"en","name":"*position","type":"integer","text":"1 to trim the start of the string only, 2 to trim the end only, 0 (default) to trim both"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The string without spaces at the beginning and/or the end"}],"compatible":"","content":"~~~|A$ = \"     I love AOZ Studio !      \"|Print Trim$( A$ )|~~~|"},{"name":"String Base Index","descriptions":[{"lang":"en","text":"Set the base index of string functions like Mid$, Left$ or Right$"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"integer","text":"the value of the new index, 0 or 1."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":"","content":"This instruction set the base index of string function, that is the value that points to the first letter of the string.||Historically, the Basic language uses 1 as base index for strings. Although it is good for learning how to program, it is recommende, specially if you do complex string manipulation or|orient yourself toward professional programming, to use 0 as index for strings (as for arrays).||Please note that you can also use the tag #stringBaseIndex: 0 or 1. This tag has a global effect of the whole application whereas this instruction allows you to change it locally.|~~~|A$ = \"I love AOZ Studio !\"|String Base Index 0|Print Mid$(A$, 8, 1)\t\t// Will print O|String Base Index 1|Print Mid$(A$, 9, 1)\t\t// Use plus one on the index to get the O|~~~|"}]},{"name":"General","id":1639692454346,"descriptions":[{"lang":"en","text":"Basic Langage structure instructions. To be documented later."}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"ErrTrap","descriptions":[{"lang":"en","text":"Return the number of the last Trapped error, and reset the number"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The number of the last trapped error, 0 if no error occured"}],"compatible":" aoz, stos, amos","content":"This function is used to return the error status after a previous TRAP command.|If no error has been detected, a zero is returned, otherwise the appropriate error number is given. The related error message can then be returned using the ERR$ function.|"},{"name":"Err$","descriptions":[{"lang":"en","text":"Return the text of an error message from it's number"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"errorNumber","type":"integer","text":"The number of the error"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The text of the message"}],"compatible":" aoz, stos, amos","content":"This simple function returns an error message string.|If the error number is out of range, then an empty string will be given.|ERR$ will return error messages as long as they are loaded in memory, but messages will not be returned from a compiled program, or if the Editor has been KILLed.|"},{"name":"ErrN","descriptions":[{"lang":"en","text":"Return the number of the last error that occured"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The number of the error, or 0 if no error occurred"}],"compatible":" aoz, stos, amos","content":"When you use ON ERROR to create error handling routines, you will want to know exactly what sort of error has|happened in the main program. Errors discovered while your program is running each have a specific error code|number, and the number of the last error to be isolated can be returned by using the ERRN function.|"},{"name":"Resume Next","descriptions":[{"lang":"en","text":"Resume the execution of current program after an error trapping routine to the next instruction after the error occurred."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Used on its own, RESUME will jump back to the statement which caused the error and try it again. To return to the|instruction immediately after the one that caused the error, use RESUME NEXT. Alternatively, to jump to a specific|point in your main program, simply follow RESUME with a reference to a chosen label or a normal line number.|"},{"name":"Resume","descriptions":[{"lang":"en","text":"Resume the execution of current program after an error trapping routine to the instruction that caused the error."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Used on its own, RESUME will jump back to the statement which caused the error and try it again. To return to the|instruction immediately after the one that caused the error, use RESUME NEXT. Alternatively, to jump to a specific|point in your main program, simply follow RESUME with a reference to a chosen label or a normal line number.||Warning: if you do not correct the cause of error, a new error will be generated, resumed, and your computer could go in a never-ending loop.|"},{"name":"Every On","descriptions":[{"lang":"en","text":"Toggle regular EVERY calls on"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"EVERY ON should be used before the relevant sub-routine or procedure has finished executing.|EVERY OFF is the default condition, and is used to disable the automatic calling process altogether.|"},{"name":"Every Off","descriptions":[{"lang":"en","text":"Toggle regular EVERY calls off"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"EVERY ON should be used before the relevant sub-routine or procedure has finished executing.|EVERY OFF is the default condition, and is used to disable the automatic calling process altogether.|"},{"name":"Every","descriptions":[{"lang":"en","text":"Call subroutine or procedure at regular intervals"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"time","type":"float","text":"The delay between each call"},{"lang":"en","name":"procedure","type":"procedure","text":"A procedure to call"},{"lang":"en","name":"label","type":"label","text":"A routine to call"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The EVERY statement is used to call up a sub-routine or a procedure at regular intervals, without interfering with|the main program. Simply specify the length of time between every call, measured in seconds. Obviously|the time taken for a sub-routine or a procedure to be completed must be less than the interval time, or an error will|be generated.||After a sub-routine has been entered, the EVERY system is automatically disabled. This means that in order to call|this feature continuously, an EVERY ON command must be inserted into a sub-routine before the final RETURN|statement. Similarly, EVERY ON must be included in a procedure before returning to the main program with an|END PROC.||For example:|~~~|Every 50 Proc TEST|Do|Print At(0,0); \"Main Loop\"|Loop|Procedure TEST|Shared A|Inc A: Print \"This is call number \";A|Every On|End Proc|~~~|"},{"name":"For","descriptions":[{"lang":"en","text":"Repeat loop a specific number of times"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This control structure is one of the programmer's classic devices. Each FOR statement must be matched by a single|NEXT, and pairs of FOR ... NEXT loops can be nested inside one another. Each loop repeats a list of instructions|for a specific number of times, governed by an index which counts the number of times the loop is repeated. Once|inside the loop, this index can be read by the program as if it is a normal variable.||Here is a simple example:|~~~|For X=1 To 7|Print \"SEVEN DEADLY SINS\"|Next X|~~~|"},{"name":"Next","descriptions":[{"lang":"en","text":"Indicates the end of a For / Next loop"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*variable","type":"variable","text":"The variable used to loop."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This control structure is one of the programmer's classic devices. Each FOR statement must be matched by a single|NEXT, and pairs of FOR ... NEXT loops can be nested inside one another. Each loop repeats a list of instructions|for a specific number of times, governed by an index which counts the number of times the loop is repeated. Once|inside the loop, this index can be read by the program as if it is a normal variable.||Each Next must match it's \"FOR\" otherwise AOZ will genrate an error while transpiling.||Here is a simple example:|~~~|For X=1 To 7|Print \"SEVEN DEADLY SINS\"|Next X|~~~|"},{"name":"Step","descriptions":[{"lang":"en","text":"Control increment of index in a FOR / NEXT loop"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"step","type":"number","text":"The increment to use at each loop"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Normally, the index counter is increased by 1 unit at every turn of a FOR ... NEXT loop. When the current value|exceeds that of the last number specified, the loop is terminated.||For example:|~~~|For DAY=1 To 365|Print DAY|Next DAY|~~~|STEP is used to change the size of increase in the index value, like this:|~~~|For DAY=1 To 365 Step 7|Print DAY|Next DAY|~~~|"},{"name":"Repeat","descriptions":[{"lang":"en","text":"Repeat loop until a condition is satisfied"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Unlike that last example, instead of checking if a condition is true or false at the start of a loop, the pair of|commands makes its check at the end of a loop. REPEAT marks the start and UNTIL the end of the loop to be|checked.|This means that if a condition is false at the beginning of a WHILE ... WEND structure, that loop will never be performed at all, but if it is true at the beginning of a REPEAT|... UNTIL structure, the loop will be performed at least once. Here is an example that waits for you to press a mouse button:||~~~|Repeat|Print \"I can go on forever\" : Wait 25|Until Mouse Key<>0|~~~|"},{"name":"Until","descriptions":[{"lang":"en","text":"Indicates the end of a REPEAT / UNTIL loop"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Unlike that last example, instead of checking if a condition is true or false at the start of a loop, the pair of|commands makes its check at the end of a loop. REPEAT marks the start and UNTIL the end of the loop to be|checked.|This means that if a condition is false at the beginning of a WHILE ... WEND structure, that loop will never be performed at all, but if it is true at the beginning of a REPEAT|... UNTIL structure, the loop will be performed at least once. Here is an example that waits for you to press a mouse button:||~~~|Repeat|Print \"I can go on forever\" : Wait 25|Until Mouse Key<>0|~~~|"},{"name":"While","descriptions":[{"lang":"en","text":"Repeat loop while condition is true"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This commands, associated with WEND provides a convenient way of making the program repeat a group of instructions all the time|a particular condition is true. WHILE marks the start of this loop, and the condition is checked for TRUE|from this starting position through to the end position, which is marked by a WEND. The condition is then|checked again at every turn of the loop, until it is no longer true.||For example:|~~~|BLAZES:|Print \"Please type in the number 9\"|Input X|While X=9|Cls : Print X : Wait 50 : Goto BLAZES|Wend|Print \"That is not a 9!\"|~~~|You are free to use AND, OR and NOT to qualify the conditions to be checked.|"},{"name":"Wend","descriptions":[{"lang":"en","text":"marks the end of a WHILE / WEND loop"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This commands, associated with WEND provides a convenient way of making the program repeat a group of instructions all the time|a particular condition is true. WHILE marks the start of this loop, and the condition is checked for TRUE|from this starting position through to the end position, which is marked by a WEND. The condition is then|checked again at every turn of the loop, until it is no longer true.||For example:|~~~|BLAZES:|Print \"Please type in the number 9\"|Input X|While X=9|Cls : Print X : Wait 50 : Goto BLAZES|Wend|Print \"That is not a 9!\"|~~~|You are free to use AND, OR and NOT to qualify the conditions to be checked.|"},{"name":"Do","descriptions":[{"lang":"en","text":"Keep repeating a list of statements"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command, associated with LOOP will loop a list of AMOS Professional statements forever, with DO acting as the marker|position for the LOOP to return to. Both the DO and LOOP should occupy their own lines, as follows:|~~~|Do|Print \"FOREVER AND\": Wait 25|Loop|~~~|"},{"name":"Loop","descriptions":[{"lang":"en","text":"Mark the end of a DO / LOOP loop"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command, associated with LOOP will loop a list of AMOS Professional statements forever, with DO acting as the marker|position for the LOOP to return to. Both the DO and LOOP should occupy their own lines, as follows:|~~~|Do|Print \"FOREVER AND\": Wait 25|Loop|~~~|"},{"name":"Exit","descriptions":[{"lang":"en","text":"Break out of a loop"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*numberOfLoopsToExit","type":"integer","text":"The number of loops to exit. This parameter must be a constant, and it's default value if ommited is 1"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"EXIT forces the program to leave a loop immediately, and it can be used to escape from all the types of loop|employed in AOZ, such as FOR ... NEXT, REPEAT ... UNTIL, WHILE ... WEND and DO ... LOOP.||Any number of loops may be nested inside of one another, and when used on its own, EXIT will short-circuit the|innermost loop only. By including an optional number after EXIT, that number of nested loops will be taken into|account before the EXIT is made, and the program will jump directly to the instruction immediately after the|relevant loop.||For example:|~~~|Do|Do|Input \"Type in a number\";X|Print \"I am the inner loop\"|If X=1 Then Exit|If X=2 Then Exit 2|Loop|Print \"I am the outer loop\"|Loop|Print \"And I am outside both loops!\"|"},{"name":"Exit If","descriptions":[{"lang":"en","text":"Break out of a loop"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"condition","type":"boolean","text":"AOZ will trigger the exit if this parameter is TRUE"},{"lang":"en","name":"*numberOfLoopsToExit","type":"integer","text":"The number of loops to exit. This parameter must be a constant, and it's default value if ommited is 1"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"It is often necessary to leave a loop as a result of a specific set of conditions, and this can be simplified by using the|EXIT IF instruction. As explained above, in conditional operations, the value -1 represents True, whereas a zero|represents False. After using EXIT IF, an expression is given which consists of one or more tests in standard AOZ format.|The EXIT will only be performed IF the result is found to be true.||As before, an optional number can be given to specify the number of loops to be jumped from, otherwise only the|current loop will be aborted.||For example:|~~~|While L=0|A=0|Do|A=A+1|For X=0 To 100|Exit If A=10,2 : Rem Exit from DO and FOR loops|Next X|Loop|Exit 1: Rem Exit from WHILE loop|Wend|"},{"name":"Gosub","descriptions":[{"lang":"en","text":"Jump to a sub-routine"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"label","type":"label","text":"The sub-routine to call"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Packages of program instructions that perform a specific task can be thought of as \"routines\". When such routines|are split into smaller packages of instructions, they can be thought of as \"sub-routines\".||GOSUB is another antiquated command, and is used to perform a jump to a sub-routine. The execution of the application is restored at the next instruction after GOSUB by a RETURN statement.||As with GOTO, there are three alternative targets for a GOSUB instruction: labels, line numbers or expressions.||To make sub-routines easier to spot in your program listings, it is good practice to place them at the end of the main|program. A statement such as EDIT or DIRECT should also be used to end the main program, which prevents|AOZ from executing any GOSUBs after the main program has finished.||For example:|~~~|Print \"I am the main program\"|For N=1 To 3|Gosub TEST|Next N|End|TEST:|Print \"Here we go GOSUB\" : Wait 50|Print \"Number =\";N|Return|~~~|"},{"name":"Return","descriptions":[{"lang":"en","text":"Return from a sub-routine called by GOSUB"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"When a program obeys a GOSUB instruction, it must be instructed to RETURN to the main program after the subroutine|has been executed. It should be noted that a single GOSUB statement can be linked to several RETURN|commands, allowing exits from any number of different points in the routine, depending on the circumstances. After|the RETURN, a jump is made back to the instruction immediately after the original GOSUB.||For example:|~~~|Print \"I am the main program\"|For N=1 To 3|Gosub TEST|Next N|End|TEST:|Print \"Here we go GOSUB\" : Wait 50|Print \"Number =\";N|Return|~~~|"},{"name":"Pop","descriptions":[{"lang":"en","text":"Remove RETURN information"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"label","type":"label","text":"The position in the application to branch to"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Normally you cannot exit from a GOSUB statement using a standard GOTO, and this may be inconvenient. For|example, there could be an error that makes it unacceptable to return to the|program exactly where you left it. In such circumstances, the POP command can be used to remove the return|address generated by a GOSUB, allowing you to leave the sub-routine without the final RETURN statement being|executed.||For example:|~~~|Do|Gosub THERE|Loop|HERE:|Print \"I've just popped out!\"|Direct : Rem No risk of accidental subroutine|THERE:|Print \"Hello There!\"|If Mouse Key Then Pop : Goto HERE|Return|"},{"name":"Goto","descriptions":[{"lang":"en","text":"Jump to a specified place in the program"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"label","type":"label","text":"The position in the application to branch to"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"A computer program that can only obey a list of instructions one after the other is a very limited computer program|indeed. One way of forcing programs to jump to specified locations is to use the old fashioned GOTO structure,|followed by a target destination. In AMOS Professional, these destinations can be a label, a line number or a|variable.||Label markers can consist of names that use any string of letters or numbers, as -well as the underscore character|\"_\", and they must be ended with the colon character \":\" as follows:||~~~|Print \"Jump in two seconds\" : Wait 100|Goto LABEL_MARKER|Wait 180000 : Rem Wait one hour|LABEL_MARKER:|Print \"Now is the time to jump!\"|~~~|Numbers may be used to identify specific lines, and the program can be commanded to GOTO one of these|optional markers, like this:|~~~|Goto 5|Print \"I am being ignored\"|5 Print \"I am line 5\"|~~~|It should be obvious that these identification numbers have nothing to do with the number of lines in a program, but|they may still lead to confusion. Labels are much easier to remember and to locate.||Expressions can also be used for this purpose, and the expression may be any string or integer. Strings hold the|name of a label, and integers return a line identification number. Here is an example:|~~~|BEGIN:|Goto \"BED\"+\"2\"|End|BED1:|Print \"This Bed will never be used\"|BED2:|Print \"Welcome to Bed Two!\"|Wait 20|Goto BEGIN|"},{"name":"If","descriptions":[{"lang":"en","text":"Choose between alternative actions depending on the result of an expression"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"condition","type":"boolean","text":"The expression to calculate that can be either TRUE or FALSE"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The IF instruction only work when associated with THEN, ELSE, ELSE IF or END IF.||You can perform test on one-line with THEN, like in this example:|~~~|If NIGHT=DAY And NIGHT<>12 Then Goto BED|If NIGHT<DAY Or NIGHT=12 Then Edit|~~~|An IF ... THEN statement is limited to a single line, of a listing, which is not very satisfactory to an AOZ programmer. This technique has been superseded by a \"structured test\", where IF is used to trigger off|a whole range of instructions, depending on the outcome of a single decision.||~~~|Input \"Type values A,B and C: \";A,B,C|If A=B|Print \"A equals B\";|Else|Print \"A is not equal to B\";|If A<>B And A<>C|Print \"or to C\"|End If|End If|~~~|"},{"name":"Else","descriptions":[{"lang":"en","text":"Qualify a condition"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"condition","type":"boolean","text":"The expression to calculate that can be either TRUE or FALSE"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"ELSE is also understood when making decisions, as to what action should be taken, depending on conditions. So the|last example could be changed to something like this:||~~~|If NIGHT+1=DAY Then Goto BED Else Shoot|~~~|The alternative choice of statements in this sort of structure must be a list of one or more AOZ|instructions. Also remember to include a separate GOTO command if you want to jump to a label or a numbered|line, otherwise the label will be treated as a procedure name and it could possibly generate an error.||For example:|~~~|If NIGHT=1 Then Goto BED: Rem This is perfect|If NIGHT=1 Then BED: Rem This looks for a BED procedure|~~~|"},{"name":"Else If","descriptions":[{"lang":"en","text":"Qualify another condition"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"condition","type":"boolean","text":"The expression to calculate that can be either TRUE or FALSE"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"ELSE IF allows you to extend structured test to a higher level... If non of the conditions in the sections above it were true, it evaluates the condition and performs the code inside when the result is TRUE.||~~~|Input \"Please nter your age \";AGE|If AGE < 10|Print \"Hey kid!\"|Else If AGE < 20|Print \"Hey dude!\"|Else If AGE < 60|Print \"Bonjour Monsieur!\"|Else|Print \"Hello grand-pa!\"|End If|~~~|"},{"name":"On Error Goto","descriptions":[{"lang":"en","text":"Trap an error in your program"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"label","type":"label","text":"The location in the rpogram to branch to when an error occurs"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"By this method, when an error occurs in your Basic program, a jump is made to whatever label has been defined.|This label acts as the starting point for your own error correction routine, and after the mistake has been corrected|you can return to your main program without the need to go via the editor window.||Try this simple routine:|~~~|Do|Input \"Type in two numbers\";A,B|Print A;\" divided by \";B;\" is \";A/B|Loop|~~~|This will work perfectly until you try to enter a value of zero for B and it is discovered that division by zero is|impossible. Such unforeseen problems can be catered for by setting an error trap like this:|~~~|On Error Goto HELP|AGAIN:|Do|Input \"Type in two numbers\";A,B|Print A;\" divided by \";B;\" is \";A/B|Loop||Rem Error Handler|HELP:|Print|Print \"Sorry, you have tried to divide\"|Print \"your number by zero.\"|Resume AGAIN : Rem Go back to input|~~~|If you are unfortunate enough to write an error inside your own error trapping routine, AMOS Professional will|grind to a halt! There are two ways to deliberately disable ON ERROR GOTO.|~~~|On Error : Rem disable error trap|~~~|Call ON ERROR without any parameters like that, or force it to go to zero, like this:|~~~|On Error Goto 0|~~~|To get back to your program after ON ERROR has been called, you must use RESUME. Never use GOTO for this|purpose.||Warning! Due to the nature of Javascript, ON ERROR GOTO will *significantly* slow down your application.||We highly suggest to use TRAP instead.|"},{"name":"On Break Proc","descriptions":[{"lang":"en","text":"Jump to a procedure when break in program"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"label","type":"label","text":"The location in the rpogram to branch to when an error occurs"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This instruction will force AOZ to make a jump when the user presses CONTROL-C... You can therefore prevent the user from leaving your application.||It can also be used to prevent CONTROL-C from breaking in order to use the combination of keys, for example to paste text in an editor.||For example:|~~~|On Break Proc BROKEN|Do|Print \"Unbroken\" : Wait 50|Loop||Procedure BROKEN|Print \"I am the procedure\"|End Proc|"},{"name":"On","descriptions":[{"lang":"en","text":"Jump on recognising an expression"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"expression","type":"integer","text":"An expression that returns a number between 0 and the number of labels"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"ON can be used to force the program to jump to a pre-defined position when it recognises a specified variable.|Furthermore, jumps can be made to a choice of several positions, depending on what value is held by the variable at|the time it is spotted. ON can force a jump to any of the following structures.||###Procedures.||When using an ON ... PROC structure, one or more named procedures is used as the target destination|for a jump, depending on the contents currently held by a variable. Look at the following line:|~~~|On X Proc PROCEDURE1,PROCEDURE2|~~~|That is exactly the same as saying:|~~~|If X=1 Then PROCEDURE1|If X=2 Then PROCEDURE2|~~~|It is important to note that procedures used in this way cannot include any parameters. If information is to be|transferred to the procedure, it should be placed in a global variable.||###Goto||Goto is used to jump to one of a list of numbered lines, or a label, depending on the result of an expression. For|example:|~~~|Print \"Type in a value from 1 to 3\"|Input X|On X Goto LABEL1,LABEL2,LABEL3|LABEL1:|Print \"Ready\"|LABEL2:|Print \"Steady\"|LABEL3:|Print \"Go!\"|~~~1|For that to work properly, X must have a value from 1 up to the number of the highest possible destination. Any|other values would cause problems. In fact the third line of that example is a very economical way of writing the|following lines:|~~~|If X=1 Then Goto LABEL1|If X=2 Then Goto LABEL2|If X=3 Then Goto LABEL3|~~~|Now change the third line of the last example to this:|~~~|On X Goto LABEL3,LABEL2,LABEL1|~~~||###Gosub.||The use of an ON GOSUB structure is identical to ON ... GOTO, except that it must employ a RETURN to|jump back to the instruction immediately after the ON ... GOSUB statement. Destinations may be given as the name|of a label, or the identification number of a line between 1 and the maximum number of possible destinations.|ON is also used with the ON BREAK PROC structure, as well as ON ERROR GOTO|"},{"name":"Procedure","descriptions":[{"lang":"en","text":"Create a procedure"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"procedureName","type":"name","text":"The name of the procedure to define"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"A procedure is created in exactly the same way as a normal variable, by giving it a name. The name is then followed|by a list of parameters and the procedure must be ended with an END PROC command. PROCEDURE and END|PROC commands must be placed on their own individual lines.||For example:|~~~|Procedure HELLO|Print \"Hello, I am a procedure!\"|End Proc|~~~|If you try and run that program, nothing will happen. This is because a procedure must be called up by name from|inside your program before it can do anything. Now add the following line at the start of that last example, and then|[Run] it.|~~~|HELLO|Procedure HELLO|Print \"Hello, I am a procedure!\"|End Proc|~~~|There is nothing preventing a procedure from calling itself, but this recursion is limited by memory. Such a process is called recursivity.|"},{"name":"End proc","descriptions":[{"lang":"en","text":"End a procedure"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"A procedure is created in exactly the same way as a normal variable, by giving it a name. The name is then followed|by a list of parameters and the procedure must be ended with an END PROC command. PROCEDURE and END|PROC commands must be placed on their own individual lines.||For example:|~~~|HELLO|Procedure HELLO|Print \"Hello, I am a procedure!\"|End Proc|~~~||AOZ also allow you to return values from a procedure, like this:|~~~|Print \"1 + 2 = \"; ADDITION[ 1, 2 ]||Procedure ADDITION[ a, b ]|result = a + b|End Proc[ result ]|"},{"name":"Pop proc","descriptions":[{"lang":"en","text":"Leave a procedure immediately"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The POP PROC instruction provides you with a fast getaway, if you ever find yourself in need of escape.||Try this:|~~~|ESCAPE|Procedure ESCAPE|For PRISON=1 To 1000000000|If PRISON=10 Then Pop Proc|Print \"I am abandoned.\"|Next PRISON|End Proc|Print \"I'm free!\"|~~~|AOZ also allow you to return values with POP PRO, which might proove handy in some cases.|~~~|Print \"1 + 2 = \"; REALLY$[ 1, 2 ]||Procedure REALLY$[ a, b ]|result = a + b|If result = 3 Then Pop Proc[ \"Yes!\" ]|End Proc[ \"No!\" ]|~~~||Please note that to have procedure return string, their name must end with the $ character.|"},{"name":"Proc","descriptions":[{"lang":"en","text":"Flag a procedure"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Another way to identify a procedure is to precede it with a PROC statement.||Run the following example:|~~~|Rem Demonstrate that a procedure is being called not simply a command|Proc HELLO||Rem The same can be achieved without the Proc|HELLO||Procedure HELLO|Print \"Hey!\"|End Proc|~~~|It is possible to place the procedure definition anywhere in your program. When AOZ encounters a|procedure statement, the procedure is recognised and a jump is made to the final End Proc. In this way, there is no|risk of executing your procedure by accident.|"},{"name":"Def Fn","descriptions":[{"lang":"en","text":"create a user-defined function"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"To create a user-defined function, give it a name and follow the name with a list of variables. These variables must|be held inside a pair of round brackets, and separated from one another by commas, like these examples:|~~~|Def Fn NAME$(A$)=LOWER$(A$)|Def Fn X(A,B,C)=A*B*C|~~~|When a user-defined function is called up my variables that are entered with it will be substituted in the appropriate|positions.||DEF FN is a legacy instruction from the AMOS and STOS. We suggest to use the INSTRUCTION token instead.|"},{"name":"Fn","descriptions":[{"lang":"en","text":"Call a user-defined function"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" notimplemented","content":"The following examples show how DEF FN is first used to define a function, and how FN calls it up:|~~~|Def Fn NAME$(A$,X,Y)=Mid$(A$,X,Y)|Print Fn NAME$(\"AOZ Studio\",4,3)|Def Fn X(A,B,C)=A+B+C|Print Fn X(1,10,100)|~~~|The expression that equals the user-defined function can include any of the standard AOZ functions, and it is limited to a single line of a program.||FN is a legacy instruction from the AMOS and STOS. We suggest to use the INSTRUCTION token instead.|"},{"name":"Run","descriptions":[{"lang":"en","text":"Execute another AOZ program"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*path","type":"string","text":" The path of the program to execute"},{"lang":"en","name":"*commandLine$","type":"string","text":" Eventual parameters to transmit to the new applicaton"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"|When followed by a filename and used inside a program, the RUN command is extremely useful. Authors of vast|computer games, involving many levels of play, need not be restricted by the storage space of a single disc or the|memory available in your Amiga. Each level of play can be written as a separate program and then saved as a|different filename. This means that at the end of one level of play, the next stage can be loaded automatically.||For example:|~~~|Run \"Next level.AOZ\"|~~~|In order for this instruction to work in your browser, the *Path* parameter should contain the URL of the AOZ application to run.||This method is known as \"chaining\" programs together. When programs run like this, data screens and banks will be|kept, allowing you to pass data and display a screen of graphics while the next level is loading. But the redundant|last program will be erased to make room for the new program, so you should remember the fact that any variables|will be lost in the process.||In fact, AMOS Professional does allow you to pass variable data from one program to another, by making use of|\"Command Lines\".|"},{"name":"Rem","descriptions":[{"lang":"en","text":"Insert a reminder message into a program"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The beginning of a Rem statement is marked by REM or by the double slash characters, which is simply a short-cut|recognised by AOZ as a REM. The message or comment is then typed in from the keyboard, beginning with a capital letter.||Here are some examples:|~~~|' An apostrophe can be used instead of the characters Rem, but only at the start of a line...||Rem The next line will print a greeting|Print \"a greeting\"||// This line is a comment that does nothing at all|Wait 75: // Wait one and a half seconds||/  *|This entiere portion of code will be totally ignored by AOZ...|Rem Return to the Edit Screen|Edit|"},{"name":"Edit","descriptions":[{"lang":"en","text":"Leave current program and return to Edit Screen"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The EDIT instruction forces the program to be abandoned, and returns you straight to the Edit Screen, like this:|~~~|Print \"Wait four seconds and then EDIT\"|Wait 200|Edit|Print \"I have been ignored!\"|~~~|"},{"name":"Direct","descriptions":[{"lang":"en","text":"Leave current program and return to Direct Mode"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use the DIRECT command to jump out of the current program and go straight to Direct Mode for testing out a programming idea.|~~~|Print \"Take me to Direct Mode immediately\"|Direct|~~~|Normally, a program can be interrupted by pressing the [Ctrl] and the [C] keys together...|This facility can be turned off and on at will, creating a crude sort of program protection.|"},{"name":"Break On","descriptions":[{"lang":"en","text":"toggle the program break keys on"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The BREAK OFF command can be included in a program to stop a particular routine from being interrupted while|it is running. To re-start the interrupt feature, use BREAK ON. But be warned!||Never run a program that is still being edited with BREAK OFF activated, or you will lose your work. Make a|back-up copy first. Here are two examples, and if you insist on ignoring this advice, you may be foolhardy enough|to try the second one!||~~~|Break Off|Print \"Try and press the Break keys now\"|Wait 500|Break On|Print \"Break keys activated\"|Wait 100|Direct|~~~||~~~|Break Off|Do|Print \"Try to get out of that!\"|Wait Key|Loop|~~~|"},{"name":"Break Off","descriptions":[{"lang":"en","text":"toggle the program break keys off"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use the BREAK OFF to re-start the interrupt feature.||Never run a program that is still being edited with BREAK OFF activated, or you will lose your work. Make a|back-up copy first. Here are two examples, and if you insist on ignoring this advice, you may be foolhardy enough|to try the second one!||~~~|Break Off|Print \"Try and press the Break keys now\"|Wait 500|Break On|Print \"Break keys activated\"|Wait 100|Direct|~~~||~~~|Break Off|Do|Print \"Try to get out of that!\"|Wait Key|Loop|~~~|"},{"name":"Include","descriptions":[{"lang":"en","text":"Inserts the source of another AOZ file into the current file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"The path to the sourcecode to include."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"The INCLUDE command must occupy a line on its own, otherwise the specified file will not be detected , and so it|will not be included.||The effect of INCLUDE on a file is as follows: immediately before a program is transpiled, AOZ scans the beginning of each program line for an|INCLUDE instruction. If an INCLUDE is encountered, AOZ opens the specified file, reads its length and checks its|validity, and if correct, the file is inserted internally at the position of the include instruction. Just as if you were making a CUT/PASTE of the code.||This process takes place for each INCLUDE that is found, in order. Included files and also include other files (like in C or other languages).||AOZ maintains an internal list of files and always makes sure that the same file is only included once.||The Include instruction allows you to group your most often used Procedures or Rountines separated and integrate them in your current work in just one line!||Here is an example of inclusion of code from the AOZ Drive/includes directory. \"fbdemo.aoz\" is a set of CSS and procedures that will automatically display an \"About\" button|over your application wihtout affecting how it works, to make it ready for publication on Facebook or other social networks.||~~~|// Include the code for facebook...|Include \"fbdemo\"||// The game main loop|Do|Actor 1, \"lucie.png\"|...|Exit If Inkey$ <> \"\"|Loop||// Call the information screen located in the fbdemo code...|VIEW_INFOS|~~~|"},{"name":"End","descriptions":[{"lang":"en","text":"End the current program"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"As soon as the END command is recognised, it stops the program. You can either press the [Esc] key to go to Direct|Mode, or use the [Spacebar] to get to the Edit Screen.||Try this example now:|~~~|Print \"I am the first instruction.\"|Wait 150|End|Print \"This instruction will never be executed!\"|~~~|"},{"name":"Stop","descriptions":[{"lang":"en","text":"Interrupt the current program"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command is similar to END, but it will display a message \"Program Interrupted\". You can use it as a signal that something went wrong when running your application.|"},{"name":"Include","descriptions":[{"lang":"en","text":"Inserts the source of another AOZ file into the current file"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"path$","type":"string","text":"The path to the sourcecode to include."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This command allows you to insert the another source-code in your current application.||You simply indicate the path to the file to ionxclude as a parameter. You can also, if the file is located somewhere in the AOZ Drive, just specify the name of the file,|Aoz will perform a search in the AOZ Drive and use the file if it is found.||The new source code is inserted at the very position of the Include statement, and the code located right after the line where the include is located is resumed after the end of the included code.||Include is a very powerul instruction. It allows to group all kinds of procedures or routines, or data in external files, and this way make your main code more readable and debuggable.||Here is an example of inclusion of code from the AOZ Drive/includes directory. \"fbdemo.aoz\" is a set of CSS and procedures that will automatically display an \"About\" button|over your application wihtout affecting how it works, to make it ready for publication on Facebook or other social networks.||~~~|// Include the code for facebook...|Include \"fbdemo\"||// The game main loop|Do|Actor 1, \"lucie.png\"|...|Exit If Inkey$ <> \"\"|Loop||// Call the information screen located in the fbdemo code...|VIEW_INFOS|~~~||Please note that it is perfectly possible to include other files in a file that is itself included, AOZ makes sure that no code is duplicated.|"}]},{"name":"Display and manipulation of 3D scenes","id":1639692454364,"descriptions":[{"lang":"en","text":"Set of AOZ commands to use 3D elements in your programs. Each 3D instruction or function starts with \"Td\" (for <T>hree <D>imensions ). It's a little legacy of the 3D extension of the AMOS Basic."}],"descriptions_file":[],"author":"Baptiste Bideaux","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Td Init","descriptions":[{"lang":"en","text":"Initialization of the 3D engine to be called before any 3D command is used. An error is caused if a 3D command is called without having initialized the engine first."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|Rem Initialize the 3D engine|Td Init||Rem Show a default scene|Td View \"my_view\", Scene$ = \"my_scene\"|~~~|"},{"name":"Td View","descriptions":[{"lang":"en","text":"To display a 3D scene you have to define a rectangular area of the screen, in which it will be displayed. The 3D engine automatically takes care of updating this view. It is possible to have several views on the screen, for example if you want to develop a multi-player 3D game."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"Index","type":"index","text":"Name or number identifying the view. If the view does not exist, it will be created, otherwise it will be updated with the new parameters."},{"lang":"en","name":"*X","type":"integer","text":"Horizontal position of the view in pixels on the screen. By default, the position is 0."},{"lang":"en","name":"*Y","type":"integer","text":"Vertical position of the view in pixels on the screen. By default, the position is 0."},{"lang":"en","name":"*Width","type":"integer","text":"Width of the view in pixels on the screen. By default, the width is that of the screen, indicated in the program manifest."},{"lang":"en","name":"*Height","type":"integer","text":"Height of the view in pixels on the screen. By default, the height is that of the screen, indicated in the program manifest."},{"lang":"en","name":"Scene","type":"index","text":"Name or number of the scene to display in the view. If the scene does not exist, a default scene will be created with this index and the default camera of this scene will be used as \"Viewpoint\"."},{"lang":"en","name":"*Camera$","type":"string","text":"Name of the camera to be used as \"Viewpoint\" of the scene. If the camera is not defined, the default camera of the scene will be used if it exists. If the camera does not exist in the scene, an error is occured."},{"lang":"en","name":"*Visible","type":"bool","text":"Show or hide the view. By default, this value is True."},{"lang":"en","name":"*Enable","type":"bool","text":"Enables or disables interactions on the view. By default, this value is True."},{"lang":"en","name":"*Antialias","type":"bool","text":"Enables or disables the smoothing of the 3D graphics. True by default"},{"lang":"en","name":"*UIScreen","type":"integer","text":"Number of the AOZ screen opened with \"Screen Open\" used to display the UI of the view. If the screen is not opened, an error is occured. -1 to none screen (value by default)."},{"lang":"en","name":"*Effect$","type":"string","text":"Name of the renderer effect. By default, no effect is applied. Name may be"},{"lang":"en","name":"*EffectParam$","type":"string","text":"List of the effect parameters. If empty or undefined, effect values by default will be used."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|Rem Load a 3D scene|Load Asset \"my_scene.gltf\", \"my_scene\"||Rem Initialize the 3D engine|Td Init||Rem Set a view with the loaded scene.|Td View \"my_view\", Scene$ = \"my_scene\", Camera$ = \"main_camera\"||~~~|"},{"name":"Td Copy","descriptions":[{"lang":"en","text":"Creates an exact copy into the memory of a 3D object of the scene (parameters, material and textures) under a new index. The copy will be stored in memory and will can to use as an asset."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"Index","type":"index","text":"Name or number of the 3D Object to copy. If the 3D Object doesn't exist, an error is occured."},{"lang":"en","name":"Scene","type":"index","text":"Name or number of the scene containing the 3D object to copy. If the scene doesn't exist, an error is occured."},{"lang":"en","name":"*Name$","type":"string","text":"Name of the object copied. If the name of the 3D object is not indicated, it's the original 3D Object name that will the whole scene will be copied."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|Rem Initialize the 3D engine|Td Init||Rem Set a view with a scene by default.|Td View \"my_view\", Scene$ = \"my_scene\"||Rem Copy the scene|Td Copy \"copied_cube\", Scene$ = \"my_scene\", Name$ = \"cube\"||Rem Set a second view with the duplicated scene|Td View \"my_view_2\", Scene$ = \"copied_scene\", Camera$ = \"main_camera\", X = 100, Y = 100, Width = 320, Height = 200||~~~|"},{"name":"Td Add","descriptions":[{"lang":"en","text":"Add a copied 3D object (copied with the Td Copy instruction) in a 3D Scene under a new name."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"Index","type":"index","text":"Name or number identifying the copied 3D object. If this Index doesn't exists, an error is occured."},{"lang":"en","name":"Scene","type":"index","text":"Name or number of the target scene. If the scene doesn't exist, an error is occured."},{"lang":"en","name":"*Name$","type":"string","text":"Name of the new 3D object. If the copied 3D object already exist in the scene, an error is occured."},{"lang":"en","name":"*X#","type":"float","text":"Position X of the new object on the scene. 0.0 by default"},{"lang":"en","name":"*Y#","type":"float","text":"Position Y of the new object on the scene. 0.0 by default"},{"lang":"en","name":"*Z#","type":"float","text":"Position Z of the new object on the scene. 0.0 by default"},{"lang":"en","name":"*AngleX#","type":"float","text":"Angle X of the new object on the scene. 0.0 by default"},{"lang":"en","name":"*AngleY#","type":"float","text":"Angle Y of the new object on the scene. 0.0 by default"},{"lang":"en","name":"*AngleZ#","type":"float","text":"Angle Z of the new object on the scene. 0.0 by default"},{"lang":"en","name":"*Scale#","type":"float","text":"Scale XYZ of the new object on the scene. 1.0 by default"},{"lang":"en","name":"*ScaleX#","type":"float","text":"Scale X of the new object on the scene. 1.0 by default"},{"lang":"en","name":"*ScaleY#","type":"float","text":"Scale Y of the new object on the scene. 1.0 by default"},{"lang":"en","name":"*ScaleZ#","type":"float","text":"Scale Z of the new object on the scene. 1.0 by default"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|Rem Initialize the 3D engine|Td Init||Rem Set a view with a scene by default.|Td View \"my_view\", Scene$ = \"my_scene\"||Rem Copy the scene|Td Copy \"copied_cube\", Scene$ = \"my_scene\", Name$ = \"cube\"||Rem Add the copied 3D Object as \"cube_2\" in the scene named \"my_scene\"|Td Add \"cube_2\", Scene$ = \"my_scene\", Name$ = \"copied_cube\", X# = 1, Y# = 0, Z# = 0||~~~|"},{"name":"Td Remove","descriptions":[{"lang":"en","text":"Remove a 3D object from a scene."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"Index","type":"index","text":"Name or number identifying the 3D object. If this Index doesn't exists, an error is occured."},{"lang":"en","name":"Scene","type":"index","text":"Name or number of the scene. If the scene doesn't exist, an error is occured."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"~~~|Rem Initialize the 3D engine|Td Init||Rem Set a view with a scene by default.|Td View \"my_view\", Scene$ = \"my_scene\"||Rem Remove the green cube from the 3D scene|Td Remove \"cube\", Scene$ = \"my_scene\"|~~~|"},{"name":"Td Cls","descriptions":[{"lang":"en","text":"Clear all the 3D objects from a scene."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"Index","type":"index","text":"Name or number identifying the 3D Scene. If this Index doesn't exists, an error is occured."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"~~~|Rem Initialize the 3D engine|Td Init||Rem Set a view with a scene by default.|Td View \"my_view\", Scene$ = \"my_scene\"||Rem Remove the green cube from the 3D scene|Td Cls \"my_scene\"|~~~|"},{"name":"Td Anim","descriptions":[{"lang":"en","text":"Play a 3D animation"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"Scene","type":"index","text":"Name or number of the scene containing the animated 3D object. If the scene doesn't exist, an error is occured."},{"lang":"en","name":"Clip$","type":"string","text":"Name of the animation to play. If the animation does not exist, an error is occured."},{"lang":"en","name":"*Object$","type":"string","text":"Name of the animated 3D object that will be animated. If the 3D object does not exist, the whole scene wille be used."},{"lang":"en","name":"*Loop$","type":"string","text":"May be \"once\"(by default), \"repeat\" or \"pingpong\"."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Td Light","descriptions":[{"lang":"en","text":"Create a 3D light"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"Index","type":"index","text":"Name or number of the 3D light."},{"lang":"en","name":"*Type$","type":"string","text":"Type og the 3D Light. May be \"ambient\" (default), \"directional\", \"hemisphere\", \"point\", \"spot\" or \"area\""},{"lang":"en","name":"*Color","type":"long","text":"Color RGB of the 3D light. $FFFFFF( white) by default."},{"lang":"en","name":"*Intensity#","type":"float","text":"Intensity of the 3D Light. 1.0 by default."},{"lang":"en","name":"*CastShadow","type":"bool","text":"If True, the 3D light will generating a shadow on all the 3D objects of the scene that could to reveive a shadow. False by default."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Td Camera","descriptions":[{"lang":"en","text":"Create a Perspective 3D Camera"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"Index","type":"index","text":"Name or number of the 3D Camera."},{"lang":"en","name":"*Focal#","type":"float","text":"Focal value of the camera in degrees. 45 by default."},{"lang":"en","name":"*Zooml#","type":"float","text":"Zoom value of the camera. 1.0 by default."},{"lang":"en","name":"*Near#","type":"float","text":"Near value of the camera. 0.01 by default."},{"lang":"en","name":"*Far#","type":"float","text":"Far value of the camera. 1000 by default."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Td Actor","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>Td Actor</i><br><b>Td Actor</b> xxxxxxx<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Rem Initialize the 3D engine</li><li class=\"ex_code_line\">Td Init</li><li class=\"ex_code_line\">Rem Set a view with a scene by default.</li><li class=\"ex_code_line\">Td View \"my_view\", Scene$ = \"my_scene\"</li><li class=\"ex_code_line\">Rem Copy the scene</li><li class=\"ex_code_line\">Td Copy \"copied_cube\", Scene$ = \"my_scene\", Object$ = \"cube\"</li><li class=\"ex_code_line\">Rem Add the copied 3D Object as \"cube_2\" in the scene named \"my_scene\"</li><li class=\"ex_code_line\">Td Paste \"cube_2\", Scene$ = \"my_scene\", Object$ = \"copied_cube\", X# = 1, Y# = 0, Z# = 0</li></ul>"}],"parameters":[{"lang":"en","name":"Index","type":"index","text":"Index of the 3D Actor"},{"lang":"en","name":"*Scene","type":"index","text":"Index of the 3D Scene where will be placed the 3D Actor"},{"lang":"en","name":"*Object","type":"index","text":"Index of the 3D Object used by the 3D Actor"},{"lang":"en","name":"*X#","type":"float","text":"3D Actor horizontal position on the 3D Scene. If not set, 0.0 by default"},{"lang":"en","name":"*Y#","type":"float","text":"3D Actor vertical position on the 3D Scene. if not set, 0.0 by default"},{"lang":"en","name":"*Z#","type":"float","text":"3D Actor depth position on the 3D Scene. if not set, 0.0 by default"},{"lang":"en","name":"*StartX#","type":"float","text":"3D Actor horizontal start position on the 3D Scene for a moving. If not set, the \"x\" position is used."},{"lang":"en","name":"*StartY#","type":"float","text":"3D Actor vertical start position on the 3D Scene for a moving. If not set, the \"y\" position is used."},{"lang":"en","name":"*EndX#","type":"float","text":"3D Actor horizontal end position on the 3D Scene for a moving. If not set, the \"x\" position is used."},{"lang":"en","name":"*EndY","type":"float","text":"3D Actor vertical end position on the 3D Scene for a moving. If not set, the \"y\" position is used."},{"lang":"en","name":"*Duration","type":"integer","text":"Length in milliseconds of the 3D Actor moving. If not set, 1000 by default (1 second)"},{"lang":"en","name":"*OnChange$","type":"string","text":"Name of the AOZ procedure to call when the 3D Actor change (position, alpha, scale...)"},{"lang":"en","name":"*Scale#","type":"float","text":"Modification of the 3D Actor size in height, width and depth. If not set, the last scaling value is used."},{"lang":"en","name":"*StartScale#","type":"float","text":"Modification of the 3D Actor start size in height, width and depth for a moving. If not set, the last scaling value is used."},{"lang":"en","name":"*EndScale#","type":"float","text":"Modification of the 3D Actor end size in height, width and depth for a moving. If not set, the last scaling value is used."},{"lang":"en","name":"*ScaleX#","type":"float","text":"Modification of the 3D Actor size in width. If not set, the last horizontal scaling value is used."},{"lang":"en","name":"*StartScaleX#","type":"float","text":"Modification of the 3D Actor start size in width for a moving. If not set, the last horizontal scaling value is used."},{"lang":"en","name":"*EndScaleX#","type":"float","text":"Modification of the 3D Actor end size in width for a moving. If not set, the last horizontal scaling value is used."},{"lang":"en","name":"*ScaleY#","type":"float","text":"Modification of the 3D Actor size in height. If not set, the last horizontal scaling value is used."},{"lang":"en","name":"*StartScaleY#","type":"float","text":"Modification of the 3D Actor start size in height for a moving. If not set, the last horizontal scaling value is used."},{"lang":"en","name":"*EndScaleY#","type":"float","text":"Modification of the 3D Actor end size in height for a moving. If not set, the last horizontal scaling value is used."},{"lang":"en","name":"*ScaleZ#","type":"float","text":"Modification of the 3D Actor size in depth. If not set, the last horizontal scaling value is used."},{"lang":"en","name":"*StartScaleZ#","type":"float","text":"Modification of the 3D Actor start size in depth for a moving. If not set, the last horizontal scaling value is used."},{"lang":"en","name":"*EndScaleZ#","type":"float","text":"Modification of the 3D Actor end size in depth for a moving. If not set, the last horizontal scaling value is used."},{"lang":"en","name":"*AngleX#","type":"float","text":"Modification of the X 3D Actor angle of rotation in degrees. If not set, the last angle is used."},{"lang":"en","name":"*StartAngleX#","type":"float","text":"Modification of the X 3D Actor start angle of rotation in degrees for a moving. If not set, the last angle value is used."},{"lang":"en","name":"*EndAngleX#","type":"float","text":"Modification of the X 3D Actor end angle of rotation in degrees for a moving. If not set, the last angle value is used."},{"lang":"en","name":"*AngleY#","type":"float","text":"Modification of the Y 3D Actor angle of rotation in degrees. If not set, the last angle is used."},{"lang":"en","name":"*StartAngleY#","type":"float","text":"Modification of the Y 3D Actor start angle of rotation in degrees for a moving. If not set, the last angle value is used."},{"lang":"en","name":"*EndAngleY#","type":"float","text":"Modification of the Y 3D Actor end angle of rotation in degrees for a moving. If not set, the last angle value is used."},{"lang":"en","name":"*AngleZ#","type":"float","text":"Modification of the Z 3D Actor angle of rotation in degrees. If not set, the last angle is used."},{"lang":"en","name":"*StartAngleZ#","type":"float","text":"Modification of the Z 3D Actor start angle of rotation in degrees for a moving. If not set, the last angle value is used."},{"lang":"en","name":"*EndAngleZ#","type":"float","text":"Modification of the Z 3D Actor end angle of rotation in degrees for a moving. If not set, the last angle value is used."},{"lang":"en","name":"*Alpha#","type":"float","text":"Modification of the 3D Actor alpha value. If not set, the last alpha value is used."},{"lang":"en","name":"*StartAlpha#","type":"float","text":"Modification of the 3D Actor start alpha value for a moving. If not set, the last alpha value is used."},{"lang":"en","name":"*EndAlpha#","type":"float","text":"Modification of the 3D Actor end alpha value for a moving. If not set, the last alpha is used."},{"lang":"en","name":"*Visible","type":"bool","text":"Set the 3D Actor visibility. If not set, True by default is used."},{"lang":"en","name":"*Anim$","type":"string","text":"Name of the animation provided by the 3D Scene to play."},{"lang":"en","name":"*LoopAnim","type":"bool","text":"Set if the animation should play to the infinite, or not. If not set, False by default is used."},{"lang":"en","name":"*OnAnimChange$","type":"string","text":"Name of the AOZ procedure to call when the 3D Actor animation change ( number of frame, state,...)"},{"lang":"en","name":"*OnCollision$","type":"string","text":"Name of the AOZ procedure to call when the 3D Actor enter in collision with an other object."},{"lang":"en","name":"*LoopMove","type":"bool","text":"Set if the moving should play to the infinite, or not. If not set, False by default is used."},{"lang":"en","name":"*Control$","type":"string","text":"Set one or more controls that will allow the user to interact with the 3D Actor (keyboard, mouse or joystick)."},{"lang":"en","name":"*OnControl$","type":"string","text":"Name of the AOZ procedure to call when a control is activated for the 3D Actor (keyboard, mouse or joystick)."},{"lang":"en","name":"*LookAt$","type":"string","text":"Name of the object the 3D actor has to look at. This can be the position of the mouse, another 3D Actor or a point on the 3D Scene."},{"lang":"en","name":"*Auto$","type":"string","text":"Defined an automatic movement of the 3D actor. It uses the same parameters as for the Control$ property"},{"lang":"en","name":"*OnMouse$","type":"string","text":"Name of the AOZ that will be called at each mouse action on the 3D Actor."},{"lang":"en","name":"*Enable","type":"bool","text":"Enables or disables a 3D actor. If False, the 3D Actor will still be displayed on the scene, but the controls, animations and events will be disabled."},{"lang":"en","name":"*Group$","type":"string","text":"Assigns the 3D Actor to a custom group. A custom group can be assigned to several 3D Actor. By example"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"}]},{"name":"Texts","id":1639692454395,"descriptions":[{"lang":"en","text":"Instructions and functions to print and manage fixed character text output in AOZ screens"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Wind Open","descriptions":[{"lang":"en","text":"Open a new text window in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of text window to open"},{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate of the left border of the window in the screen"},{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate of the left border of the window in the screen"},{"lang":"en","name":"width","type":"integer","text":"The width in characters of the new text window"},{"lang":"en","name":"height","type":"integer","text":"The width in characters of the new text window"},{"lang":"en","name":"border","type":"integer","text":"The number of the border character to use (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The window opened by this instruction will be displayed on screen and used for all subsequent text operation until|you command otherwise. WIND OPEN must be qualified by a window number (don't forget that zero has already|been allocated to the current screen), followed by the x,y graphic coordinates setting the top left-hand corner of the|new window, followed by the width and height of the new window in the number of characters needed. You may|also specify an optional border style, with values ranging from 1 to 16.||Try this example:|~~~|For W=1 To 3|Wind Open W,(W-1)*96,50,10,15,W|Paper W+3 : Pen W+6 : Clw|Print \"Window\";W|Next W|~~~|"},{"name":"Wind Close","descriptions":[{"lang":"en","text":"Close the current text window"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The WIND CLOSE command deletes the current window. If the WIND SAVE command has been activated, the|deleted window will be replaced by the saved graphics, otherwise the area will be totally erased from the screen.||Here is an example:|~~~|Wind Open 1,1,8,35,18,1 : Print \"Press a key to close this window\"|Wait Key|Wind Close|~~~|"},{"name":"Wind Save","descriptions":[{"lang":"en","text":"Save the character content of the the currenttext window so that it can be restored later"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command is extremely valuable for the AOZ Studio programmer. Once activated, the WIND SAVE|feature allows you to move your windows anywhere on screen without corrupting the existing display, by the|following method. The contents of the current window is saved as soon as the command is used, and then every|time a new window is opened, the contents of the windows underneath get saved automatically. The screen is then|re-drawn whenever a window is moved to a new position or closed.|"},{"name":"Wind Move","descriptions":[{"lang":"en","text":"Move the current text window horizontally and vertically"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"dx","type":"integer","text":"Signed horizontal displacement"},{"lang":"en","name":"dy","type":"integer","text":"Signed vertical displacement"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The current window can be moved to any acceptable graphic coordinates. Give the new x,y- coordinates after the|WIND MOVE command, and the x-coordinate will be rounded to the nearest 16-pixel boundary automatically.||Here is an example:|~~~|Wind Save : Wind Open 1,0,2,30,10,1 : Wind Save|For M=1 To 100|Pen Rnd(15) : Paper Rnd(15) : Print : Centre \"Making Movies\"|Wind Move Rnd(30)+1,Rnd(100)+1|Wait Vbl|Next|~~~|"},{"name":"Wind Size","descriptions":[{"lang":"en","text":"Resize the current text window horizontally and vertically"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"newWidth","type":"integer","text":"New width in number of characters"},{"lang":"en","name":"newHeight","type":"integer","text":"New height in number of characters"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"To change the size of the current window, specify the new width and new height in terms of the number of|characters. If WIND SAVE has been activated, the original contents of the window will be re-drawn by this|instruction. If the new window size is smaller than the original, any parts of the original image that lie outside of the|new window boundaries will be lost. Alternatively, if the new window is larger, the space around the saved area will|be filled with the current paper colour. Please note that the text cursor is always re-set to coordinates 0,0. For|example:|~~~|Wind Open 1,16,16,22,10,2|Print \"I want to be wider!\"|Wind Save|Wait 50|Wind Size 30,10|~~~|"},{"name":"Window","descriptions":[{"lang":"en","text":"Activate the given window in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"Index of the window to activate"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command sets the window number specified as the active window, to be used for all future text operations.|There is an automatic saving system for re-drawing the contents of windows, which is explained below.For now, run the last example from Direct mode and enter the following statements:|~~~|Window 1: Print \"AMOS\"|Window 3: Print \"open windows on the world\"|Window 2: \"lets me\"|~~~|The active window is host to the flashing text cursor, unless it has been made invisible with a CURS OFF command.|"},{"name":"Windon","descriptions":[{"lang":"en","text":"Return the index of the current window in the current screen"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"any","text":"The index of the current window in the current screen"}],"compatible":" aoz, stos, amos","content":"Before using windows in your programs, you will need to refer to their identification numbers. This function returns|the value of the current window. For example:|~~~|Do|Cls : Wind Open Rnd(99)+1,1,1,25,5,1|Print \"Window number \";Windon : Wait Key|Loop|~~~|"},{"name":"Locate","descriptions":[{"lang":"en","text":"Set the position of the text cursor of the current window in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The new horizontal position of the cursor in text coordinates"},{"lang":"en","name":"y","type":"integer","text":"The new vertical position of the cursor in text coordinates"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The Locate embedded command moves the graphics cursor to coordinates x,y measured relative to the top left-hand|corner of the 'menu line. Please note that after this command, the graphics cursor will always be positioned at the|bottom right of the object which has just be drawn. These coordinates will also be used to determine the location of|any further items in your menu. For example:|~~~|Home : Print \"Hello\"|Locate 0, 20 : Print \"AOZ\"|~~~|"},{"name":"Clw","descriptions":[{"lang":"en","text":"Clear the current text window with the Paper color, and restores the cursor at position 0, 0"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This simple command erases the contents of the current window and replaces it with a block of the current PAPER|colour, like this:|~~~|Cls: Paper 4 : Wind Open 1,1,1,12,5,1|Window 1: Print \"Clear Off\" : Wait 2|Paper 9 : Clw|~~~|"},{"name":"Home","descriptions":[{"lang":"en","text":"Move the text cursor at position 0, 0. The next text output with a \"Print\" instructions will be locate on the top-left of the windows"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Whenever you need to move the text cursor back to the top left-hand corner of the screen in a hurry, simply tell it to|go HOME and it will automatically be relocated to coordinates 0,0, like this:|~~~|Cls: Locate 10,10: Print \"I am going\"|Wait 100: Home : Print \"Home!\"|~~~|"},{"name":"Curs Pen","descriptions":[{"lang":"en","text":"Move the text cursor at position 0, 0. The next text output with a \"Print\" instructions will be locate on the top-left of the windows"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"color","type":"integer","text":"Index of the colour in teh palette of the screen the text window belongs to"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"As a default, whenever your screen mode provides four or more colours the text cursor is set to index number 2,|which is endowed with a built-in flash. The flashing can be turned off and back on again at any time using the|FLASH OFF and FLASH commands, but as soon as you select another colour for your text cursor, the automatic|flash will not apply. To change colours, use the CURS PEN command, followed by the index number of your|choice.||For example:|~~~|Curs Pen 2|~~~|Note that the new colour only effects the text cursor in the current open window, and has no influence over other|cursors used by any other windows. If you want to introduce a flash to that last example, you could add this line|before the CURS PEN command:|~~~|Flash 2,\"(FFF,15)(000,15)\"|~~~|"},{"name":"Pen$","descriptions":[{"lang":"en","text":"Return a magical string to use in a \"Print\" statement and change the colour of the pen used to draw the following texts"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"color","type":"integer","text":"Index of the colour to use in the palette of the screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A magical string that will be understood by the \"Print\" command"}],"compatible":" aoz, stos, amos","content":"This function returns a special control sequence that changes the pen colour inside a string. This means that|whenever the string is printed on the screen, the pre-set pen colour is automatically assigned to it. The format of the|string returned by PEN$ is: Chr$(27)+\"Pen\"+Chr$(48+number). Here is an example:|~~~|P$=Pen$(2)+\"Well all WHITE, \"+Pen$(6)+\" I still got the BLUES\"|Print P$|Pen 4|Print \"In the RED\"|~~~|"},{"name":"Paper$","descriptions":[{"lang":"en","text":"Return a magical string to use in a \"Print\" statement and change the colour of the paper used to draw the following texts"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"color","type":"integer","text":"Index of the colour to use in the palette of the screen"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A magical string that will be understood by the \"Print\" command"}],"compatible":" aoz, stos, amos","content":"Similarly to the PEN$ function, PAPER$ returns a character string that automatically sets the background colour|when the string is printed on the screen. For example:|~~~|Pen 1|B$=Paper$(3)+\"Flash Harry\"+Paper$(1)+\"The Invisible Man\"|Print B$|~~~|"},{"name":"Print","descriptions":[{"lang":"en","text":"Print items in the current window of the current screen. A semi-column at the end of will prevent a new-line"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"ITEMS","type":"any","text":"List of items separated byy commas or semi-columns"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Items are printed on the screen, starting from the current cursor position, and they may include the characters in any|group of variables or constants, up to the maximum line length of 255 characters. The PRINT command is also used|to display graphics and information on screen, as is demonstrated throughout this User Guide. This Chapter will deal|with printing text only.||Print statements can occupy their own lines, but if more than one element to be printed is written as a single line of|your program, each element must be separated from the next by either a semi-colon character or a comma. An|element to be printed can be a string, a variable or a constant, and is placed inside a pair of quotation marks.||A semi-colon is used to print elements immediately after one another, like this:|~~~|Print \"Follow\";\"on\"|~~~|A comma moves the cursor to the next \"Tab\" position on the screen, as follows:|~~~|Print \"Next\",\"Tab\"|~~~|A Tab is an automatic marker that sets up a location for printing, and is often used to lay out columns of figures, or|to make indentations in text, and setting Tab positions is explained later.||Normally, the cursor is advanced downwards by one line after every PRINT command, but by using the semi-colon|or comma, the rule can be changed. Here is an example:|~~~|Print \"AOZ\"|Print \"Studio\"|Print \"is\";|Print \"COOL!\",|~~~|"},{"name":"Print Using","descriptions":[{"lang":"en","text":"Print formatted text and numbers in the current window of the current screen. A semi-column at the end of will prevent a new-line"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"item","type":"any","text":"The item to print"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"PRINT USING allow you to format the data that you print. It works by using a series of special characters in the definition string.||### The tilde character \"~\"|Every ~ in the string variable is replaced by a single character from left to right, taken from an output string.||For example:|~~~|Print Using \"This is a ~~~~~~ example\";\"simple\"|~~~|### The hash character: \"#\"||Each # specifies one digit at a time, to be printed out from a given variable, with any unused digits being replaced|by spaces. For example:|~~~|Print Using \"###\";123456|~~~||### The plus character: \"+\"||This adds a plus sign to a positive number or a minus sign if the number is negative. For example:|~~~|Print Using \"+##\";10 : Print Using \"+##\";-10|~~~|### The minus character: \"-\"||This gives a minus sign to negative numbers only. Positive numbers will be preceded by a space. For example:|~~~|Print Using \"-##\";10:Print Using \"-##\";-10|~~~||###The full stop character: \".\"||When used with PRINT USING, the full stop (period) character places a decimal point in a number, and|automatically centres it on screen. For example:|~~~|Print Using \".###\";Pi#|~~~||### The semi-colon character: \";\"||This centres a number, but will not output a decimal point. For example:|~~~|Print Using \"Pl is #;###\";Pi#|~~~||### The exponential (circumflex) character: \"^\"||This causes a number to be printed out in exponential format. For example:|~~~|Print Using \"This is an exponential number^\";10000*10000.5|~~~|"},{"name":"At","descriptions":[{"lang":"en","text":"Return a magical string to use in a \"Print\" statement that changes the location of the cursor for the next characters"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"X","type":"integer","text":"Horizontal text coordinates where to print"},{"lang":"en","name":"Y","type":"integer","text":"Vertical text coordinates where to print"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A magical string that will be understood by the \"Print\" command"}],"compatible":" aoz, stos, amos","content":"You may also change the position of the text cursor directly from inside a character string. This is ideal for|positioning text once and for all on screen, no matter what happens in the program, because the text cursor can be set|during the program's initialisation phase. The string that is returned takes the following format:|~~~|Chr$(27)+\"MX\" + x + \"\\r\" + Chr$(27) + \"MY\" + y + \"\\r\"|~~~|So whenever this string is printed, the text cursor will be moved to the text coordinates held by X and Y. For|example:|~~~|A$=\"A\"+At(10,10)+\"Of\"+At(2,4)+\"String\"+At(20,20)+\"Pearls\"|Print A$|~~~|Imagine a Hi-Score table positioned like this:|~~~|SCORE=999|Locate 12,10: Print \"Hi Score \";SCORE|~~~|By using the AT function, the same table can be moved by editing a single string, no matter how many times it is|used in the program, like this:|~~~|HI_SCORES=At(12,10)+\"Hi Score\"|SCORE=999|Print HI_SCORE$;SCORE|~~~|"},{"name":"Pen","descriptions":[{"lang":"en","text":"Change the colour of the pen used to draw characters during a \"Print\" statement"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"colorIndex","type":"integer","text":"The index of the colour in the current screen palette"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command sets the colour of the text displayed in the current window, when followed by the colour index|number of your choice. The default setting of the pen colour is index number 2, which is white, and alternative|colours may be selected from one of up to 64 choices, depending on the current graphics mode. For example:|~~~|For INDEX=0 To 15|Pen INDEX|Print \"Pen number \";INDEX|Next INDEX|~~~|"},{"name":"Paper","descriptions":[{"lang":"en","text":"Change the colour of the paper used to draw the background space of the characters during a \"Print\" statement"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"colorIndex","type":"integer","text":"The index of the colour in the current screen palette"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"To select a background colour on which your text is to be printed, the PAPER command is followed by a colour|index number between 0 and 63, depending on the graphics mode in use, in exactly the same way as PEN. The|normal default colour index number is 1, giving an orange background colour, with other possibilities listed under|the SCREEN OPEN command in this User Guide. Run the following simple example:|~~~|Pen 2:|For INDEX=0 To 15|Paper INDEX: Print \"Paper number \";INDEX;Space$(23)|Next INDEX|~~~|"},{"name":" Pen","descriptions":[{"lang":"en","text":" Function to return the current text Pen color index."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en"}],"author":" Brian Flanagan","compatible":" aoz, stos, amos","content":"~~~|Pen 2|Print Pen\t\t\t// Will print 2|Pen 3|Print Pen\t\t\t// Will print 3|~~~|"},{"name":" Paper","descriptions":[{"lang":"en","text":" Function to return the current text Paper color index."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en"}],"author":" Brian Flanagan","compatible":" aoz","content":"~~~|Paper 2|Print Paper\t\t\t// Will print 2|Paper 3|Print Paper\t\t\t// Will print 3|~~~|"},{"name":"Centre","descriptions":[{"lang":"en","text":"Display and centre a string in the middle of the current text window at the current vertical position of the text cursor"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"TEXT$","type":"string","text":"The text to centre in the text window"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Programmers often need to position text in the centre of the screen, and to save you the effort of calculating the text|coordinates in order to achieve this, the CENTRE command takes a string of characters and prints it in the middle of|the line currently occupied by the cursor. For example:|~~~|Locate 0,1|Centre \"ABOVE\"|Cmove ,3|Centre \"suspicion\"|~~~|Please note that this instruction will have unpredicatable result if the string is larger than the width of the text window.|"},{"name":"Border","descriptions":[{"lang":"en","text":"Change teh text window character border to one of the pre-defined ones"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"borderNumber","type":"integer","text":"The number of the pre-defined text window borders to use"},{"lang":"en","name":"paper","type":"integer","text":"The color index of the background of the paper"},{"lang":"en","name":"pen","type":"integer","text":"The coloro index of the border"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command allows you to change the style and colour of the current window border. Border style numbers range|from 1 to 16, and the paper and pen colours can be selected from any available colour index numbers. Any of these|parameters can be omitted from the BORDER instruction as long as the commas are included for any missing|values: If the last example is still on screen, enter these lines from direct mode:|~~~|Border 3,2,3|Border 2,,|~~~|"},{"name":"Writing","descriptions":[{"lang":"en","text":"Define the logical operation done during the display of characters by the \"Print\" statement"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"mode1","type":"integer","text":"An Integer whose value indicates the writing mode.   0=REPLACE, 1=OR, 2=XOR, 3=AND, 4=IGNORE."},{"lang":"en","name":"mode2","type":"integer","text":"An Integer whose value indicates the optional second writing mode.  0=Normal = Print Text and Background, 1=Paper = Only change the background (paper) color."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"|The WRITING command is used to control how the subsequent text interacts with what is already on the screen,|and it can be followed by either one or two values.The first value selects one of five writing modes:|~~~|Value   Mode     Effect|0       REPLACE  New text replaces any existing screen data|1       OR       Merge new text with screen data, using logical OR|2       XOR      Combine new text with screen data, using OR|3       AND      Combine new text and screen data, using logical AND|4       IGNORE   Ignore all subsequent printing instructions.|~~~|A number set as the optional second value selects which parts of the text are to be printed on the screen, as follows:|~~~|Value   Mode    Effect|0       Normal  Print text and background together|1       Paper   The background is drawn in the Paper colour.  The text is drawn transparent.|2       Pen     The text is drawn int the Pen colour.         The background is drawn transparent.|~~~|The default value for both of the WRITING parameters is zero, giving normal printed output.||"},{"name":"Title Top","descriptions":[{"lang":"en","text":"Display a title in the top of the current text window with a border. Will have no effect if the window has no border"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"title$","type":"string","text":"The text of the title to display"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use this command to set a border title at the top of the current window to your chosen title string. This facility will|only operate with bordered windows, as follows:|~~~|Cls: Wind Open 4,1,1,20,10,1|Title Top \"Top of the morning\"|~~~|"},{"name":"Title Bottom","descriptions":[{"lang":"en","text":"Display a title in the bottom of the current text window with a border. Will have no effect if the window has no border"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"title$","type":"string","text":"The text of the title to display"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Similarly, this instruction assigns a string to the bottom title of the current window, like this:|~~~|Cls : Wind Open 5,75,50,24,15|Border 5,6,|Title Bottom \"Bottom of the barrel\"|~~~|"},{"name":"Curs Off","descriptions":[{"lang":"en","text":"Hide the text cursor and stop all associated colour animation. Use this instruction before graphical output to speed up the display"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This pair of commands is use to hide and reveal the text cursor in the current window. It has no effect at all on any cursors used in other windows.|"},{"name":"Curs On","descriptions":[{"lang":"en","text":"Show the text cursor and restarts all associated colour animation"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This pair of commands is use to hide and reveal the text cursor in the current window. It has no effect at all on any|cursors used in other windows.|"},{"name":"Inverse On","descriptions":[{"lang":"en","text":"Switch on Inverse setting for printing text in the current text window."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Inverse On swaps over the text and background colours already selected by the Pen and Paper|instructions, and so sets up an inverse mode for printing. Example|~~~|Pen 2 : Paper 4: Print \"I appear normal\"|Inverse On : Print \"Poetry inverse\"|Inverse Off : Print \"Don't be so negative\"|~~~|"},{"name":"Inverse Off","descriptions":[{"lang":"en","text":"Switch off Inverse setting for printing text in the current text window."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"For example, see 'Inverse On'|"},{"name":"Bold On","descriptions":[{"lang":"en","text":"Switch on Bold setting for printing text in the current text window."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"To use Bold text, use the Bold On instructions, as follows:|~~~|Bold On : Print \"This is BOLD\"|Bold Off: Print \"This is normal\"|~~~|"},{"name":"Bold Off","descriptions":[{"lang":"en","text":"Switch off Bold setting for printing in the current text window."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"For examples, see 'Bold On'|"},{"name":"Italic On","descriptions":[{"lang":"en","text":"Switch on Italic setting for printing in the current text window."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"To use Italic text, use the Italic On instruction as follows:|~~~|Italic On : Print \"This is in Italics\"|Italic Off: Print \"This is normal\"|~~~|"},{"name":"Italic Off","descriptions":[{"lang":"en","text":"Switch off Italic setting for printing in the current text window."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"For examples, see 'Italic On'|"},{"name":"Under On","descriptions":[{"lang":"en","text":"Switch on Underline setting for printing in the current text window."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"width","type":"integer","text":"Optional. Width of the line used to underline the text. Default width is 2 if omitted."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"To use underlined text, use the Under On instruction as follows:|~~~|Under On : Print \"This is where we draw the line\"|Under Off: Print \"This is normal\"|~~~|The line width used to underline can be set with the optional parameter 'width',  like this:|~~~|For S=1 To 7|Under On S    // S is the width|Print \"Underlined Text - Line Width\";Str$(S)|Next|Under Off|Print \"Back To Normal\"|~~~|"},{"name":"Under Off","descriptions":[{"lang":"en","text":"Switch off Underline setting for printing in the current text window."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos"},{"name":"Outline On","descriptions":[{"lang":"en","text":"Switch on Outline setting for printing in the current text window."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"To use outline text, use the Outline On instruction, as follows:|~~~|Outline On : Print \"This is Outlined\"|Outline Off: Print \"This is normal\"|~~~|"},{"name":"Outline Off","descriptions":[{"lang":"en","text":"Switch off Outline setting for printing in the current text window."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"For examples, see 'Outline On'|"},{"name":"Shade On","descriptions":[{"lang":"en","text":"Switch on Shade setting for printing in the current text window."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"intensity","type":"integer","text":"Optional. Percentage value to apply to the colour to brighten or darken it. To darken the colour, the value should be between 0 and 100. To brighten it, above 100. Be aware that if you over-brighten a colour."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"To use Shaded text, use the Shade On instruction like this:|~~~|Pen 4|Colour 4,$008800 //set Pen colour to dull green|Print \"No Shade - Normal Colour\"|Shade On : Print \"Shade On (default 50%)\"|Shade On 20 : Print \"Shade On 20 - Dark at 20%\"|Shade On 170 : Print \"Shade On 170 - Brighter by 70%\"|Shade Off : Print \"Back To Normal\"|~~~|"},{"name":"Shade Off","descriptions":[{"lang":"en","text":"Switch Off shading for Printed text."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos"},{"name":"Shadow On","descriptions":[{"lang":"en","text":"Turn ON the shadow effect for printing in the current text window."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Shadow On applies any shadow effect defined with Text Shadow to be used with Printed text. Example:-|~~~|Cls 1|Pen 0 : Paper 1|Text Shadow 2,6,8,$000000ff|Shadow On|Print \"Shadow On\"|~~~|"},{"name":"Shadow Off","descriptions":[{"lang":"en","text":"Turn OFF the shadow effect for printed text."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Turn off the shadow effect for printed text. Note that the shadow defined with Text Shadow will still be active for all text drawn with the Text instruction. See example below:-|~~~|Cls 1|Pen 0 : Paper 1|Text Shadow 2,6,8,$000000ff|Shadow On|Print \"Shadow On\"|Shadow Off|Print \"Shadow Off\"|~~~|"},{"name":"Scroll On","descriptions":[{"lang":"en","text":"Turn ON the automatic scrolling of the content of the current text window when the cursor pass the bottom line"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The SCROLL commands are used to control the scrolling of the current window. SCROLL OFF turns off the|scrolling, and whenever the cursor passes beyond the bottom of the window it will reappear from the top. SCROLL|ON starts the scrolling process again, so that a new line is inserted when the cursor tries to pass beyond the bottom|of the window.|"},{"name":"Scroll Off","descriptions":[{"lang":"en","text":"Turn OFF the automatic scrolling of teh content of the current text window when the cursor pass the bottom line, enforcing all further printing to be done in the top of the window"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The SCROLL commands are used to control the scrolling of the current window. SCROLL OFF turns off the|scrolling, and whenever the cursor passes beyond the bottom of the window it will reappear from the top. SCROLL|ON starts the scrolling process again, so that a new line is inserted when the cursor tries to pass beyond the bottom|of the window.|"},{"name":"CUp$","descriptions":[{"lang":"en","text":"Return a magical string to be used during a \"Print\" statement, moving the cursor one line up"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A magical string understood by the \"Print\" statement"}],"compatible":" aoz, stos, amos","content":"Return the control character (30) to move cursor up one line.||~~~|Print|Print \"AO\" + CUp$ + \"Z\"|~~~|"},{"name":"CDown$","descriptions":[{"lang":"en","text":"Return a magical string to be used during a \"Print\" statement, moving the cursor one line down"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A magical string understood by the \"Print\" statement"}],"compatible":" aoz, stos, amos","content":"Return the control character (31) to move cursor up one line.||~~~|Print \"AO\" + CDown$ + \"Z\"|~~~|"},{"name":"CLeft$","descriptions":[{"lang":"en","text":"Return a magical string to be used during a \"Print\" statement, moving the cursor one character left"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A magical string understood by the \"Print\" statement"}],"compatible":" aoz, stos, amos","content":"Return the control character (29) to move cursor up one line.||~~~|Print \"AO\" + CLeft$ + \"Z\"\t\t// \"Z\" will replace \"O\"|~~~|"},{"name":"CRight$","descriptions":[{"lang":"en","text":"Return a magical string to be used during a \"Print\" statement, moving the cursor one character right"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A magical string understood by the \"Print\" statement"}],"compatible":" aoz, stos, amos","content":"Return the control character (28) to move cursor up one line.||~~~|Print \"AO\" + CLeft$ + \"Z\"\t\t// \"Z\" will replace \"O\"|~~~|"},{"name":"CUp","descriptions":[{"lang":"en","text":"Move the cursor of the current text window one line up."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This instruction will force a scrolling of all text down if the cursor is already on the first line and scrolling is enabled.|"},{"name":"CDown","descriptions":[{"lang":"en","text":"Move the cursor of the current text window one line down."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This instruction will force a scrolling of all text up if the cursor is already on the last line and scrolling is enabled.|"},{"name":"CLeft","descriptions":[{"lang":"en","text":"Move the cursor of the current text window one character left."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Cursor will wrap to the right and up if it was located at position zero, and eventual generate a scrolling down of the content of the window if scrolling is enabled.|"},{"name":"CRight","descriptions":[{"lang":"en","text":"Move the cursor of the current text window one character right."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Cursor will wrap to the left and down if it was located at the rightmost position, and eventual generate a scrolling up of the content of the window if scrolling is enabled.|"},{"name":"Memorize X","descriptions":[{"lang":"en","text":"Store the horizontal position of the cursor in internal memory so that you can retreive it later"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The MEMORIZE commands store the current position of the x or y text cursor, so that you can print any text on the|screen without destroying the original cursor coordinates. These may be reloaded using the REMEMBER X and REMEMBER Y commands:|"},{"name":"Memorize Y","descriptions":[{"lang":"en","text":"Store the vertical position of the cursor in internal memory so that you can retreive it later"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The MEMORIZE commands store the current position of the x or y text cursor, so that you can print any text on the|screen without destroying the original cursor coordinates. These may be reloaded using the REMEMBER X and REMEMBER Y commands:|"},{"name":"Remember X","descriptions":[{"lang":"en","text":"Recall the horizontal position of the cursor from internal memory and move the cursor to the position"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use REMEMBER to position the text cursor at the coordinates saved by a previous MEMORIZE X or MEMORIZE Y command. If|MEMORIZE has not been used, the relevant coordinate will automatically be set to zero. There is a ready-made|example demonstrating these commands to be found under the SET CURS command, which is below.|"},{"name":"Remember Y","descriptions":[{"lang":"en","text":"Recall the vertical position of the cursor from internal memory and move the cursor to the position"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Use REMEMBER to position the text cursor at the coordinates saved by a previous MEMORIZE X or MEMORIZE Y command. If|MEMORIZE has not been used, the relevant coordinate will automatically be set to zero. There is a ready-made|example demonstrating these commands to be found under the SET CURS command, which is below.|"},{"name":"CMove$","descriptions":[{"lang":"en","text":"Return a magical string to be used during a \"Print\" statement, moving the cursor by the given character displacements"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"dx","type":"integer","text":"Signed horizontal displacement"},{"lang":"en","name":"dy","type":"integer","text":"Signed vertical displacement"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A magical string understood by the \"Print\" statement"}],"compatible":" aoz, stos, amos","content":"Characters can be printed relative to the current cursor position by setting up a string using the CMOVE$ function.|The following example prints a string at coordinates 10,10 from the current text cursor:|~~~|A$=Cmove$(10,10)|A$=A$+\"AOZ Studio\"|Print A$|~~~|"},{"name":"CMove","descriptions":[{"lang":"en","text":"Move the text cursor by a horizontal and/or vertical displacement"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"dx","type":"integer","text":"Signed horizontal displacement"},{"lang":"en","name":"dy","type":"integer","text":"Signed vertical displacement"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Characters can be printed relative to the current cursor position by setting up a string using the CMOVE$ function.|The following example prints a string at coordinates 10,10 from the current text cursor:|~~~|Print \"AOZ\"|CMove( 10, 0|Print \"Studio\"|~~~|"},{"name":"CLine","descriptions":[{"lang":"en","text":"Clear the line (paint with the Paper colour) located at the current vertical position of the cursor."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"length","type":"integer","text":"Eventual number of characters to clear (optional)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command is used to clear the line currently occupied by the text cursor. If CLINE is qualified by a number,|then that number of characters get cleared, starting from the current cursor position and leaving the cursor exactly|where it is. For example:|~~~|Print \"Testing Testing Testing\";|Cmove -7,|Cline 7|Wait Key|Cline|~~~|This instruction does not move the cursor.|"},{"name":"HScroll","descriptions":[{"lang":"en","text":"Scroll the content of the current window or line by one character horizontally"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"type","type":"integer","text":"Specifies what should scroll"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command scrolls all text in the current open window horizontally, by a single character position. The following|numbers can be used:|~~~|Number \tEffect|1 \t\tScroll current line to the left|2 \t\tScroll entire screen to the left|3 \t\tScroll current line to the right|4 \t\tScroll entire screen to the right|~~~|"},{"name":"VScroll","descriptions":[{"lang":"en","text":"Scroll the content of the current window or line by one character vertically"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"type","type":"integer","text":"Specifies what should scroll"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"Similarly to HSCROLL, the values given to this command result in different vertical scrolling effects, one character at a time.|~~~|Number \tEffect|1 \t\tScroll down text on and below current cursor Line|2 \t\tScroll down text from top of screen to current cursor line only|3 \t\tScroll up text from top of screen to current cursor line only|4 \t\tScroll up text on or below current cursor line|~~~|Note that blank lines are inserted to fill any gaps left by these scrolling operations.|"},{"name":"Tab$","descriptions":[{"lang":"en","text":"Return a string containing the Tab character (ASCII"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A string containing the Tab character"}],"content":"The TAB$ function returns a special control character called TAB, which carries the Ascii code of 9. When this|character is printed, the text cursor is automatically moved to the next tabulated column setting (Tab) to the right.|The default setting for this is four characters, which can be changed with the SET TAB instruction.|"},{"name":"Set Tab","descriptions":[{"lang":"en","text":"Set the width in characters used when printing the TAB character. Default is 4"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"width","type":"integer","text":"The number of characters to use for further printing of the TAB characters"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This simple command specifies the number of characters that the text cursor will move to the right when the next|TAB$ is printed. For example:|~~~|Cls : Print \"Home\"|Print Tab$;\"And\"|Set Tab 10 : Print Tab$;\"Away\"|~~~|"},{"name":"Repeat$","descriptions":[{"lang":"en","text":"Repeat a string"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"text$","type":"string","text":"The string to be repeated"},{"lang":"en","name":"number","type":"integer","text":"The number of repetitions"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A string containing the original string repeated NUMBER of times"}],"content":"To repeat the same string of characters using a single PRINT statement, follow your string of text with the number|of times you want the repetition. Whenever the string is printed, a|sequence of control characters is automatically added to the r$ variable, in the following format:|~~~|Chr$(27) + \"R1\" + A$ + Chr$( 13 ) + Chr$(27) + \"R1\" + Str$( n ) + Chr$( 13 )|~~~|"},{"name":"Set Curs","descriptions":[{"lang":"en","text":"Define the shape of the text cursor"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"l1","type":"integer","text":"Byte mask representing the first line"},{"lang":"en","name":"l2","type":"integer","text":"Byte mask representing the second line"},{"lang":"en","name":"l3","type":"integer","text":"Byte mask representing the third line"},{"lang":"en","name":"l4","type":"integer","text":"Byte mask representing the fourth line"},{"lang":"en","name":"l5","type":"integer","text":"Byte mask representing the fifth line"},{"lang":"en","name":"l6","type":"integer","text":"Byte mask representing the sixth line"},{"lang":"en","name":"l7","type":"integer","text":"Byte mask representing the seventh line"},{"lang":"en","name":"l8","type":"integer","text":"Byte mask representing the nineth line"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"To customise the text cursor into something a little more personalised, you can change its shape into anything you|like, providing you limit yourself to the eight lines of eight bits each that represent its appearance. Lines are|numbered one to eight from top to bottom, and every bit set to 1 results in a pixel drawn in the current cursor pen|colour, whereas a zero displays the current paper colour. To familiarise yourself with the technique, try the next|example, which changes the text cursor into a Hallowe'en mask:|~~~|L1=%00111100|L2=%01111110|L3=%01011010|L4=%11100111|L5=%10111101|L6=%01011010|L7=%00100100|L8=%00011000|Set Curs L1 L2 , L3 L4 L5, L6 , L7, L8|~~~|Your routine will appear slightly different from that, because the system automatically strips away any leading zeros|in binary listings.|"},{"name":"X Curs","descriptions":[{"lang":"en","text":"Return the horizontal position of the text cursor, in text coordinates"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The horizontal coordinate of the text cursor"}],"compatible":" aoz, stos, amos","content":"~~~|Print \"Hello AOZ! \";X Curs\t\t\t// Will print \"Hello AOZ! 10\"|~~~|"},{"name":"Y Curs","descriptions":[{"lang":"en","text":"Return the vertical position of the text cursor, in text coordinates"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The vertical coordinate of the text cursor"}],"compatible":" aoz, stos, amos","content":"~~~|Locate 0, 15|Print \"Hello AOZ! \";Y Curs\t\t\t// Will print \"Hello AOZ! 15\"|~~~|"},{"name":"X Graphic","descriptions":[{"lang":"en","text":"Return the graphical horizontal position of a coordinate in the text window coordinate space"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*x","type":"integer","text":"The horizontal coordinate to convert. (if ommited will return the coordinate of the text cursor)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The horizontal coordinate of the given text coordinate in graphical screen space"}],"compatible":" aoz, stos, amos","content":"This example will display a bob at the position of the cursor...|~~~|Load \"AMOSPRo_Examples:Objects/Bobs.abk\"|Locate 0, 10|Print \"Hello AOZ! \"|Bob 1, X Graphic( X Curs ), Y Graphic( Y Curs ), 1|Wait Key|~~~|"},{"name":"Y Graphic","descriptions":[{"lang":"en","text":"Return the graphical vertical position of a coordinate in the text window coordinate space"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*y","type":"integer","text":"The vertical coordinate to convert. (optional, if ommited will return the coordinate of the text cursor)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The vertical coordinate of the given text coordinate in graphical screen space"}],"compatible":" aoz, stos, amos","content":"This example will display a bob at the position of the cursor...|~~~|Load \"AMOSPRo_Examples:Objects/Bobs.abk\"|Locate 0, 10|Print \"Hello AOZ! \"|Bob 1, X Graphic( X Curs ), Y Graphic( Y Curs ), 1|Wait Key|~~~|"},{"name":"Border$","descriptions":[{"lang":"en","text":"Return a magical string understood by the \"Print\" statement, enforcing the drawing of a border around the given text"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"text$","type":"string","text":"The text to display"},{"lang":"en","name":"border","type":"index","text":"The index of the border to use"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"A magical string understood by the \"Print\" statement"}],"compatible":" aoz, stos, amos","content":"This works in much the same way as ZONES, by returning a string of characters that create a border around the|required string of text. The AOZ Studio programmer can use it with ZONES to set up special \"buttons\" for|alert windows and control consoles. In this case, the text held in the string will start at the current text cursor position. Border numbers can range from 1|to 16, for example:|~~~|Locate 1,1: Print Border$(\"AOZ Studio\",2)|~~~|The control sequence returned by BORDER has the following:|~~~|Chr$(27) + \"B0\" + border + Chr$(13) + Chr$(27) + \"B1\" + text + Chr$(13)|~~~|"},{"name":"X Text","descriptions":[{"lang":"en","text":"Convert a horizontal coordinate from the graphical coordinate space of the screen hosting the text window in a text coordinate within the window"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"x","type":"integer","text":"The horizontal coordinate to convert"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The converted coordinate, or -1 if the given coordinate does not lay inside of the text window"}],"compatible":" aoz, stos, amos"},{"name":"Y Text","descriptions":[{"lang":"en","text":"Convert a vertical coordinate from the graphical coordinate space of the screen hosting the text window in a text coordinate within the window"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"y","type":"integer","text":"The vertical coordinate to convert"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The converted coordinate, or -1 if the given coordinate does not lay inside of the text window"}],"compatible":" aoz, stos, amos"},{"name":"Win Width","descriptions":[{"lang":"en","text":"Returns the width of the current window in the current screen (number of columns)"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"},{"name":"Win Height","descriptions":[{"lang":"en","text":"Returns the height of the current window in the current screen (number of lines)"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz"}]},{"name":"Timer and Time","id":1639692454430,"descriptions":[{"lang":"en","text":"Instructions and functions to manage the timer and time in AOZ"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Timer","descriptions":[{"lang":"en","text":"Reserved variable. Return / Set the number of millisecond since the application was launched. Work in 1/50th of seconds in Amiga emulation"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The TIMER reserved variable containing the number of seconds since it was reset. It is a floating point number on modern machines and the precision will reach 0.001||On old machine, TIMER is an integer number increase by 1 every 1/50th of seconds||This example will make things clear...||~~~|Timer = 0|Print \"Please press a key when you want\"...|Wait Key|Print Timer\t\t\t// If you wait for exactly one second, it will print \"1\"|~~~||In Amiga emulation:|~~~|#manifest: \"Amiga\"||Timer = 0|Print \"Please press a key when you want\"...|Wait Key|Print Timer\t\t\t// If you wait for exactly one second, it will print \"50\"|~~~||You can use Timer as a seed for the randomize instruction, providing that you do not set the value of the time when you application starts.|~~|Randomize Timer|~~~|The best place to use this technique is immediately after the user has entered some data into the computer. Even a|simple key-press to start a game will work perfectly, and generate truly random numbers.|"},{"name":"Wait Vbl","descriptions":[{"lang":"en","text":"Pauses the application until the next screen refresh"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This instruction is fundamental to stabilize the speed of your application and syncheronize it perfectly with the display rate: it forces AOZ to \"give back the hand\" to the system, and wait for the next refresh of the display.||Not only this \"giving back the hand to the system\" is a mandatory thing to do to ensure that the computer where your application is running does not freeze, it also ensures the speed of your application||The rule is: *ALWAYS* use a Wait Vbl instruction in long loops, or in the main loop of your applicaiton.||This example display the refresh rate of your monitor, usually 60...|~~~|Timer = 0|Count = 0|Print \"Press a key when you are ready!\"|Do|K$ = Inkey$|If K$ <> \"\" Then Exit|Inc Count|Wait Vbl \t\t// Synchronize the number of loops to the speed of the display|Loop|Print \"Your monitor refresh rate is: \"; Count / Timer|~~~|"},{"name":"Wait","descriptions":[{"lang":"en","text":"Pauses the application during a certain period of time"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"time","type":"integer","text":"Duration of the pause, expressed in milliseconds. (Ticks in Amiga emulation)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The WAIT command tells the computer to stop the program and wait for as long as you want before moving on to|the next instruction. The number that follows it is the waiting time, specified as a floating point number in seconds.||The following example forces the program to wait for two seconds and 10 milliseconds:|~~~|Print \"I am the first instruction.\"|Wait 2.010|Print \"I am the next instruction.\"|~~~||The following example that works in Amiga emulation forces the program to wait for two seconds:|~~~|#manifest: \"Amiga\"||Print \"I am the first instruction.\"|Wait 100|Print \"I am the next instruction.\"|~~~|"}]},{"name":"User Interfaces","id":1639692454433,"descriptions":[{"lang":"en","text":"A set of instructions and functions that provide a suite of user interface components."}],"descriptions_file":[],"author":"Phil Bell","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"UI Confirm","descriptions":[{"lang":"en","text":"Display a Confirm user interface component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"title$","type":"string","text":"The text for the title of the popup box. If not set, the default text is \"Confirm\""},{"lang":"en","name":"content$","type":"string","text":"The text for the content of the popup box., If not set, the default content is \"Are you sure?\""},{"lang":"en","name":"confirmButton$","type":"string","text":"The text to be displayed on the confirm button. If not set, the default text is \"Confirm\""},{"lang":"en","name":"closeButton$","type":"string","text":"The text to be displayed on the close button. If not set the default text is \"Close\""},{"lang":"en","name":"onConfirm$","type":"string","text":"The name of an AOZ Procedure to be called if the confirm button is pressed."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|// Display a default confirmation popup box|UI Confirm||// Override the defaults and call a procedure if the user pressed the confirm button|UI Confirm \"Delete Account?\", \"Are you sure?\", closeButton$=\"No\", confirmButton$=\"Yes\", onConfirm$=\"CONFIRM\"||Procedure CONFIRM|Print \"You pressed the confirm botton\"|End Proc|~~~|"},{"name":"UI Prompt$","descriptions":[{"lang":"en","text":"Display a Prompt user interface component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"title$","type":"string","text":"The text for the title of the popup box. If not set, the default text is \"Confirm\""},{"lang":"en","name":"value$","type":"string","text":"The text for the input content."},{"lang":"en","name":"confirmButton$","type":"string","text":"The text to be displayed on the confirm button. If not set, the default text is \"Confirm\""},{"lang":"en","name":"closeButton$","type":"string","text":"The text to be displayed on the close button. If not set the default text is \"Close\""},{"lang":"en","name":"onConfirm$","type":"string","text":"The name of an AOZ Procedure to be called if the confirm button is pressed."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|// Display a default prompt popup box|UI Prompt$||// Override the defaults and call a procedure if the user pressed the confirm button|UI Prompt$ \"Enter new value\", value$=\"test\", onConfirm$=\"CONFIRM_EVENT\", closeButton$=\"Cancel\", confirmButton$=\"OK\"||Procedure CONFIRM_EVENT[VALUE$]|Print VALUE$|End Proc|~~~|"},{"name":"UI Prompt","descriptions":[{"lang":"en","text":"Display a Prompt user interface component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"title$","type":"string","text":"The text for the title of the popup box. If not set, the default text is \"Confirm\""},{"lang":"en","name":"value","type":"string","text":"The text for the input content."},{"lang":"en","name":"confirmButton$","type":"string","text":"The text to be displayed on the confirm button. If not set, the default text is \"Confirm\""},{"lang":"en","name":"closeButton$","type":"string","text":"The text to be displayed on the close button. If not set the default text is \"Close\""},{"lang":"en","name":"onConfirm$","type":"string","text":"The name of an AOZ Procedure to be called if the confirm button is pressed."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|// Display a default prompt popup box|UI Prompt||// Override the defaults and call a procedure if the user pressed the confirm button|UI Prompt \"Enter new value\", value=123, onConfirm$=\"CONFIRM_EVENT\", closeButton$=\"Cancel\", confirmButton$=\"OK\"||Procedure CONFIRM_EVENT[VALUE]|Print Str$(VALUE)|End Proc|~~~|"},{"name":"UI Progress","descriptions":[{"lang":"en","text":"Display a Progress user interface component,"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"A unique identifier for the component."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position on the screen. If not set, 10 by default."},{"lang":"en","name":"y","type":"integer","text":"The vertical position on the screen. If not set, 10 by default."},{"lang":"en","name":"value","type":"integer","text":"A value of the progress bar between 0 and 100, If not set, 0 by default."},{"lang":"en","name":"width","type":"integer","text":"The width of the component in pixels. If not set, 400 by default."},{"lang":"en","name":"height","type":"integer","text":"The height of the component in pixels. If not set, 20 by default."},{"lang":"en","name":"class$","type":"string","text":"The CSS (Cascading Style Sheet) class to be used to style the component. A default style is used if not set."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|// Display a defaut progress bar filled at 50%|UI Progress \"MyProgressBar\", value=50||// Display Bootstrap Styled progress bars|UI Progress \"MyProgressBar1\", x=100, y=350, width=500, height=50, class$=\"progress-bar bg-success\", value=10|UI Progress \"MyProgressBar2\", x=100, y=450, width=800, height=60, class$=\"progress-bar bg-info\", value=20|UI Progress \"MyProgressBar3\", x=100, y=550, width=1000, height=80, class$=\"progress-bar bg-warning\", value=50|UI Progress \"MyProgressBar4\", x=100, y=650, width=1500, height=20, class$=\"progress-bar bg-danger progress-bar-striped\", value=75||// You can easily update a progress bar value|UI Progress \"MyProgressBar\", value=40|UI Progress \"MyProgressBar\", value=60|UI Progress \"MyProgressBar\", value=80||// To get the progress bar value you can use the UI Value$ function|V = Val(UI Value$(\"MyProgressBar\"))|Print UI Value$(\"MyProgressBar\")||// Working example|UI Progress \"MyProgressBar\", x=100, y=750, width=500, class$=\"progress-bar bg-primary progress-bar-striped\"|V = 0: VS = 10: LAST_TIME# = Timer|Do|If Timer - LAST_TIME# > 0.5|LAST_TIME# = Timer|V = Val(UI Value$(\"MyProgressBar\"))|If V > 100 or V < 0: VS = -VS: End If: Add V, VS|UI Progress \"MyProgressBar\", value = V|End If|Wait Vbl|Loop|~~~|"},{"name":"UI Radio","descriptions":[{"lang":"en","text":"Displays a Radio user interface component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"A unique identifier for the component."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position on the screen. If not set, 10 by default."},{"lang":"en","name":"y","type":"integer","text":"The vertical position on the screen. If not set, 10 by default."},{"lang":"en","name":"items$","type":"string","text":"A list of value"},{"lang":"en","name":"fontSize","type":"integer","text":"The size of the font in pixels. If not set, 20 by default."},{"lang":"en","name":"value$","type":"string","text":"The value of the selected radio button. If not set, non are selected."},{"lang":"en","name":"onChange$","type":"string","text":"The name of an AOZ procedure to be called when the selected radio is changed."},{"lang":"en","name":"fontName$","type":"string","text":"The name of a font to be used for the textual part of the radio buttons."},{"lang":"en","name":"class$","type":"string","text":"The CSS (Cascading Style Sheet) class to be used to style the items. A default style is used if not set."},{"lang":"en","name":"padding","type":"number","text":"The padding in pixels between the content and the component dimensions. If not set, 5 by default."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The items$ is a comma separated list of value:item pairs .||For example:-|items$ = \"aoz:AOZ Studio is the best\"||The value part is \"aoz\" and the item part (the text displayed on the component) is the text after the \":\", which is \"AOZ Studio is the best\"||~~~|// Display 3 radio buttons with the second button selected|UI Radio \"MyRadio\", items$=\"1:This is radio value 1,2:This is radio value 2,3:This is radio value 3\", value$=\"2\"||// To get the selected radio button value you can use the UI Value$ function|Print UI Value$(\"MyRadio\")||// You can set the selected radio button by setting its value$ parameter|UI Radio \"MyRadio\", value$=\"2\"||// You can also use the UI Value command|UI Value \"MyRadio\", value$=\"1\"||// Example using the onChange$|UI Radio \"MyRadio\", items$=\"cats:I like cats the best,dogs:I like dogs the best\", value$=\"dog\", onChange$=\"MY_RADIO_CHANGE\"||Procedure MY_RADIO_CHANGE[ID$, VALUE$]|Print \"You like \" + VALUE$ + \" the best\"|End Proc|~~~|"},{"name":"UI TextBlock","descriptions":[{"lang":"en","text":"Displays a TextBlock user interface component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"A unique identifier for the component."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position on the screen. If not set, 10 by default."},{"lang":"en","name":"y","type":"integer","text":"The vertical position on the screen. If not set, 10 by default."},{"lang":"en","name":"width","type":"integer","text":"The width of the component in pixels. If not set, 400 by default."},{"lang":"en","name":"height","type":"integer","text":"The height of the component in pixels. If not set, the height will expand to fill the content$"},{"lang":"en","name":"content$","type":"string","text":"The text to be displayed. If not set, \"TextBlock Content\" by default."},{"lang":"en","name":"fontSize","type":"integer","text":"The size of the font in pixels. If not set, 20 by default."},{"lang":"en","name":"padding","type":"number","text":"The padding in pixels between the content and the component dimensions. If not set, 5 by default."},{"lang":"en","name":"class$","type":"string","text":"The CSS (Cascading Style Sheet) class to be used to style the component. A default style is used if not set."},{"lang":"en","name":"fontName$","type":"string","text":"The name of a font to be used for the content$"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The UI TextBlock is used to display a block of text within a defined area.||If no height is set, the height of the text block will increase to fit all the text in the content$ parameter.||If a height is set and the length of the content$ is split onto multiple lines, a vertical scroll bar will be automatically added to enable the text to be scrolled into view.||Set the class$ parameter to apply a CSS (Cascading Style Sheet) style to the component. See the UI Demo for more examples.|~~~|// A default text block|UI TextBlock \"MyTextBlock\", content$=\"My Text Block\"||// A text block with auto vertical scroll|UI TextBlock \"MyTextBlock\", height=100, content$=\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s.\"||// A Bootstrap styled text block|UI TextBlock \"MyTextBlock\", content$=\"Warning Text Style Dark Background\", class$=\"text-warning bg-dark\", width=600|~~~|"},{"name":"UI IFrame","descriptions":[{"lang":"en","text":"Adds an iframe HTML element"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"A unique identifier for the component."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position on the screen. If not set, 10 by default."},{"lang":"en","name":"y","type":"integer","text":"The vertical position on the screen. If not set, 10 by default."},{"lang":"en","name":"width","type":"integer","text":"The width of the component in pixels. If not set, 400 by default."},{"lang":"en","name":"height","type":"integer","text":"The height of the component in pixels. If not set, 400 by default."},{"lang":"en","name":"src","type":"string","text":"The URL of the page to embed."},{"lang":"en","name":"class$","type":"string","text":"The CSS (Cascading Style Sheet) class to be used to style the component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|// Embed a YouTube Video|UI IFrame \"aozVideo\", width = 1344, height = 756, src$=\"https://www.youtube.com/embed/5H6HGR3eWwo\"||// Embed another web page|UI IFrame \"demoVideo\", width = 1344, height = 756, src$=\"https://www.aoz.studio/faq-1\"|~~~|"},{"name":"UI ColorPicker","descriptions":[{"lang":"en","text":"Displays a ColorPicker user interface component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"A unique identifier for the component."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position on the screen. If not set, 10 by default."},{"lang":"en","name":"y","type":"integer","text":"The vertical position on the screen. If not set, 10 by default."},{"lang":"en","name":"width","type":"integer","text":"The width of the component in pixels. If not set, 40 by default."},{"lang":"en","name":"height","type":"integer","text":"The height of the component in pixels. If not set, 40 by default."},{"lang":"en","name":"value$","type":"string","text":"The hexadecimal color value for the selected color. If not set, #ffffff by default."},{"lang":"en","name":"onChange$","type":"string","text":"The name of an AOZ procedure to be called when the selected color is changed."},{"lang":"en","name":"class$","type":"string","text":"The CSS (Cascading Style Sheet) class to be used to style the component. A default style is used if not set."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|// Display a default color picker|UI ColorPicker \"MyColorPicker\"||// To get the selected color value you can use the UI Value$ function|Print UI Value$(\"MyColorPicker\")||// You can update the selected color by setting its value$ parameter|UI ColorPicker \"MyColorPicker\", value$=\"#C4C4C4\"||// You can also use the UI Value command to update the selected color|UI Value \"MyColorPicker\", value$=\"#FFAABB\"||// Example using the onChange$ event|UI ColorPicker \"MyColorPicker\", x=50, y=50, width=200, height=75, value$=\"#000000\", onChange$=\"MYCOLORCHANGE\"|Procedure MYCOLORCHANGE[ID$, VALUE$]|Print \"The selected color is \" + VALUE$|End Proc|~~~|"},{"name":"UI Slider","descriptions":[{"lang":"en","text":"Displays a Slider user interface component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"A unique identifier for the component."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position on the screen. If not set, 10 by default."},{"lang":"en","name":"y","type":"integer","text":"The vertical position on the screen. If not set, 10 by default."},{"lang":"en","name":"width","type":"integer","text":"The width of the component in pixels. If not set, 300 by default."},{"lang":"en","name":"min","type":"integer","text":"The minimum value of the slider. If not set, 0 by default."},{"lang":"en","name":"max","type":"integer","text":"The maximum value of the slider. If not set, 100 by default."},{"lang":"en","name":"step","type":"integer","text":"The value for each step of the slider. If not set, 1 by default."},{"lang":"en","name":"value","type":"integer","text":"The value of the slider. If not set, 0 by default."},{"lang":"en","name":"onChange$","type":"string","text":"The name of an AOZ procedure to be called when the slider value changes."},{"lang":"en","name":"class$","type":"string","text":"The CSS (Cascading Style Sheet) class to be used to style the component. A default style is used if not set."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The UI Slider lets the user swiftly slide through possible values spread over a desired range.|~~~|// Display a default slider|UI Slider \"MySlider\"||// To get the selected slider value you can use the UI Value$ function|Print UI Value$(\"MySlider\")||// You can update the slider value by setting its value parameter|UI Slider \"MySlider\", value=30||// You can also use the UI Value command to update the slider value|UI Value \"MySlider\", value$=\"50\"||// Example range between 10 and 40 in 0.5 steps|UI Slider \"MySlider\", y=400, onChange$=\"SLIDERCHANGE\", min=10, max=40, step=0.5, width=600|Procedure SLIDERCHANGE[ID$, VALUE]|Print \"Slider (min=10 max=40 step=0.5) Value:\" + Str$(VALUE)|End Proc|~~~|"},{"name":"UI Select","descriptions":[{"lang":"en","text":"Displays a Select user interface component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"A unique identifier for the component."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position on the screen. If not set, 10 by default."},{"lang":"en","name":"y","type":"integer","text":"The vertical position on the screen. If not set, 10 by default."},{"lang":"en","name":"width","type":"integer","text":"The width of the component in pixels. If not set, 300 by default."},{"lang":"en","name":"items$","type":"string","text":"A list of value"},{"lang":"en","name":"fontSize","type":"integer","text":"The size of the font in pixels. If not set, 20 by default."},{"lang":"en","name":"padding","type":"number","text":"The padding in pixels between the content and the component dimensions. If not set, 5 by default."},{"lang":"en","name":"class$","type":"string","text":"The CSS (Cascading Style Sheet) class to be used to style the component. A default style is used if not set."},{"lang":"en","name":"value$","type":"string","text":"The value of the selected item. If not set, the first item is selected."},{"lang":"en","name":"onChange$","type":"string","text":"The name of an AOZ procedure to be called when the selected item is changed."},{"lang":"en","name":"fontName$","type":"string","text":"The name of a font to be used for the text."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The items$ is a comma separated list of value:item pairs .||For example:-|items$ = \"aoz:AOZ Studio is the best\"||The value part is \"aoz\" and the item part (the displayed text) is the text after the \":\", which is \"AOZ Studio is the best\"|~~~|// Display a select component with 3 dropdown list items|UI Select \"MySelect\", items$=\"1:This is item 1,2:This is item 2,3:This is item 3\"||// To get the selected item value you can use the UI Value$ function|Print UI Value$(\"MySelect\")||// You can set the selected item by setting its value$ parameter|UI Radio \"MySelect\", value$=\"2\"||// You can also use the UI Value command|UI Value \"MySelect\", value$=\"1\"||// Example using the onChange$|UI Select \"MySelect\", y=550, items$=\"red:My favorite color is red,green:My favorite color is green,blue:My favorite color is blue\", onChange$=\"SELECTCHANGE\"||Procedure SELECTCHANGE[ID$, VALUE$]|Print \"Your favorite color is \" + VALUE$|End Proc|~~~|"},{"name":"UI CheckBox","descriptions":[{"lang":"en","text":"Displays a CheckBox user interface component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"A unique identifier for the component."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position on the screen. If not set, 10 by default."},{"lang":"en","name":"y","type":"integer","text":"The vertical position on the screen. If not set, 10 by default."},{"lang":"en","name":"width","type":"integer","text":"The width of the component in pixels. If not set, 30 by default."},{"lang":"en","name":"height","type":"integer","text":"The height of the component in pixels. If not set, 30 by default."},{"lang":"en","name":"value$","type":"string","text":"The value of the check box. If not set, false by default."},{"lang":"en","name":"class$","type":"string","text":"The CSS (Cascading Style Sheet) class to be used to style the component. No style is used if not set."},{"lang":"en","name":"onChange$","type":"string","text":"The name of an AOZ procedure to be called when the selected item is changed."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|// Display a default check box|UI CheckBox \"MyCheckBox\"||// To get the checkbox value you can use the UI Value$ function|Print UI Value$(\"MyCheckBox\")||// You can set the checkbox value setting its value$ parameter|UI CheckBox \"MyCheckBox\", value$=\"true\"||// You can also use the UI Value command|UI Value \"MyCheckBox\", value$=\"false\"||// Example using the onChange$ event with a Boostrap style|UI CheckBox \"MyCheckBox\", y=300, class$=\"form-check-input\", width=80, height=80, onChange$=\"CHECKCHANGE\"|Procedure CHECKCHANGE[ID$, VALUE$]|Print \"Check Value: \" + VALUE$|End Proc|~~~|"},{"name":"UI TextBox","descriptions":[{"lang":"en","text":"Displays a TextBox user interface component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"A unique identifier for the component."},{"lang":"en","name":"value$","type":"string","text":"The text inside the text box. Empty by default."},{"lang":"en","name":"placeHolder$","type":"string","text":"The place holder text. Empty by default."},{"lang":"en","name":"class$","type":"string","text":"The CSS (Cascading Style Sheet) class to be used to style the component. No style is used if not set."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position on the screen. If not set, 10 by default."},{"lang":"en","name":"y","type":"integer","text":"The vertical position on the screen. If not set, 10 by default."},{"lang":"en","name":"width","type":"integer","text":"The width of the component in pixels. If not set, 300 by default."},{"lang":"en","name":"fontSize","type":"integer","text":"The size of the font in pixels. If not set, 20 by default."},{"lang":"en","name":"padding","type":"number","text":"The padding in pixels between the content and the component dimensions. If not set, 5 by default."},{"lang":"en","name":"type$","type":"string","text":"The expected type of text to be entered. If not set, \"text\" by default."},{"lang":"en","name":"fontName$","type":"string","text":"The name of a font to be used for the text."},{"lang":"en","name":"min","type":"integer","text":"Sets the minimum value when type$=\"number\""},{"lang":"en","name":"max","type":"integer","text":"Sets the maximum value when type$=\"number\""},{"lang":"en","name":"onChange$","type":"string","text":"The name of an AOZ procedure to be called when the selected item is changed."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The UI TextBox can be used to collect information from a user such as a login form.|~~~|// Display a default text box|UI TextBox \"MyTextBox\"||// To get the input text you can use the UI Value$ function|Print UI Value$(\"MyTextBox\")||// You can set the input text value by setting its value$ parameter|UI TextBox \"MyTextBox\", value$=\"TextBox Contents..\"||// You can also use the UI Value command|UI Value \"MyTextBox\", value$=\"TextBox Contents..\"||// Display a password type TextBox with placeholder text|UI TextBox \"MyTextBox\", placeHolder$=\"Password....\", type$=\"password\"||// A date TextBox|UI TextBox \"MyTextBox\", type$=\"date\"||// A time TextBox|UI TextBox \"txtUITextBox6\", type$=\"time\"||// Text box using a google font|#googleFont:\"baloo\"|UI TextBox \"MyTextBox\", placeHolder$=\"Google Font Baloo...\", class$=\"form-control\", fontName$=\"baloo\", fontSize=40, width=600|~~~|"},{"name":"UI Button","descriptions":[{"lang":"en","text":"Displays a Button user interface component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"A unique identifier for the component."},{"lang":"en","name":"content$","type":"string","text":"The text to display on the button. If not set, \"button\" by default."},{"lang":"en","name":"class$","type":"string","text":"The CSS (Cascading Style Sheet) class to be used to style the component. No style is used if not set."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position on the screen. If not set, 10 by default."},{"lang":"en","name":"y","type":"integer","text":"The vertical position on the screen. If not set, 10 by default."},{"lang":"en","name":"width","type":"integer","text":"The width of the component in pixels. If not set, the width will auto grow to fit the content."},{"lang":"en","name":"height","type":"integer","text":"The height of the component in pixels. If not set, the height will auto grow to fit the content."},{"lang":"en","name":"fontSize","type":"integer","text":"The size of the font in pixels. If not set, 20 by default."},{"lang":"en","name":"padding","type":"number","text":"The padding in pixels between the content and the component dimensions. If not set, 5 by default."},{"lang":"en","name":"onClick$","type":"string","text":"The name of an AOZ procedure to be called when the button is pressed."},{"lang":"en","name":"iconClass$","type":"string","text":"The name of a CSS (Cascading Style Sheet) class used to add an icon to the button."},{"lang":"en","name":"fontName$","type":"string","text":"The name of a font to be used for the content$ text."},{"lang":"en","name":"tooltip$","type":"string","text":"The text to display as a tooltip popup."},{"lang":"en","name":"tooltipPlacement$","type":"string","text":"The position of the tooltip popup. If not set, \"auto\" by default."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Please see the UI Demo for more button examples.|~~~|// Display a default button|UI Button \"ByButton\"||// A default button with an icon|// Boostrap Icons classes for the button iconClass$ param can be found here: https://icons.getbootstrap.com/|Load CSS \"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\"|UI Button \"ByButton\", content$=\"Icon Button\", iconClass$=\"bi bi-emoji-heart-eyes-fill\", width=150||// An icon only button|Load CSS \"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css\"|UI Button \"ByButton\", content$=\"\", class$=\"btn btn-outline-info\", fontSize=50, iconClass$=\"bi bi-hand-thumbs-up-fill\", width=80||// A bootstrap styled button with onClick% event|UI Button \"ByButton\", y=350, content$=\"Button Event Handler\", width=300, class$=\"btn btn-success\", onClick$=\"BUTTON_EVENT\"|Procedure BUTTON_EVENT[ID$]|Print=\"You Clicked The Button\"|End Proc||// Buttons with tooltips|UI Button \"ByButton1\", x=100, y=350, content$=\"Tooltip Top\", class$=\"btn btn-secondary\", onClick$=\"BUTTON_EVENT\", tooltip$=\"Tooltip Top\", tooltipPlacement$=\"top\"|UI Button \"ByButton2\", x=100, y=400, content$=\"Tooltip Right\", class$=\"btn btn-secondary\", onClick$=\"BUTTON_EVENT\", tooltip$=\"Tooltip Right\", tooltipPlacement$=\"right\"|UI Button \"ByButton3\", x=100, y=450, content$=\"Tooltip Left\", class$=\"btn btn-secondary\", onClick$=\"BUTTON_EVENT\", tooltip$=\"Tooltip Left\",tooltipPlacement$=\"left\"|UI Button \"ByButton4\", x=100, y=500, content$=\"Tooltip Bottom\", class$=\"btn btn-secondary\", onClick$=\"BUTTON_EVENT\", tooltip$=\"Tooltip Bottom\", tooltipPlacement$=\"bottom\"|~~~|"},{"name":"UI TextArea","descriptions":[{"lang":"en","text":"Displays a Button user interface component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"A unique identifier for the component."},{"lang":"en","name":"value$","type":"string","text":"The text to display in the component. Empty by default."},{"lang":"en","name":"placeHolder$","type":"string","text":"The place holder text. Empty by default."},{"lang":"en","name":"class$","type":"string","text":"The CSS (Cascading Style Sheet) class to be used to style the component. No style is used if not set."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position on the screen. If not set, 10 by default."},{"lang":"en","name":"y","type":"integer","text":"The vertical position on the screen. If not set, 10 by default."},{"lang":"en","name":"width","type":"integer","text":"The width of the component in pixels. If not set, 300 by default."},{"lang":"en","name":"rows","type":"integer","text":"The number of rows for the component. If not set, 2 by default."},{"lang":"en","name":"fontSize","type":"integer","text":"The size of the font in pixels. If not set, 20 by default."},{"lang":"en","name":"padding","type":"number","text":"The padding in pixels between the content and the component dimensions. If not set, 5 by default."},{"lang":"en","name":"fontName$","type":"string","text":"The name of a font to be used for the content$ text."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"~~~|// Display a default TextArea|UI TextArea \"MyTextArea\"||// To get the input text you can use the UI Value$ function|Print UI Value$(\"MyTextArea\")||// You can set the input text value by setting its value$ parameter|UI TextArea \"MyTextArea\", value$=\"TextArea Contents..\"||// You can also use the UI Value command|UI Value \"MyTextArea\", value$=\"TextArea Contents..\"||// Bootstrap style with 5 rows of text|UI TextArea \"MyTextArea\" class$=\"form-control\", value$=\"Bootstrap Style with 5 rows of text\", rows=5||// Bootstrap style with google font|#googleFont:\"baloo\"|UI TextArea \"MyTextArea\", value$=\"Styled using bootstrap !!!!\", rows=10, width=500, fontName$=\"baloo\", class$=\"text-info bg-dark\"|~~~|"},{"name":"UI Image","descriptions":[{"lang":"en","text":"Displays an Image user interface component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"An unique identifier for the component."},{"lang":"en","name":"x","type":"integer","text":"The horizontal position on the screen. If not set, 10 by default."},{"lang":"en","name":"y","type":"integer","text":"The vertical position on the screen. If not set, 10 by default."},{"lang":"en","name":"width","type":"integer","text":"The width of the component in pixels. If not set, source width by default."},{"lang":"en","name":"height","type":"integer","text":"The height of the component in pixels. If not set, source height by default."},{"lang":"en","name":"src$","type":"string","text":"URL of the image source. This URL can to be formatted as a http/https link, or generated by the Image DataURL$ instruction to use an image from the bank image. If not set, default image is used."},{"lang":"en","name":"onClick$","type":"string","text":"The name of an AOZ procedure to be called when the image is pressed."},{"lang":"en","name":"tooltip$","type":"string","text":"The text to display as a tooltip popup."},{"lang":"en","name":"tooltipPlacement$","type":"string","text":"The position of the tooltip popup. If not set, \"auto\" by default."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"Please see the UI Demo for more button examples.|~~~|// Display a default image|UI Image \"MyImage\"||// Display an image from a web link|UI Image \"MyImage\", src$=\"https://www.vintageisthenewold.com/wp-content/uploads/2018/10/AMOS.png\"||// Display an image from the Image Bank|UI Image \"MyImage\", src$=Image DataURL$( \"lucie.png\" )||// An Image with onClick% event|UI Image \"MyImage\", y=350, width=300, onClick$=\"IMAGE_EVENT\"|Procedure IMAGE_EVENT[ID$]|Print \"You Clicked The Image\"|End Proc||// Images with tooltips|UI Image \"MyImage1\", x=100, y=350, onClick$=\"IMAGE_EVENT\", tooltip$=\"Tooltip Top\", tooltipPlacement$=\"top\"|UI Image \"MyImage2\", x=100, y=400, onClick$=\"IMAGE_EVENT\", tooltip$=\"Tooltip Right\", tooltipPlacement$=\"right\"|UI Button \"MyImage3\", x=100, y=450, onClick$=\"IMAGE_EVENT\", tooltip$=\"Tooltip Left\",tooltipPlacement$=\"left\"|UI Button \"MyImage4\", x=100, y=500, onClick$=\"IMAGE_EVENT\", tooltip$=\"Tooltip Bottom\", tooltipPlacement$=\"bottom\"|~~~|"},{"name":"UI Popup","descriptions":[{"lang":"en","text":"Displays a UI Popup component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"A unique identifier for the component."},{"lang":"en","name":"content$","type":"string","text":"The text to be displayed in the popup. Empty by default."},{"lang":"en","name":"placement$","type":"string","text":"The screen location for the popup. If not set, \"top-center\" by default."},{"lang":"en","name":"delay","type":"integer","text":"The number of milliseconds before the popup is hidden from the screen. If not set, 5 by default."},{"lang":"en","name":"class$","type":"string","text":"The CSS (Cascading Style Sheet) class to be used to style the component. If not set, a default style is used."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The UI Popup can be used to display pop up notifications, also known as \"Toasts\"|~~~|// Show a default popup|UI Popup \"MyPopup\", content$=\"The is default popup message with a delay of 5 seconds\"||// Some more examples|UI Popup \"MyPopup1\", content$=\"Popup position top-left with a delay of 5 seconds\", placement$=\"top-left\"|UI Popup \"MyPopup2\", content$=\"Popup position top-center with a delay of 6 seconds\", placement$=\"top-center\", delay=6000, class$=\"text-white bg-success\"|UI Popup \"MyPopup3\", content$=\"Popup position top-right with a delay of 7 seconds\", placement$=\"top-right\", delay=7000, class$=\"text-white bg-dark\"|UI Popup \"MyPopup4\", content$=\"Popup position bottom-left with a delay of 8 seconds\",lacement$=\"bottom-left\", delay=8000, class$=\"bg-warning\"|UI Popup \"MyPopup5\", content$=\"Popup position bottom-center with a delay of 9 seconds\", placement$=\"bottom-center\", delay=9000, class$=\"text-white bg-danger\"|UI Popup \"MyPopup6\", content$=\"Popup position bottom-right with a delay of 10 seconds\", placement$=\"bottom-right\", delay=10000, class$=\"text-white bg-primary\"|UI Popup \"MyPopup7\", content$=\"Popup position center with a delay of 11 seconds\", placement$=\"center\",delay=11000, class$=\"bg-info\"|UI Popup \"MyPopup8\", content$=\"Popup position left-center with a delay of 12 seconds\", placement$=\"left-center\", delay=12000, class$=\"bg-secondary\"|UI Popup \"MyPopup9\", content$=\"Popup position left-center with a delay of 13 seconds\", placement$=\"right-center\", delay=13000, class$=\"bg-secondary\"|~~~|"},{"name":"UI Delete","descriptions":[{"lang":"en","text":"Delete a UI Component from the display."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier for the component you want to delete"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The UI Delete is used to remove a UI element from the display. You can also use UI Cls to delete all UI components.||The UI components are overlayed on top of the AOZ canvas and are not part of an AOZ screen||They use the manifest screen dimensions for sizing and positioning and are not affected by the Cls or Screen commands.|~~~|// Add a text box that we will delete|UI TextBox \"MyTextBlock\"||// Remove the existing text box|UI Delete \"MyTextBlock\"|~~~|"},{"name":"UI Show","descriptions":[{"lang":"en","text":"Show a UI element on screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier for the component you want to delete"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The UI Show instruction is used to show a UI element if it was hidden.|~~~|// Add a text box that we will delete|UI TextBox \"MyTextBlock\"|UI Hide \"MyTextBlock\"|Wait Key|UI Show \"MyTextBlock\"|~~~|"},{"name":"UI Hide","descriptions":[{"lang":"en","text":"Hide a UI element from the display"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier for the component you want to delete"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The UI Hide instruction is used to hide a UI element. You can make the element appear on the screen again by using the UI Show instruction.|~~~|// Add a text box that we will delete|UI TextBox \"MyTextBlock\"|UI Hide \"MyTextBlock\"|Wait Key|UI Show \"MyTextBlock\"|~~~|"},{"name":"UI Enable","descriptions":[{"lang":"en","text":"Enable all the user actions on a UI element."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The UI Enable instruction is used to enable all the user actions on a UI element. You can to disable an element by using the UI Disable instruction.|~~~|// Add a disactivated Button linked on the BTN_CLICK procedure|UI Button \"MyButton\", OnClick$=\"BTN_CLICK\"|UI Disable \"MyButton\" // We can't to click|Wait Key|UI Enable \"MyButton\" // Click enabled||Procedure BTN_CLICK[ ID$ ]|Print \"Click!\"|End Proc||~~~|"},{"name":"UI Disable","descriptions":[{"lang":"en","text":"Disable all the user actions on a UI element."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The UI Disable instruction is used to disable all the user actions on a UI element. You can to enable an element by using the UI Enable instruction.|~~~|// Add a Button linked on the BTN_CLICK procedure|UI Button \"MyButton\", OnClick$=\"BTN_CLICK\"|Wait Key|UI Disable \"MyButton\" // We can't to click||Procedure BTN_CLICK[ ID$ ]|Print \"Click!\"|End Proc||~~~|"},{"name":"UI Value","descriptions":[{"lang":"en","text":"Updates ths value of a UI Component."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier for the component you want to set its value."},{"lang":"en","name":"value$","type":"string","text":"The value used to update the component."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"UI Value can be used to update an existing components value.|~~~|// TextBox example|UI TextBox \"MyTextBox\"|UI Value \"MyTextBox\", value$=\"Updated Value...\"||// Select example|UI Select \"MySelect\", items$=\"1:This is item 1,2:This is item 2,3:This is item 3\"|UI Value \"MySelect\", value$=\"2\"||UI CheckBox \"MyCheckBox\"|UI Value \"MyCheckBox\", value$=\"true\"|~~~|"},{"name":"UI HideTooltip","descriptions":[{"lang":"en","text":"Hides a button tooltip if it is visible"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier for the component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"In some scenarios you may find that a button tooltip stays visible when the component loses focus, you can programmatically hide the tooltip with this instruction.|~~~|UI HideTooltip \"MyButton\"|~~~|"},{"name":"UI Cls","descriptions":[{"lang":"en","text":"Removes all UI Components from the display."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The UI Cls is used to UI components from the display. You can also use the UI Delete to remove individual components.||The UI components are overlayed on top of the AOZ canvas and are not part of an AOZ screen||They use the manifest screen dimensions for sizing and positioning and are not affected by the Cls or Screen commands.|~~~|UI TextBox \"MyTextBox1\"|UI TextBox \"MyTextBox2\"|UI TextBox \"MyTextBox3\"|UI TextBox \"MyTextBox4\"|UI TextBox \"MyTextBox5\"||UI Cls|~~~|"},{"name":"UI Value$","descriptions":[{"lang":"en","text":"Returns the value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier for the component you want to return its value."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"string","text":"The value of the UI component."}],"content":"Used to return the value of a UI component. Not all components have a value parameter. For example, attempting to return the value for a UI Popup components will return an empty value.|~~~|// UI TextBox example|UI TextBox \"MyTextBox\", value=\"The TextBox Value..\"|Print UI Value$(\"MyTextBox\")||// UI Radio|UI Radio \"MyRadio\", items$=\"1:This is radio value 1,2:This is radio value 2,3:This is radio value 3\", value$=\"2\"|Print UI Value$(\"MyRadio\")||// Slider example|UI Slider \"MySlider\"|Print UI Value$(\"MySlider\")|~~~|"},{"name":"UI Property$","descriptions":[{"lang":"en","text":"Returns the value of a UI component property."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"},{"lang":"en","name":"propertyName$","type":"string","text":"The name of a UI Component property"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Property","descriptions":[{"lang":"en","text":"Returns the value of a UI component property."}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"},{"lang":"en","name":"propertyName$","type":"string","text":"The name of a UI Component property"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI X","descriptions":[{"lang":"en","text":"Returns the current 'x' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Y","descriptions":[{"lang":"en","text":"Returns the current 'y' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Width","descriptions":[{"lang":"en","text":"Returns the current 'width' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Height","descriptions":[{"lang":"en","text":"Returns the current 'height' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI FontSize","descriptions":[{"lang":"en","text":"Returns the current 'fontSize' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI FontName$","descriptions":[{"lang":"en","text":"Returns the current 'fontName$' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Padding","descriptions":[{"lang":"en","text":"Returns the current 'padding' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Content$","descriptions":[{"lang":"en","text":"Returns the current 'content$' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Min","descriptions":[{"lang":"en","text":"Returns the current 'min' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Max","descriptions":[{"lang":"en","text":"Returns the current 'max' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Step","descriptions":[{"lang":"en","text":"Returns the current 'step' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Rows","descriptions":[{"lang":"en","text":"Returns the current 'rows' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Placeholder$","descriptions":[{"lang":"en","text":"Returns the current 'placeHolder' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Tooltip$","descriptions":[{"lang":"en","text":"Returns the current 'tooltip$' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI TooltipPlacement$","descriptions":[{"lang":"en","text":"Returns the current 'TooltipPlacement$' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI IconClass$","descriptions":[{"lang":"en","text":"Returns the current 'iconClass$' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Class$","descriptions":[{"lang":"en","text":"Returns the current 'iconClass$' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Type$","descriptions":[{"lang":"en","text":"Returns the current 'type$' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI OnChange$","descriptions":[{"lang":"en","text":"Returns the current 'onChange$' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI OnClick$","descriptions":[{"lang":"en","text":"Returns the current 'onClick$' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Items$","descriptions":[{"lang":"en","text":"Returns the current 'items$' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Src$","descriptions":[{"lang":"en","text":"Returns the current 'src$' value of a UI component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier of an existing UI component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"UI Focus","descriptions":[{"lang":"en","text":"Sets focus to a component"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"id$","type":"string","text":"The unique identifier for the component"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]}]},{"name":"Variables","id":1639692454467,"descriptions":[],"descriptions_file":[{"lang":"en","text":"Instructions and functions to manage variables and arrays in AOZ.<br><br>There are certain elements of a computer program that are set aside to store the results of calculations. The names of these storage locations are known as \"variables\".<br><br>Think of a variable as the name of a place where a value resides, and that the value can change as the result of a calculation made by your computer. Like strings, variables are given their own names, and once a name has been chosen it can be given a value, like this:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">SCORE=100</li><li class=\"ex_code_line\">Print SCORE</li></ul>That example creates a variable with the name of SCORE, and loads it with a value of 100.<br><br><b>Naming variables</b><br>The rules for the naming of variables are very simple. Firstly, all variable names must begin with a letter, so the following variable name is fine:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">AOZStudio2=1</li><li class=\"ex_code_line\">Print AOZStudio2</li></ul><br>But the next name is not allowed:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">2AOZStudio=1</li></ul><br>Secondly, you cannot begin a variable name with the letters that make up one of the AOZ Studio command words, because this would confuse your program. The following variable name is acceptable, because the first letters are not used by one of the AOZ Studio commands:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">FOOTPRINT=1</li><li class=\"ex_code_line\">Print FOOTPRINT</li></ul><br>But the next name is unacceptable, because the computer recognises the first five letters as the command PRINT:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">PRINTFOOT=1</li></ul><br>If you try and type in an illegal variable name, AOZ Studio will spot the mistake, and point it out by splitting the illegal characters away from the rest of the name. A full list of the command words can be found in the Command Index, in Appendix H of this User Guide.<br><br>Variable names can be as short as one character, and as long as 255 characters, but they can never contain a blank space. So the next name is allowed:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">AOZSTUDIO=1</li><li class=\"ex_code_line\">Print AOZSTUDIO</li></ul><br>But this is an illegal variable name:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">AOZ STUDIO=1</li></ul><br>To introduce a name, or split it up, use the \"underscore\" character instead of spaces. For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">IAM_A_LONG_LEGAL_VARIABLE_NAME=1</li><li class=\"ex_code_line\">Print IAM_A_LONG_LEGAL_VARIABLE_NAME</li></ul><br><b>Types of variables</b><br>There are three types of variable that can be used in AOZ programs.<br><br><b>Whole Numbers</b><br>The first of these types is where the variable represents a whole number, like 1 or 9999. These variables are perfect for holding the sort of values used in computer games, for example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">HISCORE=1000000</li><li class=\"ex_code_line\">Print HISCORE</li></ul><br>Whole numbers are called \"integers\", and integer variables can range from -147,483,648 up to 147,483,648.<br><br><b>Real number variables</b><br>Variables can also represent fractional values, such as 1.2 or 99.99 and the results from this sort of variable can be extremely accurate. The accuracy of numbers either side of a decimal point (known as \"floating point\" numbers) is fully explained in Chapter 5.3.<br><br>Real number variables must always have a \"hash\" symbol added to the end of their names, which is typed by pressing the tit] key. For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">REAL_NUMBER#=3.14</li><li class=\"ex_code_line\">Print REAL_NUMBER#</li></ul><br><b>String variables</b><br>This type of variable holds text characters, and the length of the text can be anything from zero up to 65,500 characters long. String variables are enclosed in quotation marks, and are also distinguished from number variables by a $ character on the end of their names, to tell AOZ Studio that they will contain text rather than numbers. For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">NAME$=\"Name\"</li><li class=\"ex_code_line\">GUITAR$=\"Twang\"</li><li class=\"ex_code_line\">Print NAME$,GUITAR$</li></ul><br><b>Storing variables</b><br>All variables are stored in an 8k memory area called a \"buffer\". This area can hold about 2000 numbers or two pages of normal text, and it has been set as small as possible to allow more space for memory banks and screens of graphics. When there is not enough room left to store all of the variables in a program, an error message will appear saying \"Out of variable space\". The size of the storage space for variables can be increased at any time, and the only limit to the size of arrays and string variables is the amount of memory available in your computer.<br><br><b>SET BUFFER</b><br><i>instruction: set the size of the variable area</i><br><b>Set Buffer</b> number of kilobytes<br><br>The SET BUFFER command can be used inside a program to set the new size of the variable area. Simply follow the command with the number of kilobytes required, and you are recommended to increase this value by 5k at a time, until enough space has been reserved in the buffer area. It is important to note that the SET BUFFER command must be the very first instruction in your program, apart from any REM messages.<br><br><b>Arrays</b><br>It is often necessary to use a whole set of similar variables for something like a table of football results or a catalogue for a record collection. Any set of variables can be grouped together in what is known as an \"array\".<br><br>Supposing you have 100 titles in your record collection, and you need to tell AMOS Professional the size of the table of variables needed for your array. There is a special command for setting up this dimension.<br><br><b>Constants</b><br>Constants are a special type of number or string that can be assigned to a variable, or used in a calculation. They are given this name because their value remains constant, and does not change during the course of the program.<br><br>AOZ Studio will normally treat all constants that are fractional numbers (floating point numbers) as whole numbers (integers), and convert them automatically, before they are used. For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">A=3.141</li><li class=\"ex_code_line\">Print A</li></ul><br>Any numbers that are typed into an AOZ program are converted into a special format. When programs are listed, these numbers are converted back to their original form, and this can lead to minor discrepancies between the number that was originally typed in and the number that is displayed in the listing. There is no need to worry about this, because the value of the number always remains exactly the same.<br>"}],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Add","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>instruction: perform fast integer addition</i><br><b>Add</b> variable,expression<br><b>Add</b> variable,expression,base To top<br><br>The ADD command can be used in two way:<br><br><b>With simple variables.</b><br>The ADD command can be used to add the result of an expression to a whole number variable. immediately. It is the equivalent to variable=variable+ expression.<br><br>There is a more complex version of ADD, which is ideal for handling certain loops much more quickly than the equivalent separate instructions. When Base number and Top number parameters are included, ADD is the equivalent to the following lines:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">V=V+A</li><li class=\"ex_code_line\">If V&lt;BASE Then V=TOP</li><li class=\"ex_code_line\">If V>TOP Then V=BASE</li></ul><br>Here is an example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Dim A(10)</li><li class=\"ex_code_line\">For X=0 To 10:A(X)=X:Next X</li><li class=\"ex_code_line\">V=0</li><li class=\"ex_code_line\">Repeat</li><li class=\"ex_code_line\">Add V,1,1 To 10</li><li class=\"ex_code_line\">Print A(V)</li><li class=\"ex_code_line\">Until V=11 : Rem This loop is infinite as V is always <11@code</li></ul><br><b>With objects</b><br>The ADD instruction applied to a variable that contains an object (variables ending with \"@\") add a new object to the object pointed to by the variable.<br><br>This example create a bob and adds the \"Joystick Movement\" object to it.<br><ul class=\"doc_code\"><li class=\"ex_code_line\">MYBOB@ = Bob( 1, 200, 200, 1 )</li><li class=\"ex_code_line\">MYBOB@.Add Joystick Movement, Speed = 300</li></ul>"}],"parameters":[{"lang":"en","name":"variable","type":"variable","text":"The variable to add to"},{"lang":"en","name":"expression","type":"integer","text":"The value to add"},{"lang":"en","name":"base","type":"number","text":"Optional."},{"lang":"en","name":"top","type":"integer","text":"Optional, if specified behavior will be identical to "}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[]},{"name":"Array","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>Not implement in AOZ Studio</i><br><b></b><br><br>The ARRAY function returns the address in memory of the first item in the specified list$ array. This string can contain any data at all, but if the array is to be accessed from an Interface program, each element in the array must be of exactly the same length.<br>"}],"parameters":[{"lang":"en","name":"array","type":"array","text":"The array to get the address from"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"0 until implemented"}],"compatible":" notimplemented"},{"name":"Data","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>structure: place a list of data items in a program</i><br><b>Data</b> list<br><br>A DATA statement lets you include whole lists of useful information in your programs. Each item in the list must be separated by a comma, like this:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Data 1,2,3,4</li></ul><br>Also each DATA instruction must be the only statement on the current line, because anything that follows it will beignored! Prove that with the following line:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Read A$: Print A$</li><li class=\"ex_code_line\">Data \"I am legal\" : Print \"But I am not!\"</li></ul><br>Data can be \"read\" into one or more variables, and unlike many Basic languages, AOZ allows you to include expressions as part of your data. So the following lines of code are all equally acceptable:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Data $FF50,$890</li><li class=\"ex_code_line\">Data %11111111,%110011010110</li><li class=\"ex_code_line\">Data A</li><li class=\"ex_code_line\">Label: Data A+3/2.0-Sin(B)</li><li class=\"ex_code_line\">Data \"AOZ\"+\" Studio\"</li></ul><br>Examine those lines, and note that the A at Label will be input as the contents of variable A, and not the character A. The expression will be evaluated using the latest value of A.<br><br>Data statements may be placed at any position in your program, but any data stored inside an AOZ procedure will not be accessible from the main program. Each procedure can have its own individual set of data statements, which are completely independent from the rest of the program.<br><br>For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">EXAMPLE</li><li class=\"ex_code_line\">Read A$: Print A$</li><br><li class=\"ex_code_line\">Data \"I am Main Program Data\"</li><li class=\"ex_code_line\">Procedure EXAMPLE</li><li class=\"ex_code_line\">Read B$: Print B$</li><li class=\"ex_code_line\">Data \"I am Procedure Data only\"</li><li class=\"ex_code_line\">End Proc</li></ul>"}],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" all"},{"name":"Dec","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>instruction: decrement an integer variable by 1</i><br><b>Dec</b> variable<br><br>This command subtracts 1 to an integer (whole number) variable, using a single instruction to perform the expression variable = variable - 1 very quickly.<br><br>For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">V=10 : Dec V : Print V</li></ul>"}],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" all"},{"name":"Dim","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>instruction: dimension an array</i><br><b>Dim</b> variable name(number,number,number...)<br><br>The DIM command is used to dimension an array, and the variables in your record collection table could be set up with a first line like this:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Dim ARTIST$(99),TITLE$(99),YEAR(99),PRICE#(99)</li></ul><br>Each dimension in the table is held inside round brackets, and if there is more than one element in a dimension each number must be separated from the next by a comma.<br><br>Element numbers in arrays always start from zero, so your first and last entries might contain these variables:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">ARTIST$(0)=\"Aaron Copeland\"</li><li class=\"ex_code_line\">TITLE$(0)=\"Appalachian Spring\"</li><li class=\"ex_code_line\">YEAR(0)=1944</li><li class=\"ex_code_line\">PRICE#(0)=12.99</li><li class=\"ex_code_line\">ARTIST$(99)=\"ZZ Top\"</li><li class=\"ex_code_line\">TITLE$(99)=\"Afterburner\"</li><li class=\"ex_code_line\">YEAR(99)=1985</li><li class=\"ex_code_line\">PRICE#(99)=9.95</li></ul><br>To extract elements from your array, you could then add something like this to your example program:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Print TITLE$(0),PRICE#(0)</li><li class=\"ex_code_line\">Print TITLE$(99),YEAR(99),PRICE#(99)</li></ul><br>These tables can have as many dimensions as you like, and each dimension can have up to 65,0(K) elements. Here are some more modest examples:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Dim LIST(5),NUMBER#(5,5,5),WORD$(5,5)</li></ul><br>"}],"parameters":[{"lang":"en","name":"dimension1","type":"integer","text":"First dimension"},{"lang":"en","name":"dimension2","type":"integer","text":"Second dimension"},{"lang":"en","name":"dimensionX","type":"integer","text":"Any number of dimensions, only limited by memory."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" all"},{"name":"False","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>function: hold value of 0 (False)</i><br>value=<b>False</b><br><br>On modern machines, in all the conditional operations such as IF ... THEN and REPEAT ... UNTIL, the value of 1 is used to represent TRUE, and the value of 0 is used to represent FALSE.<br><br>"}],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"FALSE"}],"compatible":" all"},{"name":"Global","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>structure: declare a list of global variables for procedures</i><br><b>Global</b> list of variables<br><br>GLOBAL sets up a list of variables that can be accessed from absolutely anywhere in your program. This is a simplified single command, designed to be used without the need for an explicit SHARED statement in your procedure definitions. Here is an example<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">A=6 : B=9</li><li class=\"ex_code_line\">Global A,B</li><li class=\"ex_code_line\">TEST1</li><li class=\"ex_code_line\">TEST2</li><li class=\"ex_code_line\">Print A,B</li><li class=\"ex_code_line\">Procedure TESTI</li><li class=\"ex_code_line\"> A=A+1 : B=B+1</li><li class=\"ex_code_line\">End Proc</li><li class=\"ex_code_line\">Procedure TEST2</li><li class=\"ex_code_line\"> A=A+B : B=B+A</li><li class=\"ex_code_line\">End Proc</li></ul><br>AOZ programmers who are familiar with earlier versions of the AMOS system are now able to employ the new facility of using strings in procedure definitions. As with disc names, the \"wild card\" characters * and ? can also be included. In this case, the * character is used to mean \"match this with any list of characters in the variable name, until the next control character is reached\", and the ? character means \"match this with any single character in the variable name\". So the next line would define every variable as global:<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">Global \"*\"</li></ul><br>Now look at the following example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Shared A,\"V*\",\"VAR*END\",\"A?0S*\"</li></ul><br>That line would declare the following variables as shared:<br><ul><br><li>A, as usual.</li><br><li>Any variable beginning with the character V, followed by any other characters, or on its own.</li><br><li>Any variable beginning with the letters VAR, followed by any other characters, and ending with the characters END.</li><br><li>Any variable beginning with A, followed by any single letter, followed by OS, followed by any other characters.</li><br></ul><br>GLOBAL or SHARED should be employed before the first use of the variable, otherwise it will have no effect on an interpreted program, although it will affect programs compiled with the AMOS Professional Compiler.<br><br>Only strings may be used for this technique. Global and shared arrays cannot be defined using wild cards. These must be defined individually, using brackets. Also, if you try to use an expression in this way, an error will be generated.<br>For example:<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">A$=\"AM*\"</li><li class=\"ex_code_line\">Global A$</li></ul>In that case, the A$ variable would be regarded as global, and it would not be taken as a wild card for subsequent use.<br><br>With AOZ Studio, you are able to define global arrays from a procedure, even if the array is not created at root level, as follows:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Procedure VARIABLES</li><li class=\"ex_code_line\"> Dim ARRAY(100,100)</li><li class=\"ex_code_line\"> Global ARRAY()</li><li class=\"ex_code_line\">End Proc</li></ul>"}],"parameters":[{"lang":"en","name":"variable","type":"variable","text":"Variable to share"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" all"},{"name":"Inc","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>instruction: increment an integer variable by 1</i><br><b>Inc</b> variable<br><br>This command adds 1 to an integer (whole number) variable, using a single instruction to perform the expression variable=variable+1 very quickly.<br><br>For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">V=10 : Inc V : Print V</li></ul>"}],"parameters":[{"lang":"en","name":"variable","type":"variable","text":"The variable to increment"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" all"},{"name":"Is Defined","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>structure:detect if a variable has been defined</i><br><b>=Is Defined</b>(a)<br><b>=Is Defined</b>(a#)<br><b>=Is Defined</b>(a$)<br><br>As in Javascript, AOZ allow you to detect if a variable has been defined. This function will only work if you use the tag \"autoVariables\" TODO.<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">#autoVariables: False</li><li class=\"ex_code_line\">Print Is Defined( A$ )\t\t\t// Will print \"False\"</li><li class=\"ex_code_line\">Print A$\t\t\t\t\t\t// Will generate an error</li></ul><br><ul class=\"doc_code\"><li class=\"ex_code_line\">#autoVariables: True</li><li class=\"ex_code_line\">Print Is Defined( A$ )\t\t\t// Will print \"True\"</li><li class=\"ex_code_line\">Print A$\t\t\t\t\t\t// Will not generate an error as A$ was automatically defined as \"\" by the AOZ transpiler.</li></ul>"}],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"TRUE if the variable is defined, FALSE if not"}],"compatible":" notimplemented"},{"name":"Match","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>function: search an array for a value</i><br>x=<b>Match</b>(array(0),value)<br>x=<b>Match</b>(array#(0),value#)<br>x=<b>Match</b>(array$(0),value$)<br><br>MATCH searches through an array that has already gone through the SORT process, looking for a given value. If the value is found then x is loaded with the relevant index number. However, if the search is not successful the result will be negative. If you take the absolute value of this result, the item which came closest to your original search parameter is provided. Only arrays with a single dimension can be checked in this way, and they must already be sorted before MATCH can be called.<br><br>For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Read N : Dim D$(N)</li><li class=\"ex_code_line\">For X=0 To N-1 : Read D$(X) : Next X</li><li class=\"ex_code_line\">Sort D$(0)</li><br><li class=\"ex_code_line\">Do</li><li class=\"ex_code_line\">REINPUT:</li><li class=\"ex_code_line\">Input A$</li><li class=\"ex_code_line\">If A$=\" \"Then End</li><li class=\"ex_code_line\">If A$=\"print all data\"</li><li class=\"ex_code_line\">For X=1 To N: Print D$(X) : Next X: Goto REINPUT</li><li class=\"ex_code_line\">End If</li><li class=\"ex_code_line\">POS=Match(D$(0),A$)</li><li class=\"ex_code_line\">If POS<-N-1</li><li class=\"ex_code_line\">If POS>-10</li><li class=\"ex_code_line\">Print \"Not found. Nearest to \";D$(1) : Goto JMP</li><li class=\"ex_code_line\">Else</li><li class=\"ex_code_line\">Print \"Not found. Nearest to \";D$(N) : Goto JMP</li><li class=\"ex_code_line\">End if</li><li class=\"ex_code_line\">End If</li><li class=\"ex_code_line\">If POS>0 Then Print \"Found \",DS(POS);\" in record \";POS</li><li class=\"ex_code_line\">If POS<0 Then Inc POS : Print \"Not found. Nearest to \":DS(Abs(POS))</li><li class=\"ex_code_line\">JMP:</li><li class=\"ex_code_line\">Loop</li><li class=\"ex_code_line\">Data 8,\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Saturn\",\"Jupiter\",\"Neptune\",\"Tharg\"</li></ul><br>Test that example out by entering various inputs, including the names of planets, single characters in upper and lower case and \"print all data\". Obviously MATCH can be used with the INSTR function to set up a powerful parser routine, for interpreting user input in an adventure game.<br>"}],"parameters":[{"lang":"en","name":"array","type":"array","text":"The array to search"},{"lang":"en","name":"value","type":"any","text":"The value to find. Must be of the same type (number or string) than the array"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"The index of the item if found, -1 if not found"}],"compatible":" all"},{"name":"Read","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>structure: read data into a variable</i><br><b>Read</b> list<br><br>When READ loads items of information that have been stored in a DATA statement into a list of variables, it uses a special marker to jump to the first item in the first DATA statement of your listing. As soon as that item of data has been read, the marker moves on to the next item in the list.<br><br>It must be remembered that the variables to be read must be of exactly the same type as the data held at the current position. If you match up one type of stored data with a different type of variable after a READ command, the appropriate error message will be given. Here is an example of correct matching:<br><br><ul class=\"doc_code\"><li class=\"ex_code_line\">N=Rnd(100)</li><li class=\"ex_code_line\">Read A$,B,C,D$</li><li class=\"ex_code_line\">Print A$,B,C,D$</li><li class=\"ex_code_line\">Data \"Text string\",100,N,\"AOZ\"+\"Studio\"</li></ul>"}],"parameters":[{"lang":"en","name":"variable","type":"variable","text":"The variable to read the data into."}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" all"},{"name":"Restore","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>structure: set the current READ pointer</i><br><b>Restore</b> Label<br><b>Restore</b> LABEL$<br><b>Restore</b> Line<br><b>Restore</b> number<br><br>To change the order in which your data is read from the order in which it was originally stored, you can alter the point where a READ operation expects to find the next DATA statement. The RESTORE command sets the position of this pointer by referring to a particular label or line number, and both labels and numbers may be calculated as part of an expression.<br><br>For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Restore LAST</li><li class=\"ex_code_line\">Read A$</li><li class=\"ex_code_line\">Print A$</li><li class=\"ex_code_line\">Data \"First\"</li><li class=\"ex_code_line\">Data \"Middle\"</li><li class=\"ex_code_line\">LAST:</li><li class=\"ex_code_line\">Data \"Last\"</li></ul><br>Each AOZ procedure has its own individual data pointer, so any calls to the command will apply to<br>the current procedure only.<br><br>RESTORE is one of the AOZ programmer's most useful devices to force the computer to select information, depending on the actions of the user. It can be used for educational and business routines as well as adventure and role-playing games.<br>"}],"parameters":[{"lang":"en","name":"*label","type":"label","text":"Indicate the position int he source code to restore to"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" all"},{"name":"Shared","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>structure: define a list of global variables</i><br><b>Shared</b> list of variables<br><br>There is an alternative method of passing data between a procedure and the main program. When SHARED is<br>placed inside a procedure definition, it takes a list of local variables separated by commas and transforms them into global variables, which can be directly accessed from the main program. Of course, if you declare any arrays as global using this technique, they must already have been dimensioned in the main program.<br><br>For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">A=666: B=999</li><li class=\"ex_code_line\">Print A,B</li><li class=\"ex_code_line\">Procedure EXAMPLE</li><li class=\"ex_code_line\">\tShared A,B</li><li class=\"ex_code_line\">\tA=B-A: B=B+1</li><li class=\"ex_code_line\">End Proc</li></ul>EXAMPLE can now read and write information to the global variables A and B.<br><br>If you need to share an array, it should be defined as follows:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Shared A(),B#(),C$()</li></ul><br>In a very large program, it is often convenient for different procedures to share the same set of global variables. This offers an easy way of transferring large amounts of information between your procedures.<br>"}],"parameters":[{"lang":"en","name":"variable","type":"variable","text":"Variable to share"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" all"},{"name":"Sort","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>instruction: sort all elements in an array</i><br><b>Sort</b> a(0)<br><b>Sort</b> a#(0)<br><b>Sort</b> a$(0)<br><br>The SORT instruction arranges the contents of any array into ascending order, and the array may contain integers, floating point numbers or strings.<br><br>The starting point of your table is specified by the a$(0) parameter, and it must always be set to the first item in the array, which is item number zero. For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">N=5 : P=0</li><li class=\"ex_code_line\">Dim A(N)</li><li class=\"ex_code_line\">Print \"Type in \";N,\" numbers, or enter 0\"</li><li class=\"ex_code_line\">Print \"to stop entry and begin sort\"</li><li class=\"ex_code_line\">Repeat</li><li class=\"ex_code_line\">\tInput A(P)</li><li class=\"ex_code_line\">\tIf A(P)=0</li><li class=\"ex_code_line\">\t\tDec P</li><li class=\"ex_code_line\">\t\tExit</li><li class=\"ex_code_line\">\tEnd If</li><li class=\"ex_code_line\">\tIf P=N-1 Then Exit</li><li class=\"ex_code_line\">\tInc P</li><li class=\"ex_code_line\">Until False</li><li class=\"ex_code_line\">Sort A(0)</li><li class=\"ex_code_line\">For X=N-P To N</li><li class=\"ex_code_line\">\tPrint A(X)</li><li class=\"ex_code_line\">Next X</li></ul>"}],"parameters":[{"lang":"en","name":"array","type":"array","text":"The array to sort"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" all"},{"name":"Swap","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>structure: swap the contents of two variables</i><br><b>Swap</b> a,b<br><b>Swap</b> a#,b#<br><b>Swap</b> a$,b$<br><br>Use the SWAP command to swap over the data between any two variables of the same type. For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">A=10 : B=99: Print A,B</li><li class=\"ex_code_line\">Swap A,B : Print A,B</li></ul>"}],"parameters":[{"lang":"en","name":"variable1","type":"variable","text":"First variable"},{"lang":"en","name":"variable2","type":"variable","text":"Second variable"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" all"},{"name":"True","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>function: hold value of -1 (True)</i><br>value=<b>True</b><br><br>On modern machines, in all the conditional operations such as IF ... THEN and REPEAT ... UNTIL, the value of 1 is used to represent TRUE, and the value of 0 is used to represent FALSE.<br><br>In Amiga and Atari emulation, the value of True is 1.<br>"}],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True"}],"compatible":" all"},{"name":"Varptr","descriptions":[],"descriptions_file":[{"lang":"en","text":"<i>function: read the address of a variable</i><br>address=<b>Varptr</b>(variable)<br><br>This useful function returns the location of any AOZ variable in the memory. Programmers familiar with C should find it very similar to the & (ampersand) operator in that language.<br><br>VARPTR provides back-door access to your variables, and with careful use you are able to get to them directly, without having to rely on standard routines. This is especially valuable with procedures, because if procedures are loaded with the address of a variable instead of its actual value, that variable can be changed from inside the procedure. For example:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">TEST=0</li><li class=\"ex_code_line\">Rem Correct use of square brackets</li><li class=\"ex_code_line\">ANSWER[Varptr(Test)] : Rem Load ADDRESS of variable into AD parameter</li><li class=\"ex_code_line\">Print TEST</li><li class=\"ex_code_line\">Procedure ANSWER[AD]</li><li class=\"ex_code_line\">Loke AD,42 : Rem Copy new value into variable, by back door!</li><li class=\"ex_code_line\">End Proc</li></ul><br>There should be few problems encountered when reading the variables, but changing them is a very hazardous process!<br><br>The slightest error made in your address calculations will crash AOZ Studio, so it is vital to <b>save your programs before attempting to change your variables in this way.</b><br><br>With machine code programs, VARPTR can also be used to manipulate entire strings or arrays directly. Each type of variable is stored in its own individual format, as listed below.<br><br><b>Integers</b> are held as a simple group of four bytes. They can be read from your Basic program using LEEK, and altered by LOKE. Here is an example of this (dangerous) method:<br><ul class=\"doc_code\"><li class=\"ex_code_line\"> ANSWER=43 : Rem Load a variable</li><li class=\"ex_code_line\"> AN=Varptr(ANSWER) : Rem Find address of variable</li><li class=\"ex_code_line\"> Loke AN,LEEK(AN)-1 : Rem Equivalent to ANSWER=ANSWER-1</li><li class=\"ex_code_line\"> Print ANSWER</li></ul><br><b>Floating point numbers</b> are stored as four bytes, using the special Fast-Floating point format. However, if DOUBLE PRECISION is being used, floating point numbers are held as a group of eight bytes in IEEE double precision format.<br><br><b>Strings</b> are stored' as a series of characters in standard Ascii format. The address given by VARPTR points to the first character in the string, and this can be examined with PEEK or replaced using POKE. Note that the length of the string is contained in two bytes immediately before the string. This means that it can be loaded into Basic using a line like this:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Print Deek(Varptr(A$)-2) : Rem Equivalent to Print Len(A$)</li></ul><br>One application of this function is to return the Ascii value of a single character in an AMOS Professional string. The standard method is to make use of the ASC and MID$ functions, like this:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">A=Asc(Mid$(A$),C,1) : Rem Return Ascii code of character C in A$</li></ul><br>Using VARPTR, that could be replaced by the following line:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">A=Peek(Varptr(A$)+C)</li></ul><br>To avoid danger, special precautions must be taken before new values are poked into a string. During the course of a program, the address of a string may change many times, so it is vital to load the current address of a string using VARPTR immediately before that string is used.<br><br>AOZ Studio regularly reorganises all strings in memory, using a \"garbage collection\" process. This frees valuable space needed for variables, and is essential for the smooth running of the system. But if you wish to pass the address of a string as a procedure garbage collection can play havoc. The obvious solution is to collect the garbage before the address is calculated, using a simple line like this:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">X=Free</li></ul><br>The address of the string can now be established, and passed to the procedure. So providing strings themselves are not used in the procedure, you should remain safe.<br><br>Another hazard can be encountered if you try to POKE values straight into a string.<br>Try<br><ul class=\"doc_code\"><li class=\"ex_code_line\">A$=\"123456789\": Rem Define a string of characters</li><li class=\"ex_code_line\">For C=0 To Len(A$)-1</li><li class=\"ex_code_line\">AD=Varptr(A$) : Rem Get the address</li><li class=\"ex_code_line\">V=Peek(AD+C) : Rem Get Ascii value of current element</li><li class=\"ex_code_line\">Poke AD+C,V+1 : Rem Add 1 to it</li><li class=\"ex_code_line\">Next C</li><li class=\"ex_code_line\">Print A$</li></ul><br>When you return to the Editor, you will discover that your listing has been changed!- AOZ Studio is trying to save space by storing your string in the program listing, rather than the standard variable \"buffer\". This problem can be solved by loading the first character into the start of the string, then adding the remaining characters later.<br>Here is how:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">A$=\"1\" : Rem Set up the first character</li><li class=\"ex_code_line\">A$=A$+\"23456789\" : Rem Now add remaining characters</li></ul>This fools AOZ Studio into creating a separate copy of the string in the variable buffer.<br><br><b>Numerical arrays</b> are stored as a simple list of values, with each dimension stored in turn. Look at the following array:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Dim TEST(3,3)</li></ul>That array is held in the following order:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">0,0 0,1 0,2 0,3</li><li class=\"ex_code_line\">1,0 1,1 1,2 1,3</li><li class=\"ex_code_line\">2,0 2,1 2,2 2,3</li><li class=\"ex_code_line\">3,0 3,1 3,2 3,3</li></ul><br>So to return the address of the first value of the array, you would use this:<br><ul class=\"doc_code\"><li class=\"ex_code_line\">Varptr TEST(0,0)</li></ul><br><b>String arrays</b> are more complex, because their length needs to change whenever one of their elements is assigned to a new value. The only way of ensuring total safety is to avoid them altogether! If you ignore this advice and try to access them using VARPTR, you are risking real danger.<br>"}],"parameters":[{"lang":"en","name":"variable","type":"variable","text":"Variable to get the \"address\" from"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"A magic number referencing the variable"}],"compatible":" notimplemented"}]},{"name":"Zones Commands","id":1639692454479,"descriptions":[{"lang":"en","text":"Instructions and functions to handle and detect zones"}],"descriptions_file":[],"author":"Francois Lionet","since":"","last":"","deprecated":[],"keywords":[],"pages":[{"name":"Reserve Zone","descriptions":[{"lang":"en","text":"Reserve memory to store graphical detection zones in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*number","type":"integer","text":"The number of zones to allocate. If ommited all zones will be erased (not deprecated without parameter)"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"content":"The RESERVE ZONE instruction must be used to allocate enough memory for the exact number of zones required,|before a SET ZONE command is given. There is no limit to the number that can be specified, apart from the amount|of available memory.||To erase all current zone definitions and restore the allocated memory to the main program, simply give the|RESERVE ZONE command without any number parameter.||"},{"name":"Reset Zone","descriptions":[{"lang":"en","text":"Erase the definition of a zone, making it non-detectable"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"*index","type":"index","text":"The index of the zone to reset, if ommited all zones will be reset"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"This command is used to nullify a zone created by the SET ZONE instruction. On its own, RESET ZONE|permanently de-activates all zone settings, but if it is qualified by a zone number, only that zone will be erased.|"},{"name":"Zone$","descriptions":[{"lang":"en","text":"Return a magical string to use in the Print instruction when printing text, allowing you to define a zone around the text included as a parameter"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"text$","type":"string","text":"The text to print, the zone will de defined from the top-left corner of the first character to the bottom-right corner of the last character. Warning"},{"lang":"en","name":"index","type":"index","text":"The index of the zone to set"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"The AOZ Studio programmer is allowed to create powerful dialogue boxes and on- screen control panels|without the need to employ complex programming. The ZONES function surrounds a section of text with its own|screen zone, so that the presence of the mouse pointer can be detected using the ZONE function. Simply supply the|two parameters in brackets, which are the string of text for one of your control \"buttons\", followed by the number of|the screen zone to be defined.||The maximum number of zones will be limited by the value specified in a previous RESERVE ZONE command.|The format for the control string is as follows (please notice that the string is different than the one used in AMOS):|~~~|Chr$(27)+\"Z1\" + index + '\\r' + A$ + Chr$(27) + \"Z2\\r\"|~~~|"},{"name":"Set Zone","descriptions":[{"lang":"en","text":"Define a new zone in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the zone to set"},{"lang":"en","name":"x1","type":"integer","text":"The horizontal coordinate of the top-left corner of the zone rectangle"},{"lang":"en","name":"y1","type":"integer","text":"The vertical coordinate of the top-left corner of the zone rectangle"},{"lang":"en","name":"x2","type":"integer","text":"The horizontal coordinate of the bottom-right corner of the zone rectangle"},{"lang":"en","name":"y2","type":"integer","text":"The vertical coordinate of the bottom-right corner of the zone rectangle"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz, stos, amos","content":"After memory has been allocated with the RESERVE ZONE command, SET ZONE is used to define a rectangular|area of the screen which can be tested by the various ZONE functions. The command is followed by the number of|the new zone, followed by its coordinates from top left to bottom right-hand corner.|"},{"name":"Zone","descriptions":[{"lang":"en","text":"Check if a given coordinate lays inside of a pre-defined zone"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the zone to test"},{"lang":"en","name":"x","type":"integer","text":"Horizontal coordinate to test"},{"lang":"en","name":"y","type":"integer","text":"Vertical coordinate to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"boolean","text":"True if the given coordinate lay inside of the zone, False if not"}],"compatible":" aoz, stos, amos","content":"The ZONE function is used to give the number of the screen zone at the specified screen coordinates x,y. These|coordinates are normally relative to the current screen, but an optional screen number can be included before the|coordinates.||After the ZONE function has been called, the number of the first zone at these coordinates will be returned, or False will be given if no zone is detected.||This function can be used with the X BOB and Y BOB functions to detect whether or not a Bob has entered a specific screen zone, as follows:|~~~|N=Zone(X Bob(n),Y Bob(n))|~~~|"},{"name":"Mouse Zone","descriptions":[{"lang":"en","text":"Return the index of a predefined zone (with \"Set Zone\") under the mouse"}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"-1 if the coordinate lay outside of all the zones, or the index of the zone if they lay inside of one"}],"compatible":" aoz, stos, amos"},{"name":"Zone On","descriptions":[{"lang":"en","text":"Enable a zone in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the zone to enable"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This instruction restores the detection of a specific zone after it has been disabled.|"},{"name":"Zone Off","descriptions":[{"lang":"en","text":"Disable a zone in the current screen"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the zone to disabled"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[],"compatible":" aoz","content":"This instruction allow you to turn off a specific zone: after using it, the zone will not be detected anymore.||"},{"name":"Zones Length","descriptions":[{"lang":"en","text":"Returns the number of zones defined for the current screen."}],"descriptions_file":[],"parameters":[],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"integer","text":"Returns the number of zones defined for the current screen."}],"compatible":" aoz"},{"name":"Zone Enabled","descriptions":[{"lang":"en","text":"Return True if the zone is enabled, or False"}],"descriptions_file":[],"parameters":[{"lang":"en","name":"index","type":"index","text":"The index of the zone to test"}],"exceptions":[],"deprecated":[],"keywords":[],"since":"","last":"","return":[{"lang":"en","type":"bool","text":"Return True if the zone is enabled, or False"}],"compatible":" aoz","content":"~~~|Reserve Zone 10|Print \"Hello\" + Zone$( \"AOZ\", 1 )|Print Zone Enabled( 1 )\t\t\t// Will print \"True\"|Wait Key|Zone Off 1|Print Zone Enabled( 1 )\t\t\t// Will print \"False\"|~~~|"}]}]}