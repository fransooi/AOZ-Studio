<i>Choice</i>
<b>Choice</b> xxxxxxx
=
CHOICE will return True if the menu has been highlighted by the user, otherwise False is returned.

After the status of your menu is tested, the value held by CHOICE is automatically re-set to zero.
- CHOICE(1) will return the value of the title number which has been chosen.
- CHOICE(2) will return the value of the option number which has been selected.

Now remove the Wait Key from the last example, and replace it with the following lines. This should change the
shape of the mouse cursor, depending on the option selected from your menu. Note that Choice=-1 can be simplified
to Choice.
@code
Do
If Choice and Choice(1)=1 Then Exit
If Choice(1)=2 and Choice(2)<>0 Then Change Mouse Choice(2)
Loop
@code
###Creating advanced menus

The use of MENU$ and CHOICE is not limited to the creation of simple menus. In fact, their use can be extremely
sophisticated.

MENU$ is used to define the appearance of each individual item in one of your menus, whether it is a title, an
option, a sub-option, all the way down to the eighth layer of options in the menu hierarchy. In this Chapter, when
single item parameters is used it simply means those numbers separated by commas and held inside a single pair
of brackets, that refer to the position of a single item somewhere in the menu. Up to eight parameters can be used,
separated by commas. To make sure that is clear, here are some examples of parameters defining the position of a
single item in the menu hierarchy:
@code
Menu$(1)="Title1"
Menu$(1 ,1)="Title1 Option1"
Menu$(2,3)="Title2, Option2"
Menu$(1,1,1,1)="Title1, Option1, Sub-option1, Sub-sub-option1"
@code
Now look at these uses of MENU$, which are used to give a single item its own characteristics:


