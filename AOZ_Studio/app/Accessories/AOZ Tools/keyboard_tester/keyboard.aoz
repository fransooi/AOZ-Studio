#splashScreen: false
#manifest: "aoz" // Change #manifest to see keyboard differences between platforms.
Version$="v0.92"

/*

	AOZ Keyboard tester - Brian Flanagan, August 2020
	Tests Key Sate(n), Key Shift, ScanShift, Inkey$ functions.

    In "aoz" mode, you get simulated scan codes from 0 to 255 generated by the standard
	JavaScript Keyboard API.  In "amiga" mode, you get simulated scan codes from 0 to 127,
	based on the real Amiga computers' scan codes.  (For keys not normally in the Amiga
	keymap, the new key codes have been added when possible.)

*/

  //
 // Platform-specific setup
//
If Manifest$ = "amiga"
	#displayHeight: 256
	#displayWidth: 324
	scrWidth#=324 : scrHeight# = 256
	Screen Open 0,scrWidth#,scrHeight#,32,Lowres
	charWidth# =X Graphic(1) : textCols# = scrWidth# / charWidth#
	charHeight#=Y Graphic(1) : textRows# = scrHeight# / charHeight#
	Palette 0,$FFF,$777,$FF0,$F00,$0FF,$0F0
	leftShift = 1 : rightShift=2
	leftCtrl=8 | $8000 : rightCtrl=8 // both have the 8 bit since on Amiga there was only one
	// control key.
	leftAlt=$10 : rightalt=$20 // 16,32 (32 is correct for Amiga)
	leftMeta=$40 : rightMeta=$80 // 64,128
	' lockable shift states
	capsLock=$4
	numLock=$200 // 512
	scrollLock=$400 // 1024
	funcLock=$800 // 2048
	separatorOffset=Y Graphic(6.5)+1 ' was Y Graphic(7)+1
Else  // aoz mode char size = 24 x 43.2 pixels
	 // text cols = 960/24 = 40 columns
    // text rows = 1024/32 = 32 lines
//	Print "Just entered the ELSE."
//	Wait Key

	#displayWidth: 1924 ' was 960
	#displayHeight: 1383 ' I had to lie to AOZ to get this working.
	scrWidth#=966 : scrHeight#=1383 ' scrHeight# = 1383
	Screen Open 0,scrWidth#*2,scrHeight#,8,Lowres,lines=32 ' 1383 high, 43.2 pixel char height, 24 px char width
	charWidth# =X Graphic(1) : textCols# = scrWidth# / charWidth#
	charHeight#=Y Graphic(1) : textRows# = scrHeight# / charHeight#
	Screen Scale 2,1
	Screen Display 0,0,0,,
	Palette 0,$FFFFFF,$777777,$FFFF00,$FF0000,$00FFFF,$00FF00
	leftShift=1 : rightShift=2
	leftCtrl=4 : rightCtrl=8
	leftAlt=$10 : rightAlt=$20 // 16,32
	leftMeta=$40 : rightMeta=$80 // 64, 128
' lockable shift states
	capsLock=$100	// 256
	numLock=$200	// 512
	scrollLock=$400	// 1024
	funcLock=$800	// 2048
	separatorOffset=Y Graphic(6.5)
End If
  //
 // Main code starts here.
//
xOfs=1 : yOfs=5
Cls 0 :  Paper 0 : Curs Off : Flash Off
Ink 1
  //
 // Window borders
//
If Manifest$="aoz"
	Box 0,0 To Screen Width-scrWidth#-4,Screen Height-1 // border around window
Else
	Box 0,0 To Screen Width,Screen Height-1 ' Screen Width-scrWidth#,Screen Height-1
End If

Draw 0,Screen Height - separatorOffset To Screen Width-1,Screen Height - separatorOffset
  //
 // Fixed display elements
//
' Key State(n) display
Locate 1,1 : Pen 1 : Print "AOZ Key State/Key Shift test (";Left$(manifest$,7);")"
Locate 1,3 : Pen 5 : Print "Key State(n) "; : Pen 6 : Print "' n shown in hex below."

' Warning!
warningMsg$="Click in window before pressing keys!"
Locate 1,17 +yOfs: Pen 4 : Print warningMsg$
Repeat
Until Mouse Key <> 0
Locate 1,16+yOfs : Pen 4 : Print Space$(Len(warningMsg$)) // +1 compensates for space$ bug
Locate 1,17+yOfs : Print "Edit manifest tag to switch platform."
' Key Shift display.'

Pen 2
Locate 1,19+yOfs : Print Version$
Pen 5
Locate 12,18+yOfs : Print "Key Shift"
Locate 12,19+yOfs : Print "ScanShift"
Pen 1
Locate 1,21+yOfs : Print "      Lft Rit"
Locate 1,22+yOfs : Print "Shift"
Locate 1,23+yOfs : Print "Ctrl"
Locate 1,24+yOfs : Print "Alt"
Locate 1,25+yOfs : Print "Meta"
' lockable keys
Locate 15,22+yOfs : Print "Caps"
Locate 15,23+yOfs : Print "Scroll"
Locate 15,24+yOfs : Print "Num"
Locate 15,25+yOfs : Print "Func"

/*
Wind Open 1, 33+xOfs,5,6,12,0
Print "View"
Screen 0
*/

Locate 33+xOfs,5 : Print "View"
Locate 33+xOfs,6 : Print "multi"
Locate 33+xOfs,7 : Print "key"
Locate 33+xOfs,8 : Print "press"
Locate 33+xOfs,9 : Print "combos"
Locate 33+xOfs,10 : Print "in"
Locate 33+xOfs,11 : Print "this"
Locate 33+xOfs,12 : Print "table"
Locate 33+xOfs,14 : Print "Hard-"
Locate 33+xOfs,15 : Print "ware"
Locate 33+xOfs,16 : Print "depen-"
Locate 33+xOfs,17 : Print "dent."

'
Pen 5
Locate 23,27 : Print "Inkey$"
Locate 23,28 : Print "ScanCode"
Locate 23,29 : Print "Key Name$"
  //
 // Main code
//
Screen 0 : Pen 2
prevShift=0
prevSS=0
KN$="" : SS=0 : IK$=""
oldKN$=""

Do
	IK$=Inkey$ : SS=ScanShift : SC=ScanCode
	For r=0 To 15
		For c=0 To 15
			locate c*2+xOfs,r+yOfs
			KS = Key State(r*16+c)
			If KS Then Pen 3 : Print Right$(Hex$(r*16+c,2),2) Else Pen 2 : Print " 0" // show hex of key  state
		Next c
	Next r

	KSH = Key Shift
	If  KSH <> prevShift
		Locate 23,18+yOfs : Pen 3 :  Print Right$(Bin$(KSH,16),16) : prevShift = KSH
		ShowBit[8,22+yOfs,KSH & leftShift] : ShowBit[12,22+yOfs,KSH & rightShift] ' Shifts
		ShowBit[8,23+yOfs,KSH & leftCtrl] : ShowBit[12,23+yOfs,KSH & rightCtrl] ' Ctrls
		ShowBit[8,24+yOfs,KSH & leftAlt] : ShowBit[12,24+yOfs,KSH & rightAlt] ' Alts
		ShowBit[8,25+yOfs,KSH & leftMeta] : ShowBit[12,25+yOfs,KSH & rightMeta] ' Metas
		// locking keys
		ShowBit[21,22+yOfs,KSH & capsLock]
		ShowBit[21,23+yOfs,KSH & scrollLock]
		ShowBit[21,24+yOfs,KSH & numLock]
		ShowBit[21,25+yOfs,KSH & funcLock]
	End If
	  //
	 // Just started adding this for Inkey$
	//
	KN$=Key Name$
	If IK$ <> "" // Inkey$ changed
		Locate 23,19+yOfs : Pen 3 : Print Right$(Bin$(SS,16),16) : prevSS = SS ' ScanShift should only change on Inkey$
		Locate 30,27 : Pen 3
		If IK$ >= " " And IK$ <= Chr$(255) Then Print IK$; Else Print " "; // show printable characters
		// Either way, show ASC(IK$)
		If IK$<>Chr$(0)
			Print " ";Hex$(Asc(IK$),2);
			Print Using "(###)";Asc(IK$)
		Else
			Print "      "
		End If
		Locate 23,26 : maxLen=16 : L$=Left$(KN$,maxLen) : Print L$;Space$(maxLen-Len(L$))
		Locate 32,28 : Print Hex$(SC,2); : Print Using "(###)";SC
	End If
	If (KN$ <> oldKN$) And (KN$ <> "")
		Pen 3 : Locate 23,30 : maxLen=16 : L$=Left$(KN$,maxLen) : Print L$;Space$(maxLen-Len(L$))
		oldKN$=KN$
	End If
	Wait Vbl
Loop

Procedure ShowBit[x,y,status]
	Locate x,y : If status Then Print "X" Else Print " "
End Proc
