{
    amiga_specific_commands: //TODO
    { 
        name: "Amiga-specific Commands"
        intro:"TODO"
        conclusion: ""
        commands:
        {
            "set_hardcol":
            [
                This command is available to experienced Amiga programmers, and it permits Sprite collision detection using the computer's hardware. SET HARDCOL cannot be used with computed Sprites, so only Sprites zero to 7 may be
monitored for collision.
            ""
The CLXCON register is set for hardware Sprite collision detection using two parameters. Bitmap1 is an enabler,
that sets bits 12,13,14 and 15 of the CLXON register, and bitmap2 determines the comparison itself, setting bits zero
to 5. Please refer to your hardware manual for a technical explanation of this register.
            ]
            "copper_on":
            [
                The COPPER ON command re-starts all standard copper calculations, and returns AOZ Studio back to
normal. The experts (and foolhardy) may now continue.
            ]
            "copper_off": //TODO
            [
                
                '''
                ~~~                

                ~~~
                '''
            ]
            "cop_swap":
            [
                The COP SWAP command switches over the logical and physical copper lists. The new copper list will now be flicked into place, and the results will be shown after the next vertical blank period. For example:
                '''
                ~~~                
		Cop Swap : Wait Vbl
                ~~~
                '''
            ]
            "cop_reset":
            [
                This command is used to add a pair of MOVE commands, forcing the copper list to re-start from the very first instruction. This may be used to generate simple loops.

            ]
            "cop_wait":
            [
                The COP WAIT command enters a WAIT instruction at the current position in the copper list. WAIT forces the copper to stop in its tracks until the screen has been drawn at the specified hardware coordinates x,y. The copper
then continues from the next instruction in the copper list.
            ""

WAIT is usually called immediately before a MOVE command, creating a pause until the display reaches a specific
screen line. The MOVE instruction is then used to change the attributes of the screen area below this line. Rainbows
are an excellent example of this technique, with each line of the rainbow generated with a pair of commands like
this:
                '''
                ~~~                
		Cop Wait 0,Y : Rem Y is starting coordinate of next colour shift
		Cop Move $180,$777 : Rem $180 is address of colour 0 and $777 is new colour
                ~~~
                '''
The x-coordinate is a hardware coordinate from 0 to 448. Since the Amiga is only capable of performing this test
every four screen points, this coordinate is rounded to the nearest multiple of four.
            ""
                The y-coordinate can be any value from 0 to 312. Normally, coordinates from 256 to 312 require special
programming, but AOZ Studio generates the correct instructions automatically, so there is no need for
concern! Here are some examples:
                '''
                ~~~                
		Cop Wait 0,130: Rem Wait for screen to reach hardware coords 0,100
		Cop Wait 0,300: Rem Wait for line 300
		Cop Wait 12,10: Rem Wait for coordinates 12,10 to arrive
                ~~~
                '''
                The optional xmask and ymask parameters are bit-mask values which allow for a pause until the screen coordinates satisfy a specific combination of bits. The default value is $1FF. For example:
                '''
                ~~~                
		Cop Wait 0,2,$1FF,%11 : Rem Await next EVEN scan line
                ~~~
                '''
   	         ]
            "cop_movel":
            [
                This is a special option from AOZ Studio Basic, which generates a matched pair of MOVE commands in
the new copper list. These load a 32-bit (long word) value into the selected address, exactly like a normal LOKE
instruction.
            ]
            "cop_move":
            [
                MOVE is an internal instruction used by the copper, and it is very similar to the AOZ Studio DOKE
command. It inserts a MOVE command into the current logical copper list, by copying a value from 0 to 65535 into
the selected register address. The address refers to a copper register from $7F to $1BE.

            ]
            "cop_logic":
            [
                This command returns the absolute address of the logical copper list in memory. It can be used to manipulate the
copper list directly from AOZ Studio Basic. Lists can also be generated by using assembly language.

            ]
            "psel$": //TODO
            [
                
                '''
                ~~~                

                ~~~
                '''
            ]
            "mult_wait":
            [
                The MULTI WAIT instruction should be used in the main loop of an AOZ Studio program. It forces a
multi-task WAIT VBL for situations such as waiting for a menu item to be selected.
            ""
This command should not be used to achieve accurate screen synchronisation, as it has been specifically provided
for multi-tasking and may skip several vertical blank periods, depending on the number of tasks being run
simultaneously.
                '''
                ~~~                

                ~~~
                '''
            ]
            "amos_to_front": 
            [
                Similarly, this instruction forces AOZ Studio back onto the display, leaving the Workbench environment
hidden.

            ]
            "amos_to_back": 
            [
                This instruction allows other programs to be accessed, by bringing forward the Workbench display and hiding
AOZ Studio from view.

            ]
            "amos_here":
            [
                AMOS HERE is used to provide a simple report. A value of -1(True) is returned if AOZ Studio is currently
displayed, otherwise zero (False) indicates that the Workbench is in view.

            ]
            "amos_lock":
            [
                The AMOS LOCK command disables the facility to toggle between AOZ Studio and the Workbench by
pressing [Amiga]+[A]. This can be used to prevent other users from discovering how your program was written!

            ]
            "close_workbench":
            [
                This command closes the Workbench screen, saving about 40k of memory, and freeing it for your own programs!
Prove this now, as follows:
                '''
                ~~~                
		Print Chip Free, Fast free
		Close Workbench
		Print Chip Free, Fast Free
                ~~~
                '''
CLOSE WORKBENCH can be executed from inside an AOZ Studio program, or from Direct Mode, but it
will not work if there is a CLI window opened. To solve this problem, ensure that AOZ Studio loads using
the following CLI instruction:
                '''
                ~~~                
		run>nil:AMOSPro
		ENDCLI
                ~~~
                '''
            ]
            "set_buffer":
            [
                The SET BUFFER command can be used inside a program to set the new size of the variable area. Simply follow the command with the number of kilobytes required, and you are recommended to increase this value by 5k at a
time, until enough space has been reserved in the buffer area. It is important to note that the SET BUFFER
command must be the very first instruction in your program, apart from any REM messages.

            ]
            "equ":
            [
                The EQU function returns any standard equate value used by the Amiga system libraries. The equate can represent anything from an offset to a structure, or even the names of various bit- masks. Provided that it is supplied in the standard Amiga include files, it will be available from AOZ Studio immediately. The only exceptions to this
rule are the library offsets, and these should be obtained with the LVO function.
            ""
The name of the equate should be specified in brackets, and refers to the name as set out in your reference manuals.
This name is case sensitive, as explained above, so care should be taken. It is also important to remember that the
name string must be a constant, and that expressions are not allowed! In fact, the technique is extremely simple.
This example would send a WRITE command to a device:
                '''
                ~~~                
		DEV D0(channel,EQU("CMD_WRITE"))
                ~~~
                '''
            ]
            "lvo":
            [
                This function returns the Library Vector Offset associated with a specified function. The function name will be
translated automatically when your program is tested for the first time, and it will be placed in a memory bank for
future use. Set up the memory bank with a SET EQUATE BANK command first, otherwise an error message will
be generated. If the function name does not exist, an "Equate not found error" will be given from the Editor.
            ""
The function name is in standard Commodore format, and should be typed in exactly as it appears in your reference
manuals. This is especially important regarding the way upper case letters are treated differently from their lower
case equivalents. For example, Input, INPUT and input are separate keywords, only the first version will be
accepted, and either of the alternatives will generate an error when the program is tested!"
Also note that because the function is executed during the testing process, it must be a simple string rather than an
expression. For example, if you need to call the FindTask option from Exec, you would use a line like this:
            ""
Also note that because the function is executed during the testing process, it must be a simple string rather than an
expression. For example, if you need to call the FindTask option from Exec, you would use a line like this:"
                '''
                ~~~                
		TASK=Execall(Lvo("FindTask"))
                ~~~
                '''
            ]
            "set_double_precision":
            [
                Double precision should be set at the start of your program, and all floating point calculations will be performed
using the more accurate mode. Because the two modes are completely separate, single precision and double
precision modes cannot be mixed in the same program.

            ]
            "request_wb":
            [
                This command is used to switch to the Workbench system requester. As soon as one of the options is selected from it, you will be returned to AOZ Studio. Please note that if the Requester Extension is deleted from the
extension list by means of the configuration file, then the standard Workbench requester will be used for displaying
messages. This will give the illusion that AOZ Studio has crashed when a requester appears. If this situation
occurs, simply press [Amiga]+[A] to return to the Workbench, respond to the requester and press [Amiga]+[A] again
to return to AOZ Studio. There should be no need to delete the Requester extension unless memory is very
low.

            ]
            "request_on":
            [
                This is the default setting, and is used to make AOZ Studio employ its own requester routine.
            ]
            "request_off":
            [
                If this instruction is used, AOZ Studio will automatically select the [CANCEL] button of the requester, and the actual requester will not be displayed. This is ideal for error trapping Within a program.
                '''
                ~~~                

                ~~~
                '''
            ]
        }
    }
}
