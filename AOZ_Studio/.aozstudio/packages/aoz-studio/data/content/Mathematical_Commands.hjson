{
    mathematical_commands:
    { 
        name: "Mathematical Commands"
        intro: ""
        conclusion: ""
        commands:
        {
            "fix":
            [
                The FIX command changes the way floating point numbers are displayed on screen, or output to a printer. The
precision of these floating point numbers is determined by a number (n) that is specified in brackets, and there can
be four possibilities, as follows:
                ""
- If (n) is greater than 0 and less than 16, the number of figures shown after the decimal point will be n.
- If (n) equals 16 then the format is returned to normal.
- If (n) is greater than 16, any trailing zeros will be removed and the display will be proportional.
- If (n) is less than 0, the absolute value ABS(n) will determine the number of digits after the decimal point, and
all floating point numbers will be displayed in exponential format.
""
Here are some examples:

                '''
                ~~~                
		   Fix (2) : Print Pi# : Rem Two digits after decimal point
		   Fix(-4) : Print Pi# : Rem Exponential with four digits after decimal point
		   Fix(16) : Print Pi# : Rem Revert to normal mode
                ~~~
                '''
            ]
            "radian":
            [
                If DEGREE has already been called, the RADIAN function returns to the default status, where all future angles are
expected to be entered in radians.
                '''
                ~~~                

                ~~~
                '''
            ]
            "degree":
            [
                If, for any reason, you are unhappy with the complexities of radians, AOZ is happy to accept your
trigonometric instructions in degrees. Once the DEGREE command has been activated, all subsequent calls to the
trigonometric functions will expect degrees to be used.
                '''
                ~~~                
		   Degree
		   Print Sin(45)
                ~~~
                '''
            ]
            "rnd_ceiling": //TODO
            [
                
                '''
                ~~~                

                ~~~
                '''
            ]
            "randomize":
            [
                In practice, the numbers produced by the RND function are not genuinely random at all. They are computed by an
internal mathematical formula, whose starting point is taken from a number known as a "seed". This seed is set to a
standard value whenever AOZ is loaded into your Amiga, and that means that the sequence of
numbers generated by the RND function will be exactly the same each time your program is run.
""
This may well be acceptable for arcade games, where pre-set random patterns generated by RND can be used to
advantage, but it is a useless system for more serious applications.
""
The RANDOMIZE command solves this problem by setting the value of the seed directly. This seed can be any
value you choose, and each seed will generate an individual sequence of numbers. RANDOMIZE can also be used
in conjunction with the TIMER variable, to generate genuine random numbers.

            ]
            "abs":
            [
                This function is used to convert arguments into a positive number. ABS returns an absolute value of an integer or
fractional number, paying no attention to whether that number is positive or negative, in other words, ignoring its
sign.
For example:
                '''
                ~~~                
		   Print Abs(-1),Abs(1)
                ~~~
                '''
            ]
            "int":
            [
                The INT function rounds down a floating point number to the nearest whole number (integer), so that the result of
the following two example lines is 3 and -2, respectively:
                '''
                ~~~                
		   Print Int(3.9999)
		   Print Int(-1.1)
                ~~~
                '''
            ]
            "pi#": //TODO
            [
                
                '''
                ~~~                

                ~~~
                '''
            ]
            "min":
            [
                Similarly, the MIN function returns the smaller value of two expressions. Expressions can consist of strings, integers
or real numbers, but only compare like with like, as follows:
                '''
                ~~~                
		   A=Min(99,1) : Print A
		   Print Min("AOZ","AOZ")
                ~~~
                '''
            ]
            "max":
            [
                MAX compares two expressions and returns the largest. Different types of expressions cannot be compared in one
instruction, so they must not be mixed.
Here are some examples:
                '''
                ~~~                
		   Print Max(99,1)
		   Print Max("AOZ","AOZ")
                ~~~
                '''
            ]
            "sin":
            [
                The SIN function calculates how far point b is above the x-axis, known as the sine of the angle a.
Note that SIN always returns a floating point number. For example:
                '''
                ~~~                
		   Degree
		   For X=0 To 319
			Y#=Sin(X)
			Plot X,Y#*50+100
		   Next X
                ~~~
                '''
            ]
            "cos":
            [
                In the above diagram, the distance that point b is to the right of the y-axis is known as the cosine. If b goes to the
left of the y-axis, its cosine value becomes negative. (Similarly, if it drops below the x-axis, its sine value is
negative.) The COS function gives the cosine of a given angle.
To demonstrate this, add the following two lines to your last example between the PLOT and NEXT instructions:
                '''
                ~~~                
		   Y#=Cos(X)
		   Plot X,Y#*50+100
                ~~~
                '''
            ]
            "tan":
            [
                For any angle, the tangent is the result of when its sine is divided by its cosine. The TAN function generates the
tangent of a given angle. For example:
                '''
                ~~~                
		   Degree : Print Tan(45)
		   Radian : Print Tan(Pi#/8)
                ~~~
                '''
            ]
            "asin":
            [
                The ASIN function takes a number between -1 and +1, and calculates the angle which would be needed to generate this value with SIN. For example:
                '''
                ~~~ 
		   A#=Sin(45)
		   Print Asin(A#)
                ~~~
                '''

            ]
            "acos":
            [
                The ACOS function takes a number between -1 and +1, and calculates the angle which would be needed to generate this value with COS. For example:
                '''
                ~~~                
		   A#=Cos(45)
		   Print Acos(A#)
                ~~~
                '''
            ]
            "atan":
            [
                ATAN returns the arctan of a given number, like this:
                '''
                ~~~                
		   Degree : Print Tan(2)
		   Degree : Print Atan(0.03492082)
                ~~~
                '''
A hyperbola is a conical section, formed by a plane that cuts both bases of a cone. In other words, an asymmetrical
curve. Wave forms and trajectories are much more likely to follow this sort of eccentric curve, than perfect arcs of
circles. The hyperbolic functions express the relationship between various distances of a point on the hyperbolic
curve and the coordinate axes.
            ]
            "hsin":
            [
                The HSIN function calculates the hyperbolic sine of a given angle.

            ]
            "hcos":
            [
                Use this function to find the hyperbolic cosine of an angle.

            ]
            "htan":
            [
                HTAN returns the hyperbolic tangent of the given angle.

            ]
            "sqr":
            [
                This function calculates the square root of a positive number, that is to say, it returns a number that must be
multiplied by itself to give the specified value. For example:
                '''
                ~~~                
		   Print Sqr(25)
		   Print Sqr(11.1111)
                ~~~
                '''
            ]
            "log":
            [
                LOG returns the logarithm in base 10 (log 10) of the given value. For example:
                '''
                ~~~                
		   Print Log(10)
		   A#=Log(100)
                ~~~
                '''
            ]
            "ln":
            [
                The LN Function calculates the natural logarithm (Naperian logarithm) of the given value. For example:
                '''
                ~~~                
		   Print Ln(10)
		   A#=Ln(100) : Print A#
                ~~~
                '''
            ]
            "exp":
            [
                Use the EXP function to return the exponential of a specified value. For example:
                '''
                ~~~                
		   Print Exp(1)
                ~~~
                '''
            ]
            "angle#": //TODO
            [
                
                '''
                ~~~                

                ~~~
                '''
            ]
            "distance#": //TODO
            [
                
                '''
                ~~~                

                ~~~
                '''
            ]
           
        }
    }
}
