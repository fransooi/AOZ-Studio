{
    string_of_characters:
    { 
        name: "" //TODO
        intro: ""
        conclusion: ""
        commands:
        {
            "left$":
            [
                LEFT$ reads the specified number of characters in a source string, starting from the left-hand side, and copies them into a destination string. The first type of usage of this function creates a new destination string from the chosen number of characters of the source string. For example:
                '''
                ~~~
                Do
                    Input "Type in a string:";S$
                    Print "Display how many characters from
                    Input "the left?";N
                    Print Left$(S$,N)
                Loop
                ~~~
                '''
            ]
            "right$":
            [
                Here are two examples demonstrating each version of usage:
                '''
                ~~~
                Print Right$("IGNORED54321",5)
                A$=Right$("REJECTED0123456789",10)
                Print A$
                B$="AMOS ************"
                Right$(B$,12)="Professsional"
                Print B$
                ~~~
                '''
            ]
            "mid$":
            [
                Similarly, the MID$ function returns characters from the middle of a string, with the first number specified in brackets setting the offset from the start of the string and the second number setting how many characters are to be fetched. If the number of characters to be fetched is omitted from your instruction, then the characters will be read right up to the end of the string being examined. Here are some examples:
                '''
                ~~~                
                Print Mid$("AMOS Professional",6)
                Print Mid$("AMOS Professional",6,4)
                A$="AMOS Professional ***"
                Mid$(A$,19)="Basic"
                Print A$
                Mid$(A$,19,3)="Mag"
                Print A$
                ~~~
                '''
            ]
            "asc":
            [
                To get the internal ASCII code of the first character in a string, use the ASC function like this:
                '''
                ~~~                
		   Print Asc("B")
		   Print Asc("AOZ")
                ~~~
                '''
            ]
            "flip$":
            [
                This function simply reverses the order of the characters held in an existing string. For example:
                '''
                ~~~                
		   Print Flip$("SOMA gnippilf")
                ~~~
                '''
            ]
            "chr$":
            [
                The CHR$ function creates a string that contains a single character generated by a given ASCII code number. Note
that only the characters with ASCII code numbers 32 to 255 are printable on the screen. Others are used internally as
control codes. Match characters with their codes using this routine:
                '''
                ~~~                
		   For S=32 To 255: Print Chr$(S); : Next
                ~~~
                '''
            ]
            "space$":
            [
                Try the following example:
                '''
                ~~~                
		   Print "Ten";Space$(10);"spaces"
                ~~~
                '''
            ]
            "string$":
            [
                Do not confuse this with STR$, which converts numbers into a string. The STRING$ function creates a new string
filled with the required number of copies of the first character from an existing string. For instance, the following
example produces a new string containing ten copies of the character "A".
                '''
                ~~~                
		   Print String$("AOZ is a joy forever",10)
                ~~~
                '''
            ]
            "space$":
            [
                Manipulating strings
Sometimes you may want to handle your strings for special purposes. For example, if you wish to pad out a piece of
text before it gets printed onto the screen, you will need an accurate method of creating spaces in the string. Try the following example:
                '''
                ~~~                
		   Print "Ten";Space$(10);"spaces"
                ~~~
                '''
            ]
            "upper$":
            [
                This function converts the characters in a string into upper case (capital) letters, and places the result into a new
string. For example:
                '''
                ~~~                
		   Print Upper$("AOZ")
                ~~~
                '''
            ]
            "lower$":
            [
                This works in the same way as UPPERS, but translates all the characters in a string into nothing but lower case
(small) letters. These sorts of text conversions are particularly useful for interpreting user-input in interactive data
programs and adventure games, because input can be converted into a standard format which is understood by your
programs. For example:
                '''
                ~~~                
		   Input "Do you want to continue? (Yes or No)";ANSWER$
		   ANSWER$=Lower$(ANSWER$) : If ANSWER$="no" Then Edit
		   Print "OK. Continuing with your program"
                ~~~
                '''
            ]
            "str$":
            [
                Str$ converts a real number variable into a string. This can be used to overcome limitations posed by functions like
CENTRE, which does not accept numbers as parameters, but will work happily with parameters in the form of
strings. Here is an example:
                '''
                ~~~                
		   Centre "Remaining memory is"+Str$(Chip Free)+" Bytes"
                ~~~
                '''
            ]
            "val":
            [
                To perform the reverse task to STR$, the VAL function converts a list of decimal digits stored in a string, changing
them into a number. If this process fails for any reason, a value of zero will be returned. For example:
                '''
                ~~~                
		   X=Val("1234") : Print X
                ~~~
                '''
            ]
            "bin$":
            [
                This is the function that converts a decimal number or expression into the equivalent string of binary digits. The
binary number that is returned will automatically have a leading % (per cent) character added to it. This character
acts as an introduction sign, to indicate that the number which follows it is in binary notation, rather than the
standard decimal system.
""
After the decimal value that is to be converted, an optional number between 1 and 31 can be added which sets the
number of digits to be returned in the binary string. If this parameter is omitted, AOZ will express the
value in the fewest possible digits, with no leading zeros. Here are a few examples:
                '''
                ~~~                
		   Print Bin$(5)
		   Print Bin$(10)
		   Print Bin$(255)
		   X$=Bin$(100) : Print X$
                ~~~
                '''
                You may enter binary numbers directly, as part of an expression, providing that the % (per cent) character is placed
in front of your binary value. Such numbers will be converted into standard decimal notation automatically. For
example:
                '''
                ~~~                
		   Print %101
		   Print %1010
		   Print %11111111
		   X$=Bin$(100) : Print Val(X$)
                ~~~
                '''
                Certain functions make use of yet another system of counting. The Hexadecimal system counts in units of 16 rather
than ten, so a total of 16 different digits is needed to represent all the different numbers. The digits from 0 to 9 are
used as normal, but the digits from 10 to 15 are signified by the letters A to F, as shown in the following table:
                '''
                ~~~                
		Hex digit 	0 1 2 3 4 5 6 7 8 9 A  B  C  D  E  F
		Decimal 	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
                ~~~
                '''
            ]
            "hex$":
            [
                HEX$ converts numbers from the decimal system into a string of hexadecimal (Hex) digits. The decimal value to be
converted is specified in brackets. The hex number that is returned will automatically have a leading $ (dollar)
character added to it.
""        
This character acts as an introduction sign, to indicate that the number which follows it is in hexadecimal notation,
rather than the standard decimal system.
""
After the decimal value that is to be converted, an optional number can be added which sets the number of digits to
be returned in the hex string. If this parameter is omitted, AOZ will return the value in the fewest
possible digits needed to express the hex number. For example:
                '''
                ~~~                
		   Print Hex$(100)
		   Print Hex$(100,3)
                ~~~
                '''
                HEX$ is often used with the COLOUR function to display the precise mixture of Red, Green and Blue components
in a particular colour, as follows:
                '''
                ~~~                
		   Print Hex$(Colour(2))
                ~~~
                '''
                Hexadecimal notation is ideal for handling large numbers such as addresses, and it may be entered directly in any
AOZ Basic expression. The $ (dollar) character must be placed in front of hex numbers, and they will
be converted into standard decimal notation automatically. For example:
                '''
                ~~~                
		   Print $64
		   Print $A
                ~~~
                '''
Do not confuse the use of the leading $ character for a hex number with the use of a trailing $ character for a
string. $A is a hexadecimal number, but A$ is a variable!"
            ]
            "len":
            [
                The LEN function returns the number of characters stored in a string. For example:
                '''
                ~~~                
		   Print Len("0123456789")
                ~~~
                '''
            ]
            "instr":
            [
                INSTR allows you to search for all instances of one string inside another. In the following examples, the "host"
strings are searched for the first occurrence of the "guest" strings you are seeking. If the relevant string is found, its
location will be reported in the form of the number of characters from the left-hand side of the host string. If the
search is unsuccessful, a result of zero will be given.
                '''
                ~~~                
		   Print Instr("AOZ","AMOS")
		   Print Instr("AOZ","O")
		   Print Instr("AOZ","o")
		   Print Instr("AOZ","Provisional")
                ~~~
                '''

                '''
                ~~~                
		   Do
		   	Input "Type in a host string:;H$
		   	Input "Type in a guest string to be found:;G$
		   	X=Instr(H$,G$)
		   	If X=0 Then Print G$;" Not found"
		   	If X<>0 Then Print G$;" Found at position ";X
		   Loop
                ~~~
                '''
                Normally, the search will begin from the first character at the extreme left-hand side of the host string, but you may
begin searching from any position by specifying an optional number of characters from the beginning of the host
string. The optional start-of-search position can range from zero to the maximum number of characters in the host
string to be searched. For example:
                '''
                ~~~                
		   Print Instr("AOZ","O",0)
		   Print Instr("AOZ","O",4)
                ~~~
                '''
            ]
            "tab$":
            [
                The TAB$ function returns a special control character called TAB, which carries the Ascii code of 9. When this character is printed, the text cursor is automatically moved to the next tabulated column setting (Tab) to the right. The default setting for this is four characters, which can be changed as follows:

            ]
            "repeat$":
            [
                To repeat the same string of characters using a single PRINT statement, follow your string of text with the number
of times you want the repetition. Allowable values are between 1 and 127. Whenever the string is printed, a
sequence of control characters is automatically added to the r$ variable, in the following format:
                '''
                ~~~                
		Chr$(27)+"RO"+A$+Chr$(27)+"R"+Chr$(48+n)
                ~~~
                '''
            ]
        }
    }
}
